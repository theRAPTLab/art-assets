{
  "id": "mystery_foodweb",
  "label": "Food Web",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 255255204,
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [],
  "blueprints": [
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT

// Explanation:
// This model involves learners repreesenting the energy flow in the system (need to add more here)

prop global.visible setTo false

addProp energyReleasedAsHeat number 0

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Explanation",
      "scriptText": `# BLUEPRINT Explanation
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

// ----------------------------------------------------------------------------------------------------------------
// üîé WHAT DOES THIS DO? This charaacter is meaant to explain the rest of the scripts, and is not meant to be added to the stage
// ----------------------------------------------------------------------------------------------------------------

// üîé The goal of this model is to let students explore the energy in the foodweb system by being a
// üîé representaiton of that energy rather than a character. Therefore they will be the EenergyRepresentation
// üîé character using either pozyx or charController

// üîé The system is intended to mirror the foodweb model in that energy is meant to go from the sun to (add description).
// üîé To help movivate the students, the algae and fish lose energy over time, so they will die if the users don't
// üîé hurry and give it to them

// üîé The main chaaracter is therefore the EnergyRepresentation, which stuents can use to look around. As they touch
// üîé an energy source, they will pick up / become that kind of energy
// üîé So, a key thing to look at for is how the EnergyRepresentation character changes it's energyType as it moves around

# PROGRAM INIT
addFeature Costume
featProp agent.Costume.costumeName setTo 'onexone.json'
featProp agent.Costume.scale setTo 1

# PROGRAM UPDATE
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]`
    },
    {
      "name": "Sun",
      "scriptText": `# BLUEPRINT Sun
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM INIT
// üîé The sun is one of the characters that produces energy
// üîé Since it is a perpetual source of energy and doesn't do anything but sit here, it is relatively
// üîé simple, and just needs the variables for the EnergyRepresentation to read


addFeature Costume
featProp Sun.Costume.costumeName setTo 'circle.json'
// Instead of sun art, we are using a generic circle, so the next line tints it yellow
featCall Sun.Costume setColorize 255 215 0
// This makess sure the sunu is behind everything else
prop Sun.zIndex setTo 0


addFeature Physics
featProp Sun.Costume.scale setTo 1

// types to use for energy transfer: producer, primaryConsumer, secondaryConsumer, tertieryConsumer, decomposer, solar

// these are referenced by EnergyRepresentation
addProp energyType string 'solar'

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Sky",
      "scriptText": `# BLUEPRINT Sky
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

// required directive
# PROGRAM INIT
// Note: this character doesn't do anyhting - it is just for show since there is no
// other easy way to add background art
addFeature Costume
featProp Sky.Costume.costumeName setTo 'MFW_Temp_Background.png'
// featCall Sky.Costume setColorize 53 81 92

addFeature Physics
featProp Sky.Costume.width setTo 800
featProp Sky.Costume.height setTo 800

// make sure this is always way in the back behind all
// of the other characters
prop Sky.zIndex setTo -100

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Timer",
      "scriptText": `# BLUEPRINT Timer
      # PROGRAM INIT
      addFeature Graphing
      addFeature Costume
      featProp Timer.Costume.costumeName setTo 'onexone.json'
      addProp time number 0
      prop Timer.zIndex setTo 500

      featProp Timer.Graphing.text setTo 'Time: 0'

      # PROGRAM UPDATE
  every 1 runAtStart [[
        prop Timer.time add 1
        exprPush {{ 'Time: ' + agent.getProp('time').value }}
        featPropPop Timer.Graphing.text
      ]]
`
    },
    {
      "name": "GraphLostEnergy",
      "scriptText": `# BLUEPRINT GraphLostEnergy
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// required directive
# PROGRAM INIT
// üîé This is a graph of energy lost to heat from all charaacters
// üîé since there are lots of characters, rather than sume them up one type
// üîé at a time, use a global variabe to track that excess heat

// hide the actual art since we just want the text to displaay
addFeature Costume
featProp GraphLostEnergy.Costume.costumeName setTo 'onexone.json'
featProp GraphLostEnergy.Costume.scale setTo 1

addFeature Graphing
addFeature Population
featProp GraphLostEnergy.Graphing.isLargeGraphic setTo true


// using a generic name so that it is easier to change later
addProp lostEnergy number 500
prop GraphLostEnergy.lostEnergy setMax 1000
prop GraphLostEnergy.lostEnergy setMin 0

featProp GraphLostEnergy.Graphing.graphProp setTo 'lostEnergy'

// make sure something displays with some initial text, on bottom right at first
prop GraphLostEnergy.x setTo 495
prop GraphLostEnergy.y setTo 350
prop GraphLostEnergy.zIndex setTo 300

featProp GraphLostEnergy.Graphing.text setTo 'Lost Energy'

# PROGRAM UPDATE

onEvent Tick [[

  // exprPush {{ global.getProp('energyReleasedAsHeat').value }}
  propPush global.energyReleasedAsHeat
  propPop GraphLostEnergy.lostEnergy

]]

`
    },
    {
      "name": "character1",
      "scriptText": `# BLUEPRINT character1
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

// required directive
# PROGRAM INIT
// üîé Character1 is one of the characters that takes / produces energy
// üîé Note that it mostly just stores properties that the EnergyRepresentation will check / change
// üîé The other main functionality (under update) is that it will update its meter color depending on
// üîé how much energy it has


addFeature Costume
// ‚úèÔ∏è LETS CHANGE THIS: Decided and draw what/who is the charachter and replace the temporary image
featProp character1.Costume.costumeName setTo 'MFW_Character1.png'

addFeature Physics
featProp character1.Costume.scale setTo 0.1

// types to use for energy transfer: producer, primaryConsumer, secondaryConsumer, tertieryConsumer, decomposer, solar

// these are referenced by EnergyRepresentation
addProp energyType String 'producer'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop character1.energyLevel setMax 100
prop character1.energyLevel setMin 0

// ‚úèÔ∏è LETS CHANGE THIS: make character1 lose energy faster (or slower)
addProp energyUse Number 1

addProp nutrientsType String 'producer'
// setup to track nutrients and begin at 1/2 way
addProp nutrientsLevel number 75
prop character1.nutrientsLevel setMax 100
prop character1.nutrientsLevel setMin 0

// ‚úèÔ∏è LETS CHANGE THIS: make the character lose nutrients faster (or slower)
addProp nutrientsUse number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp character1.Graphing.meterProp setTo 'energyLevel'

featProp character1.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 2 runAtStart [[

  // decrease energy each tick, using the energyUse varable to determine how much
  ifProp character1.energyLevel greaterThan 0 [[
    exprPush {{ character1.getProp('energyLevel').value - character1.getProp('energyUse').value }}
    propPop character1.energyLevel
  ]]

  // this code sets the color of the energy bar based on how hungry the character is
  // set character1 energy meter color
  // doing great
  ifProp character1.energyLevel greaterThanOrEqual 60 [[
    // Green
    featProp character1.Graphing.meterColor setTo 65280
  ]]
  // needs some energy
  ifProp character1.energyLevel lessThan 60 [[
    // Orange
    featProp character1.Graphing.meterColor setTo 16737792
  ]]
  // in trouble
  ifProp character1.energyLevel lessThan 30 [[
    // Red
    featProp character1.Graphing.meterColor setTo 16711680

  ]]

  // decrease nutrients each tick, using the nutrientsUse varable to determine how much
  ifProp character1.nutrientsLevel greaterThan 0 [[
    exprPush {{ character1.getProp('nutrientsLevel').value - character1.getProp('nutrientsUse').value }}
    propPop character1.nutrientsLevel
  ]]

  // this code sets the color of the character based on how much nutrients the character has
  // perfect shape
  ifProp character1.nutrientsLevel greaterThanOrEqual 80 [[
    // natural
    featCall character1.Costume resetColorize
  ]]
  // doing good
  ifProp character1.nutrientsLevel lessThan 80 [[
    // Yellowish
    featCall character1.Costume setColorizeHSV 0.183 0.89 0.67
  ]]
  // needs some energy
  ifProp character1.nutrientsLevel lessThan 60 [[
    // brownish
    featCall character1.Costume setColorizeHSV 0.133 0.93 0.53
  ]]
  // in trouble
  ifProp character1.nutrientsLevel lessThan 35 [[
    // blackish
    featCall character1.Costume setColorizeHSV 0.0083 0.29 0.5

  ]]
]]`
    },
    {
      "name": "character2",
      "scriptText": `# BLUEPRINT character2
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

// required directive
# PROGRAM INIT
// üîé character2 is one of the characters that takes / produces energy
// üîé Note that it mostly just stores properties that the EnergyRepresentation will check / change
// üîé The other main functionality (under update) is that it will update its meter color depending on
// üîé how much energy it has


addFeature Costume
// ‚úèÔ∏è LETS CHANGE THIS: Decided and draw what/who is the charachter and replace the temporary image
featProp character2.Costume.costumeName setTo 'MFW_Character2.png'

addFeature Physics
featProp character2.Costume.scale setTo 0.1

// types to use for energy transfer: producer, primaryConsumer, secondaryConsumer, tertieryConsumer, decomposer, solar

// these are referenced by EnergyRepresentation
addProp energyType String 'producer'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop character2.energyLevel setMax 100
prop character2.energyLevel setMin 0

// ‚úèÔ∏è LETS CHANGE THIS: make character2 lose energy faster (or slower)
addProp energyUse Number 1

addProp nutrientsType String 'producer'
// setup to track nutrients and begin at 1/2 way
addProp nutrientsLevel number 75
prop character2.nutrientsLevel setMax 100
prop character2.nutrientsLevel setMin 0

// ‚úèÔ∏è LETS CHANGE THIS: make the character lose nutrients faster (or slower)
addProp nutrientsUse number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp character2.Graphing.meterProp setTo 'energyLevel'

featProp character2.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 2 runAtStart [[

  // decrease energy each tick, using the energyUse varable to determine how much
  ifProp character2.energyLevel greaterThan 0 [[
    exprPush {{ character2.getProp('energyLevel').value - character2.getProp('energyUse').value }}
    propPop character2.energyLevel
  ]]

  // this code sets the color of the energy bar based on how hungry the character is
  // set character2 energy meter color
  // doing great
  ifProp character2.energyLevel greaterThanOrEqual 60 [[
    // Green
    featProp character2.Graphing.meterColor setTo 65280
  ]]
  // needs some energy
  ifProp character2.energyLevel lessThan 60 [[
    // Orange
    featProp character2.Graphing.meterColor setTo 16737792
  ]]
  // in trouble
  ifProp character2.energyLevel lessThan 30 [[
    // Red
    featProp character2.Graphing.meterColor setTo 16711680

  ]]

  // decrease nutrients each tick, using the nutrientsUse varable to determine how much
  ifProp character2.nutrientsLevel greaterThan 0 [[
    exprPush {{ character2.getProp('nutrientsLevel').value - character2.getProp('nutrientsUse').value }}
    propPop character2.nutrientsLevel
  ]]

  // this code sets the color of the character based on how much nutrients the character has
  // perfect shape
  ifProp character2.nutrientsLevel greaterThanOrEqual 80 [[
    // natural
    featCall character2.Costume resetColorize
  ]]
  // doing good
  ifProp character2.nutrientsLevel lessThan 80 [[
    // Yellowish
    featCall character2.Costume setColorizeHSV 0.183 0.89 0.67
  ]]
  // needs some energy
  ifProp character2.nutrientsLevel lessThan 60 [[
    // brownish
    featCall character2.Costume setColorizeHSV 0.133 0.93 0.53
  ]]
  // in trouble
  ifProp character2.nutrientsLevel lessThan 35 [[
    // blackish
    featCall character2.Costume setColorizeHSV 0.0083 0.29 0.5

  ]]
]]`
    },
    {
      "name": "character3",
      "scriptText": `# BLUEPRINT character3
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

// required directive
# PROGRAM INIT
// üîé character3 is one of the characters that takes / produces energy
// üîé Note that it mostly just stores properties that the EnergyRepresentation will check / change
// üîé The other main functionality (under update) is that it will update its meter color depending on
// üîé how much energy it has


addFeature Costume
// ‚úèÔ∏è LETS CHANGE THIS: Decided and draw what/who is the charachter and replace the temporary image
featProp character3.Costume.costumeName setTo 'MFW_Character3.png'

addFeature Physics
featProp character3.Costume.scale setTo 0.1

// types to use for energy transfer: producer, primaryConsumer, secondaryConsumer, tertieryConsumer, decomposer, solar

// these are referenced by EnergyRepresentation
addProp energyType String 'primaryConsumer'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop character3.energyLevel setMax 100
prop character3.energyLevel setMin 0

// ‚úèÔ∏è LETS CHANGE THIS: make the character lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp character3.Graphing.meterProp setTo 'energyLevel'

featProp character3.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 2 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ character3.getProp('energyLevel').value - character3.getProp('energyUse').value }}
  propPop character3.energyLevel

  // this code sets the color of the energy bar based on how hungry the character is
  // sated
  ifProp character3.energyLevel greaterThanOrEqual 50 [[
    featProp character3.Costume.currentFrame setTo 0
    // Green
    featProp character3.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifProp character3.energyLevel lessThan 50 [[
    featProp character3.Costume.currentFrame setTo 1
    // Orange
    featProp character3.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifProp character3.energyLevel lessThan 20 [[
    featProp character3.Costume.currentFrame setTo 1
    // Red
    featProp character3.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifProp character3.energyLevel lessThan 1 [[
    featProp character3.Costume.currentFrame setTo 2
    prop character3.alpha setTo 0.3
    prop character3.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp character3.Graphing.meterProp setTo 'energyLevel'

]]`
    },
    {
      "name": "character4",
      "scriptText": `# BLUEPRINT character4
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

// required directive
# PROGRAM INIT
// üîé character4 is one of the characters that takes / produces energy
// üîé Note that it mostly just stores properties that the EnergyRepresentation will check / change
// üîé The other main functionality (under update) is that it will update its meter color depending on
// üîé how much energy it has


addFeature Costume
// ‚úèÔ∏è LETS CHANGE THIS: Decided and draw what/who is the charachter and replace the temporary image
featProp character4.Costume.costumeName setTo 'MFW_Character4.png'

addFeature Physics
featProp character4.Costume.scale setTo 0.1

// types to use for energy transfer: producer, primaryConsumer, secondaryConsumer, tertieryConsumer, decomposer, solar

// these are referenced by EnergyRepresentation
addProp energyType String 'primaryConsumer'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop character4.energyLevel setMax 100
prop character4.energyLevel setMin 0

// ‚úèÔ∏è LETS CHANGE THIS: make the character lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp character4.Graphing.meterProp setTo 'energyLevel'

featProp character4.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 2 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ character4.getProp('energyLevel').value - character4.getProp('energyUse').value }}
  propPop character4.energyLevel

  // this code sets the color of the energy bar based on how hungry the character is
  // sated
  ifProp character4.energyLevel greaterThanOrEqual 50 [[
    featProp character4.Costume.currentFrame setTo 0
    // Green
    featProp character4.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifProp character4.energyLevel lessThan 50 [[
    featProp character4.Costume.currentFrame setTo 1
    // Orange
    featProp character4.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifProp character4.energyLevel lessThan 20 [[
    featProp character4.Costume.currentFrame setTo 1
    // Red
    featProp character4.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifProp character4.energyLevel lessThan 1 [[
    featProp character4.Costume.currentFrame setTo 2
    prop character4.alpha setTo 0.3
    prop character4.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp character4.Graphing.meterProp setTo 'energyLevel'

]]`
    },
    {
      "name": "EnergyInSystem",
      "scriptText": `# BLUEPRINT EnergyInSystem
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// required directive
# PROGRAM INIT
// hide the actual art since we just want the text to displaay
addFeature Costume
featProp EnergyInSystem.Costume.costumeName setTo 'onexone.json'
featProp EnergyInSystem.Costume.scale setTo 1

addFeature Graphing
addFeature Population
featProp EnergyInSystem.Graphing.isLargeGraphic setTo true

// using a generic name so that it is easier to change later
addProp totalEnergy Number 500
prop EnergyInSystem.totalEnergy setMax 1000
prop EnergyInSystem.totalEnergy setMin 0

// to store the current values of all animals and vaggies separately
// I could just add them up below, but this way we can see them in the inspector
addProp totalCharacter1Energy Number 0
addProp totalCharacter2Energy Number 0
addProp totalCharacter3Energy Number 0
addProp totalCharacter4Energy Number 0
addProp totalCharacter5Energy Number 0
addProp totalCharacter6Energy Number 0
addProp totalCharacter7Energy Number 0
addProp totalCharacter8Energy Number 0
addProp totalCharacter9Energy Number 0


featProp EnergyInSystem.Graphing.graphProp setTo 'totalEnergy'

// make sure something displays with some initial text, on bottom right at first
prop EnergyInSystem.x setTo 495
prop EnergyInSystem.y setTo 187
prop EnergyInSystem.zIndex setTo 300

featProp EnergyInSystem.Graphing.text setTo 'Energy in System'

# PROGRAM UPDATE

onEvent Tick [[

  // count up the character1
  featProp EnergyInSystem.Population.monitoredCharacter setTo 'character1'
  featProp EnergyInSystem.Population.monitoredCharacterProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countCharacterProp 'character1' 'energyLevel'
  exprPush {{ EnergyInSystem.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totalCharacter1Energy

  // count up the character2
  featProp EnergyInSystem.Population.monitoredCharacter setTo 'character2'
  featProp EnergyInSystem.Population.monitoredCharacterProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countCharacterProp 'character2' 'energyLevel'
  exprPush {{ EnergyInSystem.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totalCharacter2Energy

    // count up the character3
  featProp EnergyInSystem.Population.monitoredCharacter setTo 'character3'
  featProp EnergyInSystem.Population.monitoredCharacterProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countCharacterProp 'character3' 'energyLevel'
  exprPush {{ EnergyInSystem.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totalCharacter3Energy

    // count up the character4
  featProp EnergyInSystem.Population.monitoredCharacter setTo 'character4'
  featProp EnergyInSystem.Population.monitoredCharacterProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countCharacterProp 'character4' 'energyLevel'
  exprPush {{ EnergyInSystem.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totalCharacter4Energy

    // count up the character5
  featProp EnergyInSystem.Population.monitoredCharacter setTo 'character5'
  featProp EnergyInSystem.Population.monitoredCharacterProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countCharacterProp 'character5' 'energyLevel'
  exprPush {{ EnergyInSystem.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totalCharacter5Energy

    // count up the character6
  featProp EnergyInSystem.Population.monitoredCharacter setTo 'character6'
  featProp EnergyInSystem.Population.monitoredCharacterProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countCharacterProp 'character6' 'energyLevel'
  exprPush {{ EnergyInSystem.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totalCharacter6Energy

    // count up the character7
  featProp EnergyInSystem.Population.monitoredCharacter setTo 'character7'
  featProp EnergyInSystem.Population.monitoredCharacterProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countCharacterProp 'character7' 'energyLevel'
  exprPush {{ EnergyInSystem.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totalCharacter7Energy

    // count up the character8
  featProp EnergyInSystem.Population.monitoredCharacter setTo 'character8'
  featProp EnergyInSystem.Population.monitoredCharacterProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countCharacterProp 'character8' 'energyLevel'
  exprPush {{ EnergyInSystem.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totalCharacter8Energy

    // count up the character9
  featProp EnergyInSystem.Population.monitoredCharacter setTo 'character9'
  featProp EnergyInSystem.Population.monitoredCharacterProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countCharacterProp 'character9' 'energyLevel'
  exprPush {{ EnergyInSystem.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totalCharacter9Energy
  // graph the sum
  exprPush {{ EnergyInSystem.getProp('totalCharacter1Energy').value + agent.getProp('totalCharacter2Energy').value + agent.getProp('totalCharacter3Energy').value + agent.getProp('totalCharacter4Energy').value + agent.getProp('totalCharacter5Energy').value + agent.getProp('totalCharacter6Energy').value + agent.getProp('totalCharacter7Energy').value + agent.getProp('totalCharacter8Energy').value + agent.getProp('totalCharacter9Energy').value }}
  propPop EnergyInSystem.totalEnergy


]]

`
    },
    {
      "name": "character5",
      "scriptText": `# BLUEPRINT character5
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

// required directive
# PROGRAM INIT
// üîé character5 is one of the characters that takes / produces energy
// üîé Note that it mostly just stores properties that the EnergyRepresentation will check / change
// üîé The other main functionality (under update) is that it will update its meter color depending on
// üîé how much energy it has


addFeature Costume
// ‚úèÔ∏è LETS CHANGE THIS: Decided and draw what/who is the charachter and replace the temporary image
featProp character5.Costume.costumeName setTo 'MFW_Character5.png'

addFeature Physics
featProp character5.Costume.scale setTo 0.1

// types to use for energy transfer: producer, primaryConsumer, secondaryConsumer, tertieryConsumer, decomposer, solar

// these are referenced by EnergyRepresentation
addProp energyType String 'secondaryConsumer'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop character5.energyLevel setMax 100
prop character5.energyLevel setMin 0

// ‚úèÔ∏è LETS CHANGE THIS: make the character lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp character5.Graphing.meterProp setTo 'energyLevel'

featProp character5.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 2 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ character5.getProp('energyLevel').value - character5.getProp('energyUse').value }}
  propPop character5.energyLevel

  // this code sets the color of the energy bar based on how hungry the character is
  // sated
  ifProp character5.energyLevel greaterThanOrEqual 50 [[
    featProp character5.Costume.currentFrame setTo 0
    // Green
    featProp character5.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifProp character5.energyLevel lessThan 50 [[
    featProp character5.Costume.currentFrame setTo 1
    // Orange
    featProp character5.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifProp character5.energyLevel lessThan 20 [[
    featProp character5.Costume.currentFrame setTo 1
    // Red
    featProp character5.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifProp character5.energyLevel lessThan 1 [[
    featProp character5.Costume.currentFrame setTo 2
    prop character5.alpha setTo 0.3
    prop character5.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp character5.Graphing.meterProp setTo 'energyLevel'

]]`
    },
    {
      "name": "character6",
      "scriptText": `# BLUEPRINT character6
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

// required directive
# PROGRAM INIT
// üîé character6 is one of the characters that takes / produces energy
// üîé Note that it mostly just stores properties that the EnergyRepresentation will check / change
// üîé The other main functionality (under update) is that it will update its meter color depending on
// üîé how much energy it has


addFeature Costume
// ‚úèÔ∏è LETS CHANGE THIS: Decided and draw what/who is the charachter and replace the temporary image
featProp character6.Costume.costumeName setTo 'MFW_Character6.png'

addFeature Physics
featProp character6.Costume.scale setTo 0.1

// types to use for energy transfer: producer, primaryConsumer, secondaryConsumer, tertieryConsumer, decomposer, solar

// these are referenced by EnergyRepresentation
addProp energyType String 'secondaryConsumer'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop character6.energyLevel setMax 100
prop character6.energyLevel setMin 0

// ‚úèÔ∏è LETS CHANGE THIS: make the character lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp character6.Graphing.meterProp setTo 'energyLevel'

featProp character6.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 2 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ character6.getProp('energyLevel').value - character6.getProp('energyUse').value }}
  propPop character6.energyLevel

  // this code sets the color of the energy bar based on how hungry the character is
  // sated
  ifProp character6.energyLevel greaterThanOrEqual 50 [[
    featProp character6.Costume.currentFrame setTo 0
    // Green
    featProp character6.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifProp character6.energyLevel lessThan 50 [[
    featProp character6.Costume.currentFrame setTo 1
    // Orange
    featProp character6.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifProp character6.energyLevel lessThan 20 [[
    featProp character6.Costume.currentFrame setTo 1
    // Red
    featProp character6.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifProp character6.energyLevel lessThan 1 [[
    featProp character6.Costume.currentFrame setTo 2
    prop character6.alpha setTo 0.3
    prop character6.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp character6.Graphing.meterProp setTo 'energyLevel'

]]
`
    },
    {
      "name": "character7",
      "scriptText": `# BLUEPRINT character7
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

// required directive
# PROGRAM INIT
// üîé character7 is one of the characters that takes / produces energy
// üîé Note that it mostly just stores properties that the EnergyRepresentation will check / change
// üîé The other main functionality (under update) is that it will update its meter color depending on
// üîé how much energy it has


addFeature Costume
// ‚úèÔ∏è LETS CHANGE THIS: Decided and draw what/who is the charachter and replace the temporary image
featProp character7.Costume.costumeName setTo 'MFW_Character7.png'

addFeature Physics
featProp character7.Costume.scale setTo 0.1

// types to use for energy transfer: producer, primaryConsumer, secondaryConsumer, tertieryConsumer, decomposer, solar

// these are referenced by EnergyRepresentation
addProp energyType String 'secondaryConsumer'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop character7.energyLevel setMax 100
prop character7.energyLevel setMin 0

// ‚úèÔ∏è LETS CHANGE THIS: make the character lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp character7.Graphing.meterProp setTo 'energyLevel'

featProp character7.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 2 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ character7.getProp('energyLevel').value - character7.getProp('energyUse').value }}
  propPop character7.energyLevel

  // this code sets the color of the energy bar based on how hungry the character is
  // sated
  ifProp character7.energyLevel greaterThanOrEqual 50 [[
    featProp character7.Costume.currentFrame setTo 0
    // Green
    featProp character7.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifProp character7.energyLevel lessThan 50 [[
    featProp character7.Costume.currentFrame setTo 1
    // Orange
    featProp character7.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifProp character7.energyLevel lessThan 20 [[
    featProp character7.Costume.currentFrame setTo 1
    // Red
    featProp character7.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifProp character7.energyLevel lessThan 1 [[
    featProp character7.Costume.currentFrame setTo 2
    prop character7.alpha setTo 0.3
    prop character7.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp character7.Graphing.meterProp setTo 'energyLevel'

]]`
    },
    {
      "name": "character8",
      "scriptText": `# BLUEPRINT character8
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

// required directive
# PROGRAM INIT
// üîé character8 is one of the characters that takes / produces energy
// üîé Note that it mostly just stores properties that the EnergyRepresentation will check / change
// üîé The other main functionality (under update) is that it will update its meter color depending on
// üîé how much energy it has


addFeature Costume
// ‚úèÔ∏è LETS CHANGE THIS: Decided and draw what/who is the charachter and replace the temporary image
featProp character8.Costume.costumeName setTo 'MFW_Character8.png'

addFeature Physics
featProp character8.Costume.scale setTo 0.1

// types to use for energy transfer: producer, primaryConsumer, secondaryConsumer, tertieryConsumer, decomposer, solar

// these are referenced by EnergyRepresentation
addProp energyType String 'tertieryConsumer'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop character8.energyLevel setMax 100
prop character8.energyLevel setMin 0

// ‚úèÔ∏è LETS CHANGE THIS: make the character lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp character8.Graphing.meterProp setTo 'energyLevel'

featProp character8.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 2 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ character8.getProp('energyLevel').value - character8.getProp('energyUse').value }}
  propPop character8.energyLevel

  // this code sets the color of the energy bar based on how hungry the character is
  // sated
  ifProp character8.energyLevel greaterThanOrEqual 50 [[
    featProp character8.Costume.currentFrame setTo 0
    // Green
    featProp character8.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifProp character8.energyLevel lessThan 50 [[
    featProp character8.Costume.currentFrame setTo 1
    // Orange
    featProp character8.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifProp character8.energyLevel lessThan 20 [[
    featProp character8.Costume.currentFrame setTo 1
    // Red
    featProp character8.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifProp character8.energyLevel lessThan 1 [[
    featProp character8.Costume.currentFrame setTo 2
    prop character8.alpha setTo 0.3
    prop character8.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp character8.Graphing.meterProp setTo 'energyLevel'

]]`
    },
    {
      "name": "character9",
      "scriptText": `# BLUEPRINT character9
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

// required directive
# PROGRAM INIT
// üîé character9 is one of the characters that takes / produces energy
// üîé Note that it mostly just stores properties that the EnergyRepresentation will check / change
// üîé The other main functionality (under update) is that it will update its meter color depending on
// üîé how much energy it has


addFeature Costume
// ‚úèÔ∏è LETS CHANGE THIS: Decided and draw what/who is the charachter and replace the temporary image
featProp character9.Costume.costumeName setTo 'MFW_Character9.png'

addFeature Physics
featProp character9.Costume.scale setTo 0.1

// types to use for energy transfer: producer, primaryConsumer, secondaryConsumer, tertieryConsumer, decomposer, solar

// these are referenced by EnergyRepresentation
addProp energyType String 'decomposer'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop character9.energyLevel setMax 100
prop character9.energyLevel setMin 0

// ‚úèÔ∏è LETS CHANGE THIS: make the character lose energy faster (or slower)
addProp energyUse Number 1

addProp nutrientsType String 'decomposer'

addProp nutrientsLevel Number 50
prop character9.nutrientsLevel setMax 100
prop character9.nutrientsLevel setMin 0

// ‚úèÔ∏è LETS CHANGE THIS: make the character lose nutrients faster (or slower)
addProp nutrientsUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp character9.Graphing.meterProp setTo 'energyLevel'

featProp character9.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 2 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ character9.getProp('energyLevel').value - character9.getProp('energyUse').value }}
  propPop character9.energyLevel

  // this code sets the color of the energy bar based on how hungry the character is
  // sated
  ifProp character9.energyLevel greaterThanOrEqual 50 [[
    featProp character9.Costume.currentFrame setTo 0
    // Green
    featProp character9.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifProp character9.energyLevel lessThan 50 [[
    featProp character9.Costume.currentFrame setTo 1
    // Orange
    featProp character9.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifProp character9.energyLevel lessThan 20 [[
    featProp character9.Costume.currentFrame setTo 1
    // Red
    featProp character9.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifProp character9.energyLevel lessThan 1 [[
    featProp character9.Costume.currentFrame setTo 2
    prop character9.alpha setTo 0.3
    prop character9.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp character9.Graphing.meterProp setTo 'energyLevel'

  // nutrients level goes down every n seconds
  exprPush {{ character9.getProp('nutrientsLevel').value - character9.getProp('nutrientsUse').value }}
  propPop character9.nutrientsLevel

]]`
    },
    {
      "name": "EnergyRepresentation",
      "scriptText": `# BLUEPRINT EnergyRepresentation
# TAG isCharControllable true
# TAG isPozyxControllable true
# TAG isPTrackControllable false

// required directive
# PROGRAM INIT

addFeature Costume
featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_empty_energy.png'

addFeature Physics
featProp EnergyRepresentation.Costume.scale setTo 0.06

// setup energy properties
addProp energyLevel Number 0
prop EnergyRepresentation.energyLevel setMax 100
prop EnergyRepresentation.energyLevel setMin 0

// setup energy type so that we know what we can give it to
// start with none
addProp energyType String 'none'

// setup nutrients properties
addProp nutrientsLevel Number 0
prop EnergyRepresentation.nutrientsLevel setMax 100
prop EnergyRepresentation.nutrientsLevel setMin 0

// setup energy type so that we know what we can give it to
// start with none
addProp nutrientsType String 'none'

addFeature Touches
featCall EnergyRepresentation.Touches monitor 'Sun' c2b
featCall EnergyRepresentation.Touches monitor 'character1' c2b
featCall EnergyRepresentation.Touches monitor 'character2' c2b
featCall EnergyRepresentation.Touches monitor 'character3' c2b
featCall EnergyRepresentation.Touches monitor 'character4' c2b
featCall EnergyRepresentation.Touches monitor 'character5' c2b
featCall EnergyRepresentation.Touches monitor 'character6' c2b
featCall EnergyRepresentation.Touches monitor 'character7' c2b
featCall EnergyRepresentation.Touches monitor 'character8' c2b
featCall EnergyRepresentation.Touches monitor 'character9' c2b

addFeature IU

# PROGRAM UPDATE
// types to use for energy transfer: producer, primaryConsumer, secondaryConsumer, tertieryConsumer, decomposer, solar
// During transfer types: solarToProducer, producerToPrimary, primaryToSecondary, secondaryToSecondary, secondaryToDecomposer, secondaryToTertiery, tertieryToDcomposer, decomposerToProducer

// üîé WHAT DOES THIS DO? Updating Sun energy

when EnergyRepresentation centerFirstTouches Sun [[

  // üîé when touching, show an annotation about how the sun produces energy
  featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Solar_Energy.png'
]]

when EnergyRepresentation centerLastTouches Sun [[

  // üîé when moving off, take a full amount of energy in the form of sunlight and heat (our focus fis on light since the plants use it)
  prop EnergyRepresentation.energyType setTo 'solar'
  prop EnergyRepresentation.energyLevel setTo 100
  featCall EnergyRepresentation.IU logString 'Energy transfer from none to sun'

  featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Solar_Energy.png'
]]

// üîé WHAT DOES THIS DO? Updating character1 energy & nutrients

when EnergyRepresentation centerFirstTouches character1 [[
  ifProp EnergyRepresentation.energyType equal 'none' [[
    prop EnergyRepresentation.energyType setTo 'producer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Producer.png'
    featCall EnergyRepresentation.IU logString 'Energy transfer from none to character1'
  ]]

  // üîé if you have energy from the sun, then give some energy to the character1 , but not all of it because some is released into the environment
  // üîé as heat or lost in other ways
  ifProp EnergyRepresentation.energyType equal 'solar' [[
    prop EnergyRepresentation.energyType setTo 'solarToProducer'
    featCall EnergyRepresentation.IU logString 'Energy transfer from sun to character1'

    // ‚úèÔ∏è LETS CHANGE THIS: alter how much energy the character1 gets from the sun
    prop EnergyRepresentation.energyLevel setTo 0
    prop character1.energyLevel add 50
    // üîé we are losing 50 of the hundred, so note that in the global
    prop global.energyReleasedAsHeat add 50


    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_energy_transfer.png'

    featProp character1.Costume.glow setTo 1
  ]]

  // üîé Updating the nutrients levels

  // üîé if you have nutrients from the character9, then give some nutrients to the character1
  ifProp EnergyRepresentation.nutrientsType equal 'decomposer' [[
    prop EnergyRepresentation.nutrientsType setTo 'decomposerToProducer'
    featCall EnergyRepresentation.IU logString 'Nutrients transfer from decomposer to character1'

    // ‚úèÔ∏è LETS CHANGE THIS: alter how much nutrients character1 gets from the decomposer
    prop EnergyRepresentation.nutrientsLevel setTo 0
    prop character1.nutrientsLevel add 26

    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_energy_transfer.png'
    featProp EnergyRepresentation.Costume.scale setTo 0.3


    featProp character1.Costume.glow setTo 1

  ]]
]]

when EnergyRepresentation centerLastTouches character1 [[

  // üîé if you have no nutrients type, take some nutrients from character1
  ifProp EnergyRepresentation.nutrientsType equal 'decomposerToProducer' [[
    ifProp character1.nutrientsLevel greaterThan 25 [[
      // ‚úèÔ∏è LETS CHANGE THIS: alter how much nutrients the decomposer gives to character1
      // ‚úèÔ∏è it was too fast, so i am removing less then I am moving, but let's imagine they are on different scales
      prop character1.nutrientsLevel sub 10

      // üîé when leaving (after arriving with relevent nutrientsType type) make sure to leave with character1 nutrients type
      prop EnergyRepresentation.nutrientsType setTo 'none'
      featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_empty_energy.png'
      featProp EnergyRepresentation.Costume.scale setTo 0.06

    ]]
  ]]

  // üîé Updating the energy levels

  // if you have no energy type, take some energy from the character1
  ifProp EnergyRepresentation.energyType equal 'solarToProducer' [[
    ifProp character1.energyLevel greaterThan 25 [[
      prop EnergyRepresentation.energyType setTo 'producer'

      // ‚úèÔ∏è LETS CHANGE THIS: alter how much energy the character1 gives to another character
      // ‚úèÔ∏è it was too fast, so i am removing less then I am moving, but let's imagine they are on different scales
      prop character1.energyLevel sub 10
      prop EnergyRepresentation.energyLevel add 25
      // üîé we are losing 25 of the hundred, so note that in the global
      prop global.energyReleasedAsHeat add 25

      featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Producer.png'
    ]]
    prop EnergyRepresentation.energyType setTo 'producer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Producer.png'
  ]]

  // üîé when leaving (after arriving with relevent energy type) make sure to leave with producer energy type
  ifProp EnergyRepresentation.energyType equal 'none' [[
    prop EnergyRepresentation.energyType setTo 'producer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Producer.png'
  ]]
]]


// üîé WHAT DOES THIS DO? Updating character2 energy & nutrients

when EnergyRepresentation centerFirstTouches character2 [[
  ifProp EnergyRepresentation.energyType equal 'none' [[
    prop EnergyRepresentation.energyType setTo 'producer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Producer.png'
    featCall EnergyRepresentation.IU logString 'Energy transfer from none to character2'
  ]]

  // üîé if you have energy from the sun, then give some energy to the character2 , but not all of it because some is released into the environment
  // üîé as heat or lost in other ways
  ifProp EnergyRepresentation.energyType equal 'solar' [[
    prop EnergyRepresentation.energyType setTo 'solarToProducer'
    featCall EnergyRepresentation.IU logString 'Energy transfer from sun to character2'

    // ‚úèÔ∏è LETS CHANGE THIS: alter how much energy the character2 gets from the sun
    prop EnergyRepresentation.energyLevel setTo 0
    prop character2.energyLevel add 50
    // üîé we are losing 50 of the hundred, so note that in the global
    prop global.energyReleasedAsHeat add 50


    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_energy_transfer.png'

    featProp character2.Costume.glow setTo 1
  ]]

  // üîé Updating the nutrients levels

  // üîé if you have nutrients from the character9, then give some nutrients to the character2
  ifProp EnergyRepresentation.nutrientsType equal 'decomposer' [[
    prop EnergyRepresentation.nutrientsType setTo 'decomposerToProducer'
    featCall EnergyRepresentation.IU logString 'Nutrients transfer from decomposer to character2'

    // ‚úèÔ∏è LETS CHANGE THIS: alter how much nutrients character2 gets from the decomposer
    prop EnergyRepresentation.nutrientsLevel setTo 0
    prop character2.nutrientsLevel add 26

    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_energy_transfer.png'
    featProp EnergyRepresentation.Costume.scale setTo 0.3


    featProp character2.Costume.glow setTo 1

  ]]
]]

when EnergyRepresentation centerLastTouches character2 [[

  // üîé if you have no nutrients type, take some nutrients from character2
  ifProp EnergyRepresentation.nutrientsType equal 'decomposerToProducer' [[
    ifProp character2.nutrientsLevel greaterThan 25 [[
      // ‚úèÔ∏è LETS CHANGE THIS: alter how much nutrients the decomposer gives to character2
      // ‚úèÔ∏è it was too fast, so i am removing less then I am moving, but let's imagine they are on different scales
      prop character2.nutrientsLevel sub 10

      // üîé when leaving (after arriving with relevent nutrientsType type) make sure to leave with character2 nutrients type
      prop EnergyRepresentation.nutrientsType setTo 'none'
      featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_empty_energy.png'
      featProp EnergyRepresentation.Costume.scale setTo 0.06

    ]]
  ]]

  // üîé Updating the energy levels

  // if you have no energy type, take some energy from the character2
  ifProp EnergyRepresentation.energyType equal 'solarToProducer' [[
    ifProp character2.energyLevel greaterThan 25 [[
      prop EnergyRepresentation.energyType setTo 'producer'

      // ‚úèÔ∏è LETS CHANGE THIS: alter how much energy the character2 gives to another character
      // ‚úèÔ∏è it was too fast, so i am removing less then I am moving, but let's imagine they are on different scales
      prop character2.energyLevel sub 10
      prop EnergyRepresentation.energyLevel add 25
      // üîé we are losing 25 of the hundred, so note that in the global
      prop global.energyReleasedAsHeat add 25

      featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Producer.png'
    ]]
    prop EnergyRepresentation.energyType setTo 'producer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Producer.png'
  ]]

  // üîé when leaving (after arriving with relevent energy type) make sure to leave with producer energy type
  ifProp EnergyRepresentation.energyType equal 'none' [[
    prop EnergyRepresentation.energyType setTo 'producer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Producer.png'
  ]]
]]

// üîé WHAT DOES THIS DO? Updating character3 energy

when EnergyRepresentation centerFirstTouches character3 [[

  ifProp EnergyRepresentation.energyType equal 'none' [[
    prop EnergyRepresentation.energyType setTo 'primaryConsumer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Primary_Consumers.png'
    featCall EnergyRepresentation.IU logString 'Energy transfer from none to primaryConsumer'
  ]]

  // üîé when touch character3, and energy type is from producer and energy isn't 0, get energy, change meter color to orange, change type to producerToPrimary
  ifProp EnergyRepresentation.energyType equal 'producer' [[
    ifProp character3.energyLevel greaterThan 2 [[
      prop EnergyRepresentation.energyType setTo 'producerToPrimary'

      // ‚úèÔ∏è LETS CHANGE THIS: alter how much energy the character gets from the producer, and what it does to the energy character
      prop EnergyRepresentation.energyLevel setTo 0
      prop character3.energyLevel add 10
      // üîé we are losing 50 of the hundred, so note that in the global
      prop global.energyReleasedAsHeat add 15

      featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_energy_transfer.png'
      featProp character3.Costume.glow setTo 1
    ]]
  ]]

]]

when EnergyRepresentation centerLastTouches character3 [[

  // üîé if you have no primaryConsumer energy type, take some energy from the character3 to the energy
  ifProp EnergyRepresentation.energyType equal 'producerToPrimary' [[
    ifProp character3.energyLevel greaterThan 25 [[
      prop EnergyRepresentation.energyType setTo 'primaryConsumer'

      // ‚úèÔ∏è LETS CHANGE THIS: alter how much energy the character3 gives to a animal
      // ‚úèÔ∏è it was too fast, so i am removing less then I am moving, but let's imagine they are on different scales
      prop character3.energyLevel sub 10
      prop EnergyRepresentation.energyLevel add 25
      // üîé we are losing 25 of the hundred, so note that in the global
      prop global.energyReleasedAsHeat add 25

      featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Primary_Consumers.png'
    ]]
    prop EnergyRepresentation.energyType setTo 'primaryConsumer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Primary_Consumers.png'
  ]]

  // when leaving (after arriving with relevent energy type) make sure to leave with character3 energy type
  ifProp EnergyRepresentation.energyType equal 'none' [[
    prop EnergyRepresentation.energyType setTo 'primaryConsumer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Primary_Consumers.png'
  ]]

]]

// üîé WHAT DOES THIS DO? Updating character4 energy

when EnergyRepresentation centerFirstTouches character4 [[

  ifProp EnergyRepresentation.energyType equal 'none' [[
    prop EnergyRepresentation.energyType setTo 'primaryConsumer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Primary_Consumers.png'
    featCall EnergyRepresentation.IU logString 'Energy transfer from none to primaryConsumer'
  ]]

  // üîé when touch character4, and energy type is from producer and energy isn't 0, get energy, change meter color to orange, change type to producerToPrimary
  ifProp EnergyRepresentation.energyType equal 'producer' [[
    ifProp character4.energyLevel greaterThan 2 [[
      prop EnergyRepresentation.energyType setTo 'producerToPrimary'

      // ‚úèÔ∏è LETS CHANGE THIS: alter how much energy the character gets from the producer, and what it does to the energy character
      prop EnergyRepresentation.energyLevel setTo 0
      prop character4.energyLevel add 10
      // üîé we are losing 50 of the hundred, so note that in the global
      prop global.energyReleasedAsHeat add 15

      featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_energy_transfer.png'
      featProp character4.Costume.glow setTo 1
    ]]
  ]]

]]

when EnergyRepresentation centerLastTouches character4 [[

  // üîé if you have no primaryConsumer energy type, take some energy from the character4 to the energy
  ifProp EnergyRepresentation.energyType equal 'producerToPrimary' [[
    ifProp character4.energyLevel greaterThan 25 [[
      prop EnergyRepresentation.energyType setTo 'primaryConsumer'

      // ‚úèÔ∏è LETS CHANGE THIS: alter how much energy the character4 gives to a animal
      // ‚úèÔ∏è it was too fast, so i am removing less then I am moving, but let's imagine they are on different scales
      prop character4.energyLevel sub 10
      prop EnergyRepresentation.energyLevel add 25
      // üîé we are losing 25 of the hundred, so note that in the global
      prop global.energyReleasedAsHeat add 25

      featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Primary_Consumers.png'
    ]]
    prop EnergyRepresentation.energyType setTo 'primaryConsumer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Primary_Consumers.png'
  ]]

  // when leaving (after arriving with relevent energy type) make sure to leave with character4 energy type
  ifProp EnergyRepresentation.energyType equal 'none' [[
    prop EnergyRepresentation.energyType setTo 'primaryConsumer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Primary_Consumers.png'
  ]]
]]

// üîé WHAT DOES THIS DO? Updating character5 energy

when EnergyRepresentation centerFirstTouches character5 [[

  ifProp EnergyRepresentation.energyType equal 'none' [[
    prop EnergyRepresentation.energyType setTo 'secondaryConsumer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Secondary_consumers.png'
    featCall EnergyRepresentation.IU logString 'Energy transfer from none to secondaryConsumer'
  ]]

  // üîé when touch character5, and energy type is from primaryConsumer and energy isn't 0, get energy, change meter color to orange, change type to primaryToSecondary
  ifProp EnergyRepresentation.energyType equal 'primaryConsumer' [[
    ifProp character5.energyLevel greaterThan 2 [[
      prop EnergyRepresentation.energyType setTo 'primaryToSecondary'

      // ‚úèÔ∏è LETS CHANGE THIS: alter how much energy the character gets from the primaryConsumer, and what it does to the energy character
      prop EnergyRepresentation.energyLevel setTo 0
      prop character5.energyLevel add 10
      // üîé we are losing 50 of the hundred, so note that in the global
      prop global.energyReleasedAsHeat add 15

      featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_energy_transfer.png'
      featProp character5.Costume.glow setTo 1
    ]]
  ]]

  // üîé when touch character5, and energy type is from secondaryConsumer and energy isn't 0, get energy, change meter color to orange, change type to secondaryToSecondary
  ifProp EnergyRepresentation.energyType equal 'secondaryConsumer' [[
    ifProp character5.energyLevel greaterThan 2 [[
      prop EnergyRepresentation.energyType setTo 'secondaryToSecondary'

      // ‚úèÔ∏è LETS CHANGE THIS: alter how much energy the character gets from the secondaryConsumer, and what it does to the energy character
      prop EnergyRepresentation.energyLevel setTo 0
      prop character5.energyLevel add 10
      // üîé we are losing 50 of the hundred, so note that in the global
      prop global.energyReleasedAsHeat add 15

      featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_energy_transfer.png'
      featProp character5.Costume.glow setTo 1
    ]]
  ]]

]]

when EnergyRepresentation centerLastTouches character5 [[

  // üîé if you have no secondaryConsumer energy type, take some energy from the character5 to the energy
  ifProp EnergyRepresentation.energyType equal 'primaryToSecondary' [[
    ifProp character5.energyLevel greaterThan 25 [[
      prop EnergyRepresentation.energyType setTo 'secondaryConsumer'

      // ‚úèÔ∏è LETS CHANGE THIS: alter how much energy the character5 gives to a animal
      // ‚úèÔ∏è it was too fast, so i am removing less then I am moving, but let's imagine they are on different scales
      prop character5.energyLevel sub 10
      prop EnergyRepresentation.energyLevel add 25
      // üîé we are losing 25 of the hundred, so note that in the global
      prop global.energyReleasedAsHeat add 25

      featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Secondary_consumers.png'
    ]]
    prop EnergyRepresentation.energyType setTo 'secondaryConsumer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Secondary_consumers.png'
  ]]

  ifProp EnergyRepresentation.energyType equal 'secondaryToSecondary' [[
    ifProp character5.energyLevel greaterThan 25 [[
      prop EnergyRepresentation.energyType setTo 'secondaryConsumer'

      // ‚úèÔ∏è LETS CHANGE THIS: alter how much energy the character5 gives to a animal
      // ‚úèÔ∏è it was too fast, so i am removing less then I am moving, but let's imagine they are on different scales
      prop character5.energyLevel sub 10
      prop EnergyRepresentation.energyLevel add 25
      // üîé we are losing 25 of the hundred, so note that in the global
      prop global.energyReleasedAsHeat add 25

      featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Secondary_consumers.png'
    ]]
    prop EnergyRepresentation.energyType setTo 'secondaryConsumer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Secondary_consumers.png'
  ]]

  // when leaving (after arriving with relevent energy type) make sure to leave with character5 energy type
  ifProp EnergyRepresentation.energyType equal 'none' [[
    prop EnergyRepresentation.energyType setTo 'secondaryConsumer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Secondary_consumers.png'
  ]]
]]

// üîé WHAT DOES THIS DO? Updating character6 energy

when EnergyRepresentation centerFirstTouches character6 [[

  ifProp EnergyRepresentation.energyType equal 'none' [[
    prop EnergyRepresentation.energyType setTo 'secondaryConsumer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Secondary_consumers.png'
    featCall EnergyRepresentation.IU logString 'Energy transfer from none to secondaryConsumer'
  ]]

  // üîé when touch character6, and energy type is from primaryConsumer and energy isn't 0, get energy, change meter color to orange, change type to primaryToSecondary
  ifProp EnergyRepresentation.energyType equal 'primaryConsumer' [[
    ifProp character6.energyLevel greaterThan 2 [[
      prop EnergyRepresentation.energyType setTo 'primaryToSecondary'

      // ‚úèÔ∏è LETS CHANGE THIS: alter how much energy the character gets from the primaryConsumer, and what it does to the energy character
      prop EnergyRepresentation.energyLevel setTo 0
      prop character6.energyLevel add 10
      // üîé we are losing 50 of the hundred, so note that in the global
      prop global.energyReleasedAsHeat add 15

      featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_energy_transfer.png'
      featProp character6.Costume.glow setTo 1
    ]]
  ]]

  // üîé when touch character6, and energy type is from secondaryToSecondary and energy isn't 0, get energy, change meter color to orange, change type to secondaryToSecondary
  ifProp EnergyRepresentation.energyType equal 'secondaryConsumer' [[
    ifProp character6.energyLevel greaterThan 2 [[
      prop EnergyRepresentation.energyType setTo 'secondaryToSecondary'

      // ‚úèÔ∏è LETS CHANGE THIS: alter how much energy the character gets from the secondaryConsumer, and what it does to the energy character
      prop EnergyRepresentation.energyLevel setTo 0
      prop character6.energyLevel add 10
      // üîé we are losing 50 of the hundred, so note that in the global
      prop global.energyReleasedAsHeat add 15

      featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_energy_transfer.png'
      featProp character6.Costume.glow setTo 1
    ]]
  ]]

]]

when EnergyRepresentation centerLastTouches character6 [[

  // üîé if you have no secondaryConsumer energy type, take some energy from the character6 to the energy
  ifProp EnergyRepresentation.energyType equal 'primaryToSecondary' [[
    ifProp character6.energyLevel greaterThan 25 [[
      prop EnergyRepresentation.energyType setTo 'secondaryConsumer'

      // ‚úèÔ∏è LETS CHANGE THIS: alter how much energy the character6 gives to a animal
      // ‚úèÔ∏è it was too fast, so i am removing less then I am moving, but let's imagine they are on different scales
      prop character6.energyLevel sub 10
      prop EnergyRepresentation.energyLevel add 25
      // üîé we are losing 25 of the hundred, so note that in the global
      prop global.energyReleasedAsHeat add 25

      featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Secondary_consumers.png'
    ]]
    prop EnergyRepresentation.energyType setTo 'secondaryConsumer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Secondary_consumers.png'
  ]]

  ifProp EnergyRepresentation.energyType equal 'secondaryToSecondary' [[
    ifProp character6.energyLevel greaterThan 25 [[
      prop EnergyRepresentation.energyType setTo 'secondaryConsumer'

      // ‚úèÔ∏è LETS CHANGE THIS: alter how much energy the character6 gives to a animal
      // ‚úèÔ∏è it was too fast, so i am removing less then I am moving, but let's imagine they are on different scales
      prop character6.energyLevel sub 10
      prop EnergyRepresentation.energyLevel add 25
      // üîé we are losing 25 of the hundred, so note that in the global
      prop global.energyReleasedAsHeat add 25

      featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Secondary_consumers.png'
    ]]
    prop EnergyRepresentation.energyType setTo 'secondaryConsumer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Secondary_consumers.png'
  ]]

  // when leaving (after arriving with relevent energy type) make sure to leave with character6 energy type
  ifProp EnergyRepresentation.energyType equal 'none' [[
    prop EnergyRepresentation.energyType setTo 'secondaryConsumer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Secondary_consumers.png'
  ]]
]]

// üîé WHAT DOES THIS DO? Updating character7 energy

when EnergyRepresentation centerFirstTouches character7 [[

  ifProp EnergyRepresentation.energyType equal 'none' [[
    prop EnergyRepresentation.energyType setTo 'secondaryConsumer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Secondary_consumers.png'
    featCall EnergyRepresentation.IU logString 'Energy transfer from none to secondaryConsumer'
  ]]

  // üîé when touch character7, and energy type is from primaryConsumer and energy isn't 0, get energy, change meter color to orange, change type to primaryToSecondary
  ifProp EnergyRepresentation.energyType equal 'primaryConsumer' [[
    ifProp character7.energyLevel greaterThan 2 [[
      prop EnergyRepresentation.energyType setTo 'primaryToSecondary'

      // ‚úèÔ∏è LETS CHANGE THIS: alter how much energy the character gets from the primaryConsumer, and what it does to the energy character
      prop EnergyRepresentation.energyLevel setTo 0
      prop character7.energyLevel add 10
      // üîé we are losing 50 of the hundred, so note that in the global
      prop global.energyReleasedAsHeat add 15

      featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_energy_transfer.png'
      featProp character7.Costume.glow setTo 1
    ]]
  ]]

  // üîé when touch character7, and energy type is from secondaryConsumer and energy isn't 0, get energy, change meter color to orange, change type to secondaryToSecondary
  ifProp EnergyRepresentation.energyType equal 'secondaryConsumer' [[
    ifProp character7.energyLevel greaterThan 2 [[
      prop EnergyRepresentation.energyType setTo 'secondaryToSecondary'

      // ‚úèÔ∏è LETS CHANGE THIS: alter how much energy the character gets from the secondaryConsumer, and what it does to the energy character
      prop EnergyRepresentation.energyLevel setTo 0
      prop character7.energyLevel add 10
      // üîé we are losing 50 of the hundred, so note that in the global
      prop global.energyReleasedAsHeat add 15

      featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_energy_transfer.png'
      featProp character7.Costume.glow setTo 1
    ]]
  ]]

]]

when EnergyRepresentation centerLastTouches character7 [[

  // üîé if you have no secondaryConsumer energy type, take some energy from the character7 to the energy
  ifProp EnergyRepresentation.energyType equal 'primaryToSecondary' [[
    ifProp character7.energyLevel greaterThan 25 [[
      prop EnergyRepresentation.energyType setTo 'secondaryConsumer'

      // ‚úèÔ∏è LETS CHANGE THIS: alter how much energy the character7 gives to a animal
      // ‚úèÔ∏è it was too fast, so i am removing less then I am moving, but let's imagine they are on different scales
      prop character7.energyLevel sub 10
      prop EnergyRepresentation.energyLevel add 25
      // üîé we are losing 25 of the hundred, so note that in the global
      prop global.energyReleasedAsHeat add 25

      featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Secondary_consumers.png'
    ]]
    prop EnergyRepresentation.energyType setTo 'secondaryConsumer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Secondary_consumers.png'
  ]]

  ifProp EnergyRepresentation.energyType equal 'secondaryToSecondary' [[
    ifProp character7.energyLevel greaterThan 25 [[
      prop EnergyRepresentation.energyType setTo 'secondaryConsumer'

      // ‚úèÔ∏è LETS CHANGE THIS: alter how much energy the character7 gives to a animal
      // ‚úèÔ∏è it was too fast, so i am removing less then I am moving, but let's imagine they are on different scales
      prop character7.energyLevel sub 10
      prop EnergyRepresentation.energyLevel add 25
      // üîé we are losing 25 of the hundred, so note that in the global
      prop global.energyReleasedAsHeat add 25

      featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Secondary_consumers.png'
    ]]
    prop EnergyRepresentation.energyType setTo 'secondaryConsumer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Secondary_consumers.png'
  ]]

  // when leaving (after arriving with relevent energy type) make sure to leave with character7 energy type
  ifProp EnergyRepresentation.energyType equal 'none' [[
    prop EnergyRepresentation.energyType setTo 'secondaryConsumer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Secondary_consumers.png'
  ]]
]]

// üîé WHAT DOES THIS DO? Updating character8 energy

when EnergyRepresentation centerFirstTouches character8 [[

  ifProp EnergyRepresentation.energyType equal 'none' [[
    prop EnergyRepresentation.energyType setTo 'tertieryConsumer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Tertiary_consumers.png'
    featCall EnergyRepresentation.IU logString 'Energy transfer from none to tertieryConsumer'
  ]]

  // üîé when touch character8, and energy type is from secondaryConsumer and energy isn't 0, get energy, change meter color to orange, change type to secondaryToTertiery
  ifProp EnergyRepresentation.energyType equal 'secondaryConsumer' [[
    ifProp character8.energyLevel greaterThan 2 [[
      prop EnergyRepresentation.energyType setTo 'secondaryToTertiery'

      // ‚úèÔ∏è LETS CHANGE THIS: alter how much energy the character gets from the secondaryConsumer, and what it does to the energy character
      prop EnergyRepresentation.energyLevel setTo 0
      prop character8.energyLevel add 10
      // üîé we are losing 50 of the hundred, so note that in the global
      prop global.energyReleasedAsHeat add 15

      featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_energy_transfer.png'
      featProp character8.Costume.glow setTo 1
    ]]
  ]]

]]

when EnergyRepresentation centerLastTouches character8 [[

  // üîé if you have no tertieryConsumer energy type, take some energy from the character8 to the energy
  ifProp EnergyRepresentation.energyType equal 'secondaryToTertiery' [[
    ifProp character8.energyLevel greaterThan 25 [[
      prop EnergyRepresentation.energyType setTo 'tertieryConsumer'

      // ‚úèÔ∏è LETS CHANGE THIS: alter how much energy the character8 gives to a animal
      // ‚úèÔ∏è it was too fast, so i am removing less then I am moving, but let's imagine they are on different scales
      prop character8.energyLevel sub 10
      prop EnergyRepresentation.energyLevel add 25
      // üîé we are losing 25 of the hundred, so note that in the global
      prop global.energyReleasedAsHeat add 25

      featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Tertiary_consumers.png'
    ]]
    prop EnergyRepresentation.energyType setTo 'tertieryConsumer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Tertiary_consumers.png'
  ]]

  // when leaving (after arriving with relevent energy type) make sure to leave with character8 energy type
  ifProp EnergyRepresentation.energyType equal 'none' [[
    prop EnergyRepresentation.energyType setTo 'tertieryConsumer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Tertiary_consumers.png'
  ]]

]]

// üîé WHAT DOES THIS DO? Updating character9 energy

when EnergyRepresentation centerFirstTouches character9 [[

  ifProp EnergyRepresentation.energyType equal 'none' [[
    prop EnergyRepresentation.energyType setTo 'decomposer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Decomposer.png'
    featCall EnergyRepresentation.IU logString 'Energy transfer from none to decomposer'
  ]]

  // üîé when touch character9, and energy type is from secondaryConsumer and energy isn't 0, get energy, change meter color to orange, change type to secondaryToDecomposer
  ifProp EnergyRepresentation.energyType equal 'secondaryConsumer' [[
    ifProp character9.energyLevel greaterThan 2 [[
      prop EnergyRepresentation.energyType setTo 'secondaryToDecomposer'

      // ‚úèÔ∏è LETS CHANGE THIS: alter how much energy the character gets from the primaryConsumer, and what it does to the energy character
      prop EnergyRepresentation.energyLevel setTo 0
      prop character9.energyLevel add 10
      // üîé we are losing 50 of the hundred, so note that in the global
      prop global.energyReleasedAsHeat add 15

      featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_energy_transfer.png'
      featProp character9.Costume.glow setTo 1
    ]]
  ]]

  // üîé when touch character9, and energy type is from tertieryConsumer and energy isn't 0, get energy, change meter color to orange, change type to tertieryToDcomposer
  ifProp EnergyRepresentation.energyType equal 'tertieryConsumer' [[
    ifProp character9.energyLevel greaterThan 2 [[
      prop EnergyRepresentation.energyType setTo 'tertieryToDcomposer'

      // ‚úèÔ∏è LETS CHANGE THIS: alter how much energy the character gets from the tertieryConsumer, and what it does to the energy character
      prop EnergyRepresentation.energyLevel setTo 0
      prop character9.energyLevel add 10
      // üîé we are losing 50 of the hundred, so note that in the global
      prop global.energyReleasedAsHeat add 15

      featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_energy_transfer.png'
      featProp character9.Costume.glow setTo 1
    ]]
  ]]
  ifProp EnergyRepresentation.nutrientsType equal 'none' [[
    prop EnergyRepresentation.nutrientsType setTo 'decomposer'
    featCall EnergyRepresentation.IU logString 'Nutrients transfer from none to decomposer'
  ]]
]]

when EnergyRepresentation centerLastTouches character9 [[

  // üîé if you have no decomposer energy type, take some energy from the character9 to the energy
  ifProp EnergyRepresentation.energyType equal 'secondaryToDecomposer' [[
    ifProp character9.energyLevel greaterThan 25 [[
      prop EnergyRepresentation.energyType setTo 'decomposer'

      // ‚úèÔ∏è LETS CHANGE THIS: alter how much energy the character9 gives to a animal
      // ‚úèÔ∏è it was too fast, so i am removing less then I am moving, but let's imagine they are on different scales
      prop character9.energyLevel sub 10
      prop EnergyRepresentation.energyLevel add 25
      // üîé we are losing 25 of the hundred, so note that in the global
      prop global.energyReleasedAsHeat add 25

      featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Decomposer.png'
    ]]
    prop EnergyRepresentation.energyType setTo 'decomposer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Decomposer.png'
  ]]

  ifProp EnergyRepresentation.energyType equal 'tertieryToDcomposer' [[
    ifProp character9.energyLevel greaterThan 25 [[
      prop EnergyRepresentation.energyType setTo 'decomposer'

      // ‚úèÔ∏è LETS CHANGE THIS: alter how much energy the character9 gives to a animal
      // ‚úèÔ∏è it was too fast, so i am removing less then I am moving, but let's imagine they are on different scales
      prop character9.energyLevel sub 10
      prop EnergyRepresentation.energyLevel add 25
      // üîé we are losing 25 of the hundred, so note that in the global
      prop global.energyReleasedAsHeat add 25

      featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Decomposer.png'
    ]]
    prop EnergyRepresentation.energyType setTo 'decomposer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Decomposer.png'
  ]]

  // when leaving (after arriving with relevent energy type) make sure to leave with character9 energy type
  ifProp EnergyRepresentation.energyType equal 'none' [[
    prop EnergyRepresentation.energyType setTo 'decomposer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'MFW_Decomposer.png'
  ]]
  
  // ‚úèÔ∏è LETS CHANGE THIS: alter how much energy the character gives to another character
  // ‚úèÔ∏è it was too fast, so i am removing less then I am moving, but let's imagine they are on different scales
  prop character9.nutrientsLevel sub 10
  prop EnergyRepresentation.nutrientsLevel add 25

]]
`
    }
  ],
  "instances": [
    {
      "id": "0",
      "label": "Sun",
      "bpid": "Sun",
      "initScript": `prop x setTo -199.1
prop y setTo -381.73`
    },
    {
      "id": "5",
      "label": "Timer",
      "bpid": "Timer",
      "initScript": `prop x setTo 354.35
prop y setTo -394.62`
    },
    {
      "id": "6",
      "label": "Sky6",
      "bpid": "Sky",
      "initScript": `prop x setTo 2.36
prop y setTo -22.06`
    },
    {
      "id": "7",
      "label": "Lost Energy Graph",
      "bpid": "GraphLostEnergy",
      "initScript": `prop x setTo 505.35
prop y setTo 317.49`
    },
    {
      "id": "8",
      "label": "character18",
      "bpid": "character1",
      "initScript": `prop x setTo 221.65
prop y setTo 238.59`
    },
    {
      "id": "9",
      "label": "character29",
      "bpid": "character2",
      "initScript": `prop x setTo -265.39
prop y setTo 251.91`
    },
    {
      "id": "10",
      "label": "character310",
      "bpid": "character3",
      "initScript": `prop x setTo 229.89
prop y setTo -203.56`
    },
    {
      "id": "11",
      "label": "character411",
      "bpid": "character4",
      "initScript": `prop x setTo -215.44
prop y setTo -134.7`
    },
    {
      "id": "12",
      "label": "character512",
      "bpid": "character5",
      "initScript": `prop x setTo 229.60
prop y setTo -3.99`
    },
    {
      "id": "13",
      "label": "character613",
      "bpid": "character6",
      "initScript": `prop x setTo -36.83
prop y setTo -25.93`
    },
    {
      "id": "14",
      "label": "character714",
      "bpid": "character7",
      "initScript": `prop x setTo -47.26
prop y setTo 197.44`
    },
    {
      "id": "15",
      "label": "character815",
      "bpid": "character8",
      "initScript": `prop x setTo 46.51
prop y setTo -264.95`
    },
    {
      "id": "16",
      "label": "character916",
      "bpid": "character9",
      "initScript": `prop x setTo -274.16
prop y setTo 33.83`
    }
  ]
}