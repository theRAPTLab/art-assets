{
  "id": "BeeVR",
  "label": "BeeVR (Food Justice)",
  "metadata": {
    "top": -500,
    "right": 500,
    "bottom": 500,
    "left": -500,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 102,
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [
    {
      "initScript": `\n       
      // TODO: All new artowk, of course 
      // TODO: fix reset on time 
      
       prop global.roundType setTo 'init'

        // de-activate bees so they do not do things
        featCall global.Population charactersForEach ScoutBee [[
          prop ScoutBee.isInert setTo true
        ]]

        // rest of the setup is in global onEvent Start 
      `,
      "endScript": `
        featCall global.Population charactersForEach FieldChoiceButton [[
          prop FieldChoiceButton.visible setTo false
          
        ]]

        // stop the current graph from updating 
        featCall global.Population charactersForEach PollinationGraph [[
          featProp PollinationGraph.Graphing.graphFrequency setTo 0
        ]]

        ifProp global.fieldType equal 'garden' [[
          featCall global.Population tellCharacterByName Background [[
            featProp Background.Costume.costumeName setTo 'FJ_background_garden.png'
          ]]

          featCall global.IU logString 'Garden model chosen'
          featCall global.Graphing showMessage  'You have chosen the garden! Click start to try it out.'
        
        ]]
        ifProp global.fieldType equal 'parking lot' [[
          featCall global.Population tellCharacterByName Background [[
            featProp Background.Costume.costumeName setTo 'FJ_background_parking_lot.png'
          ]]

          featCall global.IU logString 'Parking lot model chosen'
          featCall global.Graphing showMessage  'You have chosen the parking lot! Click start to try it out.'
        
          // show the pollution
          featCall global.Population tellCharacterByName Pollution [[
            prop Pollution.visible setTo true
            prop Pollution.isInert setTo false
          ]]
        ]]

        featCall global.IU forceNext

      `
    },
    {
      "time": 100,
      "initScript": `

        featCall global.IU logString 'Running new model'

        // TODO: Move this to a feature (Timer?)
        prop global.roundType setTo 'run'

        // Move prior pollination graphs down a bit, and delete if there are too many
        featCall global.Population charactersForEach PollinationGraph [[

          prop PollinationGraph.row add 1
          ifProp PollinationGraph.row equal 4 [[
            // remove the graph since we are out of space
            featCall PollinationGraph.Population removeCharacter
          ]]
          // if we didnt remove it, shift this down a bit 
          ifProp PollinationGraph.row lessThan 4 [[
            prop PollinationGraph.y add 170
          ]]
        ]]

        // create a new pollination graph in the top row / position 
        featCall global.Population createCharacter PollinationGraph [[
          prop PollinationGraph.x setTo 425
          prop PollinationGraph.y setTo -35
          propPush global.fieldType
          propPop PollinationGraph.fieldType
          
          propPush PollinationGraph.fieldType
          propPop global.tempString
          prop global.tempString add ' rnd '
          // TODO: make this better 
          exprPush {{ global.getProp('tempString').value + global.getProp('roundNum').value }}
          propPop global.tempString
          propPush global.tempString
          featPropPop PollinationGraph.Graphing.text
        ]]

        // activate bees so they do things
        featCall global.Population charactersForEach ScoutBee [[
          prop ScoutBee.isInert setTo false
          prop ScoutBee.alpha setTo 1
          // TODO: Move to a centralized initialize function for easier startup
          prop ScoutBee.energyLevel setTo 100
          prop ScoutBee.nectarCount setTo 0
        ]]

        // Based on the field type (garden or parking lot) do some setup below ... 
        ifProp global.fieldType equal 'garden' [[
          // setup the correct background image 
          featCall global.Population tellCharacterByName Background [[
            featProp character.Costume.costumeName setTo 'FJ_background_garden.png'
          ]]

          // place a bunch of flowers for the garden in groups as if we planted them
          featCall global.Population createCharacter Flower [[
                prop Flower.flowerType setTo 'Zucchini'
                prop Flower.pollenColor setTo 'yellow'
                featProp Flower.Costume.costumeName setTo 'FJ_zucchini.png'
                prop Flower.x setTo -255
                prop Flower.y setTo -370
                featProp Flower.Graphing.text setTo 'Zucchini 1'
          ]]

          featCall global.Population createCharacter Flower [[
                prop Flower.flowerType setTo 'Zucchini'
                prop Flower.pollenColor setTo 'yellow'
                featProp Flower.Costume.costumeName setTo 'FJ_zucchini.png'
                prop Flower.x setTo -112
                prop Flower.y setTo -370
                featProp Flower.Graphing.text setTo 'Zucchini 2'

          ]]

          featCall global.Population createCharacter Flower [[
                prop Flower.flowerType setTo 'Strawberry'
                prop Flower.pollenColor setTo 'red'
                featProp Flower.Costume.costumeName setTo 'FJ_strawberry.png'
                prop Flower.x setTo -148
                prop Flower.y setTo -134
                featProp Flower.Graphing.text setTo 'Strawberry 1'

          ]]

          featCall global.Population createCharacter Flower [[
                prop Flower.flowerType setTo 'Strawberry'
                prop Flower.pollenColor setTo 'red'
                featProp Flower.Costume.costumeName setTo 'FJ_strawberry.png'
                prop Flower.x setTo 15
                prop Flower.y setTo -134
                featProp Flower.Graphing.text setTo 'Strawberry 2'

          ]]

          featCall global.Population createCharacter Flower [[
                prop Flower.flowerType setTo 'Zucchini'
                prop Flower.pollenColor setTo 'yellow'
                featProp Flower.Costume.costumeName setTo 'FJ_zucchini.png'
                prop Flower.x setTo 102
                prop Flower.y setTo -370
                featProp Flower.Graphing.text setTo 'Zucchini 3'

          ]]

          featCall global.Population createCharacter Flower [[
                prop Flower.flowerType setTo 'Zucchini'
                prop Flower.pollenColor setTo 'yellow'
                featProp Flower.Costume.costumeName setTo 'FJ_zucchini.png'
                prop Flower.x setTo 245
                prop Flower.y setTo -370
                featProp Flower.Graphing.text setTo 'Zucchini 4'

          ]]

          featCall global.Population createCharacter Flower [[
                prop Flower.flowerType setTo 'Strawberry'
                prop Flower.pollenColor setTo 'red'
                featProp Flower.Costume.costumeName setTo 'FJ_strawberry.png'
                prop Flower.x setTo -148
                prop Flower.y setTo 10
                featProp Flower.Graphing.text setTo 'Strawberry 3'

          ]]

          featCall global.Population createCharacter Flower [[
                prop Flower.flowerType setTo 'Strawberry'
                prop Flower.pollenColor setTo 'red'
                featProp Flower.Costume.costumeName setTo 'FJ_strawberry.png'
                prop Flower.x setTo 15
                prop Flower.y setTo 10
                featProp Flower.Graphing.text setTo 'Strawberry 4'

          ]]

          featCall global.Population createCharacter Flower [[
                prop Flower.flowerType setTo 'Zucchini'
                prop Flower.pollenColor setTo 'yellow'
                featProp Flower.Costume.costumeName setTo 'FJ_zucchini.png'
                prop Flower.x setTo 265
                prop Flower.y setTo -150
                featProp Flower.Graphing.text setTo 'Zucchini 5'

          ]]

          featCall global.Population createCharacter Flower [[
                prop Flower.flowerType setTo 'Zucchini'
                prop Flower.pollenColor setTo 'yellow'
                featProp Flower.Costume.costumeName setTo 'FJ_zucchini.png'
                prop Flower.x setTo 265
                prop Flower.y setTo -10
                featProp Flower.Graphing.text setTo 'Zucchini 6'

          ]]

          featCall global.Population createCharacter Flower [[
                prop Flower.flowerType setTo 'Strawberry'
                prop Flower.pollenColor setTo 'red'
                featProp Flower.Costume.costumeName setTo 'FJ_strawberry.png'
                prop Flower.x setTo 258
                prop Flower.y setTo 160
                featProp Flower.Graphing.text setTo 'Strawberry 5'

          ]]

          featCall global.Population createCharacter Flower [[
                prop Flower.flowerType setTo 'Strawberry'
                prop Flower.pollenColor setTo 'red'
                featProp Flower.Costume.costumeName setTo 'FJ_strawberry.png'
                prop Flower.x setTo 258
                prop Flower.y setTo 300
                featProp Flower.Graphing.text setTo 'Strawberry 6'

          ]]

          // place the hive and init 
          featCall global.Population charactersForEach Hive [[
            prop Hive.x setTo -421.00
            prop Hive.y setTo 360
            prop Hive.nectarCount setTo 10
            prop Hive.visible setTo true
          ]]
        ]]


        ifProp global.fieldType equal 'parking lot' [[
          // setup the correct background image 
          featCall global.Population tellCharacterByName Background [[
            featProp character.Costume.costumeName setTo 'FJ_background_parking_lot.png'
          ]]

          // place parking lot flowers
          featCall global.Population createCharacter Flower [[
                prop Flower.flowerType setTo 'Zucchini'
                prop Flower.pollenColor setTo 'yellow'
                featProp Flower.Costume.costumeName setTo 'FJ_zucchini.png'
                prop Flower.x setTo -327
                prop Flower.y setTo -470
                featProp Flower.Graphing.text setTo 'Zucchini 1'

          ]]

          featCall global.Population createCharacter Flower [[
                prop Flower.flowerType setTo 'Zucchini'
                prop Flower.pollenColor setTo 'yellow'
                featProp Flower.Costume.costumeName setTo 'FJ_zucchini.png'
                prop Flower.x setTo 240
                prop Flower.y setTo -470
                featProp Flower.Graphing.text setTo 'Zucchini 2'

          ]]

          featCall global.Population createCharacter Flower [[
                prop Flower.flowerType setTo 'Strawberry'
                prop Flower.pollenColor setTo 'red'
                featProp Flower.Costume.costumeName setTo 'FJ_strawberry.png'
                prop Flower.x setTo -69
                prop Flower.y setTo -470
                featProp Flower.Graphing.text setTo 'Strawberry 1'
 
          ]]

          // place the hive and init bottom left
          featCall global.Population charactersForEach Hive [[
            prop Hive.x setTo -421.00
            prop Hive.y setTo 360
            prop Hive.nectarCount setTo 10
            prop Hive.visible setTo true
          ]]

        ]]

        prop global.roundNum add 1
      `,
      "endScript": `

        // Update art on flowers to show they were pollinated
        featCall global.Population charactersForEach Flower [[

          ifProp Flower.pollinationCount lessThan 3 [[
            ifProp Flower.pollenColor equal 'red' [[
              featProp Flower.Costume.costumeName setTo 'FJ_strawberry_unhealthy.png'
            ]]
            ifProp Flower.pollenColor equal 'yellow' [[
              featProp Flower.Costume.costumeName setTo 'FJ_zucchini_unhealthy.png'
            ]]
          ]]

          ifProp Flower.pollinationCount greaterThanOrEqual 3 [[
            ifProp Flower.pollenColor equal 'red' [[
              featProp Flower.Costume.costumeName setTo 'FJ_strawberry_healthy.png'
            ]]
            ifProp Flower.pollenColor equal 'yellow' [[
              featProp Flower.Costume.costumeName setTo 'FJ_zucchini_healthy.png'
            ]]
          ]]
        ]]

        featCall global.Population charactersForEach FinishMessage [[
          prop FinishMessage.visible setTo true
        ]]

        featCall global.IU forceNext
        featCall global.IU toggleECA

      `
    }
  ],
  "ecaTypes": [
    {
      "label": "Wes (Gardener)",
      "name": "GEMSTEP_Observing",
      "initialMessage": "Hi! What did you notice in running this model?"
    },
    {
      "label": "Nadia (Bees)",
      "name": "Knowledge_Pollination"
    }
  ],
  "blueprints": [
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

# PROGRAM INIT

// TODO update default templates for characters and models

addFeature IU
addFeature Population
addFeature Graphing

// NOTE: using population in the round code

prop global.visible setTo false

// so we know how many rounds we have run through
// TODO: make sure this is incrementing
addProp roundNum number 0

// init and run
addProp roundType string 'init'

// Is this a garden or a parking lot?
addProp fieldType string 'garden'

// for tracking sums to display
addProp zucchiniPollinationSum number 0
addProp strawberryPollinationSum number 0

addProp tempString string ''

// popup messages
addProp xForPopup number 0
addProp yForPopup number 0
addProp textForPopup string ''
featCall global.IU setupFunction 'popupMessage' [[

  featCall global.Population createCharacter PopupEffect [[
    propPush global.textForPopup
    propPop PopupEffect.textToUse
    prop PopupEffect.costumeToUse setTo ''

    propPush global.xForPopup
    propPop PopupEffect.x
    propPush global.yForPopup
    propPop PopupEffect.y
  ]]
]]

# PROGRAM UPDATE
onEvent Start [[

  // hide the finish message if it is still there.
  featCall global.Population charactersForEach FinishMessage [[
    prop FinishMessage.visible setTo false
  ]]

  // make the field type choice buttons visible and hide the pollution
  ifProp global.roundType equal 'init' [[

    // remove flowers from prior run now rather than at the end of the run so the kids can
    // discuss what they looked like in discussing the run
    featCall global.Population charactersForEach Flower [[
      featCall Flower.Population removeCharacter
    ]]

    featCall global.Population tellCharacterByName Pollution [[
      prop Pollution.visible setTo false
      prop Pollution.isInert setTo true
    ]]

    featCall global.Population tellCharacterByName Background [[
      featProp Background.Costume.costumeName setTo 'FJ_background_choose.png'
    ]]

    // hide hive
    featCall global.Population charactersForEach Hive [[
      prop Hive.visible setTo false
    ]]



    featCall global.Population charactersForEach FieldChoiceButton [[
      prop FieldChoiceButton.visible setTo true
    ]]
  ]]
]]`
    },
    {
      "name": "ScoutBee",
      "scriptText": `# BLUEPRINT ScoutBee
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT

addFeature Costume
addFeature Physics
addFeature Touches
addFeature Graphing
addFeature IU
addFeature Population
addFeature Movement

featProp ScoutBee.Costume.costumeName setTo 'FJ_bee_empty.png'
featProp ScoutBee.Costume.scale setTo 0.3
prop ScoutBee.zIndex setTo 500

// what flower pollen are we carrying, -1 is none
addProp flowerId string 'not set'

// what color is the pollen - use 0 for empty
addProp pollenColor string 'empty'

// how much nectar are we carrying
addProp nectarCount number 0

// how much energy do we have
addProp energyLevel number 100
prop ScoutBee.energyLevel setMin 0
prop ScoutBee.energyLevel setMax 100

// monitor flower Touches
featCall ScoutBee.Touches monitor 'Flower' c2b
featCall ScoutBee.Touches monitor 'Hive' c2b
featCall ScoutBee.Touches monitor 'Pollution' c2b

featProp ScoutBee.Graphing.meterProp setTo 'energyLevel'
featProp ScoutBee.Graphing.meterColor setTo 11416319

featProp ScoutBee.Costume.glowColor setToColor 16105472

# PROGRAM UPDATE


// Flip the artwork to point left or right depending on the direction the character is moving
ifFeatProp ScoutBee.Movement.compassDirection equal 'E' [[
  featProp ScoutBee.Costume.flipX setTo false
]]
ifFeatProp ScoutBee.Movement.compassDirection equal 'W' [[
  featProp ScoutBee.Costume.flipX setTo true
]]

// use a little energy and maybe update the meter
every 1 runAtStart [[

  ifProp ScoutBee.isInert equal false [[

    prop ScoutBee.energyLevel sub 5

    ifProp ScoutBee.energyLevel equal 0 [[
      featCall ScoutBee.IU logString 'A bee died from running out of energy'
      prop ScoutBee.alpha setTo 0.5
      prop ScoutBee.isInert setTo true

      prop global.textForPopup setTo 'Whoops, ran out of energy!'
      propPush ScoutBee.x
      propPop global.xForPopup
      propPush ScoutBee.y
      propPop global.yForPopup
      featCall global.IU callFunction 'popupMessage'

    ]]
  ]]

]]

// when first touch a flower
when ScoutBee centerfirsttouches Flower [[

  featCall ScoutBee.IU logString 'Bee visiting a new flower'

  featProp ScoutBee.Costume.glow setTo 2

  // drop off pollen if appropriate (e.g., different id)
  ifExpr {{ ScoutBee.getProp('flowerId').value != Flower.getProp('flowerId').value }} [[
    // if we are carrying pollen
    ifExpr {{ ScoutBee.getProp('pollenColor').value == Flower.getProp('pollenColor').value }} [[
      // the flower has been pollinated because it is the same species
      prop Flower.pollinationCount add 1
      featCall ScoutBee.IU logString 'Bee pollinated a flower'
      // could do this dynamically but this was faster ... 
      ifProp Flower.flowerType equal 'Strawberry' [[
        featCall Flower.IU logString 'Strawberry plant was pollinated'
      ]]
      ifProp Flower.flowerType equal 'Zucchini' [[
        featCall Flower.IU logString 'Zucchini plant was pollinated'
      ]]
    ]]

    // either way the bee picks up the pollen type
    propPush Flower.flowerId
    propPop ScoutBee.flowerId

    propPush Flower.pollenColor
    propPop ScoutBee.pollenColor

    // indicate the pollen color being carried
    ifProp ScoutBee.pollenColor equal 'red' [[
      featProp ScoutBee.Costume.costumeName setTo 'FJ_bee_strawberry.png'
    ]]

    ifProp ScoutBee.pollenColor equal 'yellow' [[
      featProp ScoutBee.Costume.costumeName setTo 'FJ_bee_zucchini.png'
    ]]

  ]]
]]

when ScoutBee centertouches Flower [[
  // take some nectar from the flower every second
  every 1 [[
    featProp ScoutBee.Costume.glow setTo 2

    ifProp Flower.nectarCount greaterThan 0 [[
      prop ScoutBee.nectarCount add 1
      prop Flower.nectarCount sub 1
    ]]
  ]]
]]

when ScoutBee centerfirsttouches Pollution [[
    featProp ScoutBee.Costume.glowColor setToColor 12396584
    featProp ScoutBee.Costume.glow setTo 2

    prop global.textForPopup setTo 'Cough cough!'
    propPush ScoutBee.x
    propPop global.xForPopup
    propPush ScoutBee.y
    propPop global.yForPopup
    featCall global.IU callFunction 'popupMessage'
]]

when ScoutBee centertouches Pollution [[
  every 1 runAtStart [[
    featProp ScoutBee.Costume.glow setTo 2

    prop ScoutBee.energyLevel sub 2
    featCall ScoutBee.IU logString 'Losing energy from pollution'
  ]]
]]

when ScoutBee centerlasttouches Pollution [[
  featProp ScoutBee.Costume.glow setTo 0
  featProp ScoutBee.Costume.glowColor setToColor 16105472
]]

when ScoutBee centerlasttouches Flower [[
  featProp ScoutBee.Costume.glow setTo 0
]]

when ScoutBee centerfirsttouches Hive [[
  featProp ScoutBee.Costume.glow setTo 2

  featCall ScoutBee.IU logString 'Bee dropping off nectar and resting at the hive'

  // reset energy
  prop ScoutBee.energyLevel setTo 100

  // transfer nectar to hive
  propPush ScoutBee.nectarCount
  propPush Hive.nectarCount
  stackAdd
  propPop Hive.nectarCount
  prop ScoutBee.nectarCount setTo 0

  // reset pollen
  prop ScoutBee.flowerId setTo 'not set'
  prop ScoutBee.pollenColor setTo 'empty'
  featProp ScoutBee.Costume.costumeName setTo 'FJ_bee_empty.png'

]]

when ScoutBee centertouches Hive [[
  every 1 [[
    featProp ScoutBee.Costume.glowColor setToColor 16105472
    featProp ScoutBee.Costume.glow setTo 2
  ]]
]]

when ScoutBee centerlasttouches Hive [[
  featProp ScoutBee.Costume.glow setTo 0
]]`
    },
    {
      "name": "Flower",
      "scriptText": `# BLUEPRINT Flower
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT

addFeature Costume
addFeature Physics
addFeature Graphing
addFeature Population
addFeature IU

// setup the costume
featProp Flower.Costume.costumeName setTo 'FJ_zucchini.png'
featProp Flower.Costume.scale setTo 0.3

// TODO update this to be sequential on creation
// unique flower ID to avoid self-pollination
addProp flowerId string 'not set'
// what flower type is this?
addProp flowerType string ''
// what color is the flower / pollen for tracking on the bee
// NOTE: zucchini is yellow, strawberry red, though we could change that
addProp pollenColor string 'empty'

// in case we want this to go down later, track nectar and pollen amount
addProp nectarCount number 100
addProp pollenCount number 20

// how many times has this flower been pollinated?
addProp pollinationCount number 0
prop Flower.pollinationCount setMin 0
prop Flower.pollinationCount setMax 10

featProp Flower.Graphing.meterProp setTo 'pollinationCount'
featProp Flower.Graphing.meterColor setToColor 484359

propPush Flower.trackerId
propPop Flower.flowerId

# PROGRAM UPDATE`
    },
    {
      "name": "Hive",
      "scriptText": `# BLUEPRINT Hive
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Graphing

featProp Hive.Costume.costumeName setTo 'FJ_HiveCommercial.png'
featProp Hive.Costume.scale setTo 0.15

addProp nectarCount number 10
prop Hive.nectarCount setMin 0
prop Hive.nectarCount setMax 40

featProp Hive.Graphing.meterProp setTo 'nectarCount'

// start hidden and each map makes it visible
prop Hive.visible setTo false

# PROGRAM UPDATE

every 1 runAtStart [[
  ifProp Hive.nectarCount equal 11 [[
    prop global.textForPopup setTo 'Hive is full, so the honey was collected!'
    propPush Hive.x
    propPop global.xForPopup
    propPush Hive.y
    propPop global.yForPopup

    featCall global.IU callFunction 'popupMessage'

    prop Hive.nectarCount setTo 0
  ]]
]]`
    },
    {
      "name": "Background",
      "scriptText": `# BLUEPRINT Background
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume

featProp Background.Costume.costumeName setTo 'FJ_background_choose.png'
prop Background.zIndex setTo -500

# PROGRAM UPDATE
`
    },
    {
      "name": "FieldChoiceButton",
      "scriptText": `# BLUEPRINT FieldChoiceButton
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature IU
addFeature Graphing
addFeature Timer

//featProp FieldChoiceButton.Costume.costumeName setTo 'GEN_square.json'
//featProp FieldChoiceButton.Costume.scale setTo 0.5

addProp fieldType string 'garden'


# PROGRAM UPDATE

featCall FieldChoiceButton.IU handleClick [[
  featCall FieldChoiceButton.Timer stopRound
  propPush FieldChoiceButton.fieldType
  propPop global.fieldType
]]
`
    },
    {
      "name": "PopupEffect",
      "scriptText": `# BLUEPRINT PopupEffect
      # TAG isPozyxControllable false
      # TAG isCharControllable false
      # TAG isPTrackControllable false

      # PROGRAM INIT

      // TODO: move this all to a feature 
      addFeature Costume
      addFeature Physics
      addFeature Graphing
      addFeature Population

      featProp PopupEffect.Costume.costumeName setTo 'GEN_onexone.json'
      prop PopupEffect.zIndex setTo 600

      featProp PopupEffect.Graphing.wordWrapWidth setTo 300
      featProp PopupEffect.Graphing.fontSize setTo 28
      featProp PopupEffect.Graphing.text setTo ''

      addProp costumeToUse string ''
      addProp textToUse string 'TEST'
      addProp countDown Number 2

      # PROGRAM UPDATE

      every 0.1 runAtStart [[
        ifProp PopupEffect.costumeToUse notEqual '' [[
          propPush PopupEffect.costumeToUse
          featPropPop PopupEffect.Costume.costumeName
          prop PopupEffect.costumeToUse setTo ''
        ]]

        ifProp PopupEffect.textToUse notEqual '' [[
          propPush PopupEffect.textToUse
          featPropPop PopupEffect.Graphing.text
          prop PopupEffect.textToUse setTo ''
        ]]
      ]]
      every 1 runAtStart [[

        prop PopupEffect.countDown sub 1
        ifExpr {{ PopupEffect.getProp('countDown').value == 0 }} [[
          featCall PopupEffect.Population removeCharacter
        ]]
      ]]
      `
    },
    {
      "name": "PollinationGraph",
      "scriptText": `# BLUEPRINT PollinationGraph
      # TAG isCharControllable false
      # TAG isPozyxControllable false
      # TAG isPTrackControllable false

      # PROGRAM INIT
      addFeature Costume
      addFeature Graphing
      addFeature Population

      addProp totalPollinationCount number 0

      featProp PollinationGraph.Costume.costumeName setTo 'GEN_onexone.json'
      featProp PollinationGraph.Graphing.isLargeGraphic setTo true
      featProp PollinationGraph.Graphing.graphProp setTo 'totalPollinationCount'
      featProp PollinationGraph.Graphing.graphMinY setTo 0
      featProp PollinationGraph.Graphing.graphMaxY setTo 10
      featProp PollinationGraph.Graphing.graphMinX setTo 0
      featProp PollinationGraph.Graphing.graphMaxX setTo 100
      featProp PollinationGraph.Graphing.text setTo 'pollination count'
      featProp PollinationGraph.Graphing.meterColor setTo 65280
      featProp PollinationGraph.Graphing.wordWrapWidth setTo 150


      // what row are we in on the screen (4 total, incremented at end of round)
      addProp row number 1

      addProp fieldType string ''

      # PROGRAM UPDATE
      every 1 runAtStart [[
        // only update if this is the main graph, otherwise leave it as a record
        ifProp PollinationGraph.row equal 1 [[
          featCall PollinationGraph.Population countCharacterProp 'Flower' 'pollinationCount'
          featPropPush PollinationGraph.Population.avg
          propPop PollinationGraph.totalPollinationCount
        ]]
      ]]

      `
    },
    {
      "name": "Key",
      "scriptText": `# BLUEPRINT Key
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp Key.Costume.costumeName setTo 'FJ_key.png'
featProp Key.Costume.scale setTo 1

# PROGRAM UPDATE`
    },
    {
      "name": "FinishMessage",
      "scriptText": `# BLUEPRINT FinishMessage
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp FinishMessage.Costume.costumeName setTo 'FJ_finish.png'
featProp FinishMessage.Costume.scale setTo 0.7
prop FinishMessage.visible setTo false
prop FinishMessage.zIndex setTo 490

# PROGRAM UPDATE`
    },
    {
      "name": "Pollution",
      "scriptText": `# BLUEPRINT Pollution
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics

featProp Pollution.Costume.costumeName setTo 'FJ_pollution.png'
featProp Pollution.Costume.scale setTo 0.5

// start hidden and inert
prop Pollution.visible setTo false
prop Pollution.isInert setTo true

# PROGRAM UPDATE`
    },
    {
      "name": "SummaryText",
      "scriptText": `# BLUEPRINT SummaryText
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Graphing

addProp tempText string ''

featProp SummaryText.Costume.costumeName setTo 'GEN_onexone.json'
featProp SummaryText.Graphing.text setTo ''
featProp SummaryText.Graphing.wordWrapWidth setTo 600
prop SummaryText.zIndex setTo 500

# PROGRAM UPDATE
every 1 runAfterStart [[

  // init amounts so that we can update them
  prop global.zucchiniPollinationSum setTo 0
  prop global.strawberryPollinationSum setTo 0

  // update amounts
  ifProp global.roundType equal 'run' [[

    featCall global.Population charactersForEach Flower [[

      ifProp Flower.flowerType equal 'Zucchini' [[
        propPush Flower.pollinationCount
        propPush global.zucchiniPollinationSum
        stackAdd
        propPop global.zucchiniPollinationSum
      ]]
      ifProp Flower.flowerType equal 'Strawberry' [[
        propPush Flower.pollinationCount
        propPush global.strawberryPollinationSum
        stackAdd
        propPop global.strawberryPollinationSum
      ]]

    ]]
  ]]

  // combine into text
  exprPush {{ 'Zucchini pollinated ' + global.getProp('zucchiniPollinationSum').value + ' times | ' + 'Strawberry pollinated ' + global.getProp('strawberryPollinationSum').value + ' times'}}
  propPop SummaryText.tempText

  // display the text
  propPush SummaryText.tempText
  featPropPop SummaryText.Graphing.text

]]

`
    }
  ],
  "instances": [
    {
      "id": "1",
      "label": "Hive",
      "bpid": "Hive",
      "initScript": `prop Hive.x setTo -421
prop Hive.y setTo 360`
    },
    {
      "id": "2",
      "label": "Background",
      "bpid": "Background",
      "initScript": `prop Background.x setTo 0
prop Background.y setTo 0`
    },
    {
      "id": "3",
      "label": "Garden",
      "bpid": "FieldChoiceButton",
      "initScript": `prop FieldChoiceButton.x setTo -238.61
prop FieldChoiceButton.y setTo 115
prop FieldChoiceButton.fieldType setTo 'garden'
featProp FieldChoiceButton.Costume.costumeName setTo 'FJ_choice_garden.png'
`
    },
    {
      "id": "4",
      "label": "Parking Lot",
      "bpid": "FieldChoiceButton",
      "initScript": `prop FieldChoiceButton.x setTo 26.50
prop FieldChoiceButton.y setTo 115
prop FieldChoiceButton.fieldType setTo 'parking lot'
featProp FieldChoiceButton.Costume.costumeName setTo 'FJ_choice_parking_lot.png'

`
    },
    {
      "id": "6",
      "label": "Key",
      "bpid": "Key",
      "initScript": `prop Key.x setTo 422.24
prop Key.y setTo -10.27`
    },
    {
      "id": "7",
      "label": "FinishMessage",
      "bpid": "FinishMessage",
      "initScript": `prop FinishMessage.x setTo 0
prop FinishMessage.y setTo 300`
    },
    {
      "id": "8",
      "label": "Pollution",
      "bpid": "Pollution",
      "initScript": `prop Pollution.x setTo -60
prop Pollution.y setTo -314`
    },
    {
      "id": "9",
      "label": "SummaryText",
      "bpid": "SummaryText",
      "initScript": `prop SummaryText.x setTo 15.96
prop SummaryText.y setTo 430.70`
    }
  ]
}