{
  "id": "carnivorousplants_foodweb_energy",
  "label": "Food Web",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 255255204,
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [],
  "blueprints": [
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT

// Explanation:
// This model involves learners repreesenting the energy flow in the system (need to add more here)

prop global.visible setTo false

addProp energyReleasedAsHeat number 0

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Explanation",
      "scriptText": `# BLUEPRINT Explanation
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

// ----------------------------------------------------------------------------------------------------------------
// This charaacter is meaant to explain the rest of the scripts, and is not meant to be added to the stage
// ---------------------------------------------------------------------------------------------------------------- 

// The goal of this model is to let students explore the energy in the foodweb system by being a 
// representaiton of that energy rather than a character. Therefore they will be the EenergyRepresentation
// character using either pozyx or charController 

// The system is intended to mirror the foodweb model in that energy is meant to go from the sun to (add description). 
// To help movivate the students, the algae and fish lose energy over time, so they will die if the users don't 
// hurry and give it to them

// The main chaaracter is therefore the EnergyRepresentation, which stuents can use to look around. As they touch
// an energy source, they will pick up / become that kind of energy
// So, a key thing to look at for is how the EnergyRepresentation character changes it's energyType as it moves around 

# PROGRAM INIT
addFeature Costume
featProp agent.Costume.costumeName setTo 'onexone.json' 0
featProp agent.Costume.scale setTo 1

# PROGRAM UPDATE
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]`
    },
    {
      "name": "Sun",
      "scriptText": `# BLUEPRINT Sun
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM INIT
// The sun is one of the characters that produces energy
// Since it is a perpetual source of energy and doesn't do anything but sit here, it is relatively
// simple, and just needs the variables for the EnergyRepresentation to read


addFeature Costume
featProp Sun.Costume.costumeName setTo 'circle.json'
// Instead of sun art, we are using a generic circle, so the next line tints it yellow
featCall Sun.Costume setColorize 255 215 0
// This makess sure the sunu is behind everything else
prop Sun.zIndex setTo 0


addFeature Physics
featProp Sun.Costume.scale setTo 1

// types to use for energy transfer: sun, vaggieGarden, clover, beetle, caterpillar, robin, gopher, snail, mouse, snake, hawk,
// sunToVaggie, sunToClover, beetleToMouse, beetleToRobin, beetleToSnake, caterpillarToBeetle, caterpillarToRobin, cloverToGopher
// cloverToSnail, vaggieToGopher, vaggieToMouse, vaggieToSnail, vaggieToCaterpillar gopherToHawk, mouseToHawk, robinToHawk, snailToBeetle,
// snailToRobin, snakeToHawk, mouseToSnake
// these are referenced by EnergyRepresentation
addProp energyType string 'sun'

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Sky",
      "scriptText": `# BLUEPRINT Sky
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
// Note: this character doesn't do anyhting - it is just for show since there is no
// other easy way to add background art
addFeature Costume
featProp Sky.Costume.costumeName setTo 'FWE_background (Yellow filter).png'
// featCall Sky.Costume setColorize 53 81 92

addFeature Physics
featProp Sky.Costume.width setTo 800
featProp Sky.Costume.height setTo 800

// make sure this is always way in the back behind all
// of the other characters
prop Sky.zIndex setTo -100


// required directive
# PROGRAM INIT`
    },
    {
      "name": "Timer",
      "scriptText": `# BLUEPRINT Timer
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature Graphing
addFeature Costume
featProp Timer.Costume.costumeName setTo 'GEN_onexone.json'
addProp time number 0
prop Timer.zIndex setTo 500

featProp Timer.Graphing.text setTo 'Time: 0'

# PROGRAM UPDATE
every 1 runAtStart [[
  prop Timer.time add 1
  exprPush {{ 'Time: ' + agent.getProp('time').value }}
  featPropPop Timer.Graphing.text
]]`
    },
    {
      "name": "GraphLostEnergy",
      "scriptText": `# BLUEPRINT GraphLostEnergy
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

# PROGRAM DEFINE
// This is a graph of energy lost to heat from all charaacters
// since there are lots of characters, rather than sume them up one type
// at a time, use a global variabe to track that excess heat

// hide the actual art since we just want the text to displaay
addFeature Costume
featProp GraphLostEnergy.Costume.costumeName setTo 'GEN_onexone.json'
featProp GraphLostEnergy.Costume.scale setTo 1

addFeature Graphing
addFeature Population
featProp GraphLostEnergy.Graphing.isLargeGraphic setTo true


// using a generic name so that it is easier to change later
addProp lostEnergy number 500
prop GraphLostEnergy.lostEnergy setMax 1000
prop GraphLostEnergy.lostEnergy setMin 0

featProp GraphLostEnergy.Graphing.graphProp setTo 'lostEnergy'

// make sure something displays with some initial text, on bottom right at first
prop GraphLostEnergy.x setTo 495
prop GraphLostEnergy.y setTo 350
prop GraphLostEnergy.zIndex setTo 300

featProp GraphLostEnergy.Graphing.text setTo 'Lost Energy'

# PROGRAM UPDATE

onEvent Tick [[

  // exprPush {{ global.getProp('energyReleasedAsHeat').value }}
  propPush global.energyReleasedAsHeat
  propPop GraphLostEnergy.lostEnergy

]]

// required directive
# PROGRAM INIT`
    },
    {
      "name": "EnergyInSystem",
      "scriptText": `# BLUEPRINT EnergyInSystem
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

# PROGRAM DEFINE
// hide the actual art since we just want the text to displaay
addFeature Costume
featProp EnergyInSystem.Costume.costumeName setTo 'GEN_onexone.json'
featProp EnergyInSystem.Costume.scale setTo 1

addFeature Graphing
addFeature Population
featProp EnergyInSystem.Graphing.isLargeGraphic setTo true

// using a generic name so that it is easier to change later
addProp totalEnergy Number 500
prop EnergyInSystem.totalEnergy setMax 1000
prop EnergyInSystem.totalEnergy setMin 0

// to store the current values of all animals and vaggies separately
// I could just add them up below, but this way we can see them in the inspector
addProp totalGrassEnergy Number 0
addProp totalSquashEnergy Number 0
addProp totalVenusflytrapEnergy Number 0
addProp totalFlyEnergy Number 0
addProp totalSquirrelEnergy Number 0


featProp EnergyInSystem.Graphing.graphProp setTo 'totalEnergy'

# PROGRAM UPDATE

onEvent Tick [[

  // count up the Grass
  featProp EnergyInSystem.Population.monitoredCharacter setTo 'Grass'
  featProp EnergyInSystem.Population.monitoredCharacterProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countCharacterProp 'Grass' 'energyLevel'
  exprPush {{ EnergyInSystem.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totalGrassEnergy

  // count up the Squash
  featProp EnergyInSystem.Population.monitoredCharacter setTo 'Squash'
  featProp EnergyInSystem.Population.monitoredCharacterProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countCharacterProp 'Squash' 'energyLevel'
  exprPush {{ EnergyInSystem.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totalSquashEnergy

  // count up the Venusflytrap
  featProp EnergyInSystem.Population.monitoredCharacter setTo 'Venusflytrap'
  featProp EnergyInSystem.Population.monitoredCharacterProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countCharacterProp 'Venusflytrap' 'energyLevel'
  exprPush {{ EnergyInSystem.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totalVenusflytrapEnergy

  // count up the Fly
  featProp EnergyInSystem.Population.monitoredCharacter setTo 'Fly'
  featProp EnergyInSystem.Population.monitoredCharacterProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countCharacterProp 'Fly' 'energyLevel'
  exprPush {{ EnergyInSystem.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totalFlyEnergy

  // count up the Squirrel
  featProp EnergyInSystem.Population.monitoredCharacter setTo 'Squirrel'
  featProp EnergyInSystem.Population.monitoredCharacterProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countCharacterProp 'Squirrel' 'energyLevel'
  exprPush {{ EnergyInSystem.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totalSquirrelEnergy

  // graph the sum
  exprPush {{ EnergyInSystem.getProp('totalGrassEnergy').value + agent.getProp('totalSquashEnergy').value + agent.getProp('totalVenusflytrapEnergy').value + agent.getProp('totalFlyEnergy').value + agent.getProp('totalSquirrelEnergy').value }}
  propPop EnergyInSystem.totalEnergy


]]

// required directive
# PROGRAM INIT
// make sure something displays with some initial text, on bottom right at first
prop EnergyInSystem.x setTo 495
prop EnergyInSystem.y setTo 187
prop EnergyInSystem.zIndex setTo 300

featProp EnergyInSystem.Graphing.text setTo 'Energy in System'`
    },
    {
      "name": "Grass",
      "scriptText": `# BLUEPRINT Grass
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
// The Grass is one of the characters that takes / produces energy
// Note that it mostly just stores properties that the EnergyRepresentation will check / change
// The other main functionality (under update) is that it will update its meter color depending on
// how much energy it has

addFeature Costume
featProp Grass.Costume.costumeName setTo 'CP_grass.png'

addFeature Physics
featProp Grass.Costume.scale setTo 0.4

// types to use for energy transfer: sun, vaggieGarden, clover, beetle, caterpillar, robin, gopher, snail, mouse, snake, hawk,
// sunToVaggie, sunToClover, beetleToMouse, beetleToRobin, beetleToSnake, caterpillarToBeetle, caterpillarToRobin, cloverToGopher
// cloverToSnail, vaggieToGopher, vaggieToMouse, vaggieToSnail, vaggieToCaterpillar gopherToHawk, mouseToHawk, robinToHawk, snailToBeetle,
// snailToRobin, snakeToHawk, mouseToSnake
// these are referenced by EnergyRepresentation
addProp energyType String 'Grass'

// setup to track energy and begin at 1/2 way
addProp energyLevel number 50
prop Grass.energyLevel setMax 100
prop Grass.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make VeggieGarden lose energy faster (or slower)
addProp energyUse number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Grass.Graphing.meterProp setTo 'energyLevel'

featProp Grass.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 1 runAtStart [[

  // decrease energy each tick, using the energyUse varable to determine how much
  ifExpr {{ Grass.getProp('energyLevel').value > 0 }} [[
    exprPush {{ Grass.getProp('energyLevel').value - Grass.getProp('energyUse').value }}
    propPop Grass.energyLevel
  ]]

  // re-scale the VeggieGarden based on its energy level
  ifExpr {{ Grass.getProp('energyLevel').value > 30 }} [[
    exprPush {{ Grass.getProp('energyLevel').value / 100 }}
    featPropPop Grass.Costume.scale
  ]]

  // this code sets the color of the energy bar based on how hungry the VeggieGarden is
  // set VeggieGarden energy meter color
  // doing great
  ifExpr {{ Grass.getProp('energyLevel').value > 60 }} [[
    // Green
    featProp Grass.Graphing.meterColor setTo 65280
  ]]
  // needs some energy
  ifExpr {{ Grass.getProp('energyLevel').value < 60 }} [[
    // Orange
    featProp Grass.Graphing.meterColor setTo 16737792
  ]]
  // in trouble
  ifExpr {{ Grass.getProp('energyLevel').value < 30 }} [[
    // Red
    featProp Grass.Graphing.meterColor setTo 16711680


    // avoid getting too small
    exprPush {{ 0.3 }}
    featPropPop Grass.Costume.scale

  ]]
]]`
    },
    {
      "name": "Squash",
      "scriptText": `# BLUEPRINT Squash
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
// The Squash is one of the characters that takes / produces energy
// Note that it mostly just stores properties that the EnergyRepresentation will check / change
// The other main functionality (under update) is that it will update its meter color depending on
// how much energy it has

addFeature Costume
featProp Squash.Costume.costumeName setTo 'CP_squash.png'

addFeature Physics
featProp Squash.Costume.scale setTo 0.4

// types to use for energy transfer:
// these are referenced by EnergyRepresentation
addProp energyType String 'squash'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Squash.energyLevel setMax 100
prop Squash.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make VeggieGarden lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Squash.Graphing.meterProp setTo 'energyLevel'

featProp Squash.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 1 runAtStart [[

  // decrease energy each tick, using the energyUse varable to determine how much
  ifExpr {{ Squash.getProp('energyLevel').value > 0 }} [[
    exprPush {{ Squash.getProp('energyLevel').value - Squash.getProp('energyUse').value }}
    propPop Squash.energyLevel
  ]]

  // re-scale the VeggieGarden based on its energy level
  ifExpr {{ Squash.getProp('energyLevel').value > 30 }} [[
    // insert code here
  ]]
  exprPush {{ Squash.getProp('energyLevel').value / 200 }}
  featPropPop Squash.Costume.scale

  // this code sets the color of the energy bar based on how hungry the squash is
  // set squash energy meter color
  // doing great
  ifExpr {{ Squash.getProp('energyLevel').value > 60 }} [[
    // Green
    featProp Squash.Graphing.meterColor setTo 65280
  ]]
  // needs some energy
  ifExpr {{ Squash.getProp('energyLevel').value < 60 }} [[
    // Orange
    featProp Squash.Graphing.meterColor setTo 16737792
  ]]
  // in trouble
  ifExpr {{ Squash.getProp('energyLevel').value < 30 }} [[
    // Red
    featProp Squash.Graphing.meterColor setTo 16711680

    // avoid getting too
    exprPush {{ .15 }}
    featPropPop Squash.Costume.scale

  ]]
]]`
    },
    {
      "name": "Venusflytrap",
      "scriptText": `# BLUEPRINT Venusflytrap
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
// The Venusflytrap is one of the characters that takes / produces energy
// Note that it mostly just stores properties that the EnergyRepresentation will check / change
// The other main functionality (under update) is that it will update its meter color depending on
// how much energy it has

addFeature Costume
featProp Venusflytrap.Costume.costumeName setTo 'CP_venusflytrap.png'

addFeature Physics
featProp Venusflytrap.Costume.scale setTo 0.4

// types to use for energy transfer:
addProp energyType String 'venusflytrap'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Venusflytrap.energyLevel setMax 100
prop Venusflytrap.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make VeggieGarden lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Venusflytrap.Graphing.meterProp setTo 'energyLevel'

featProp Venusflytrap.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 1 runAtStart [[

  // decrease energy each tick, using the energyUse varable to determine how much
  ifExpr {{ Venusflytrap.getProp('energyLevel').value > 0 }} [[
    exprPush {{ Venusflytrap.getProp('energyLevel').value - Venusflytrap.getProp('energyUse').value }}
    propPop Venusflytrap.energyLevel
  ]]

  // re-scale the VeggieGarden based on its energy level
  ifExpr {{ Venusflytrap.getProp('energyLevel').value > 30 }} [[
    // insert code here
  ]]
  exprPush {{ Venusflytrap.getProp('energyLevel').value / 200 }}
  featPropPop Venusflytrap.Costume.scale

  // this code sets the color of the energy bar based on how hungry the venusflytrp is
  // set venusflytrap energy meter color
  // doing great
  ifExpr {{ Venusflytrap.getProp('energyLevel').value > 60 }} [[
    // Green
    featProp Venusflytrap.Graphing.meterColor setTo 65280
  ]]
  // needs some energy
  ifExpr {{ Venusflytrap.getProp('energyLevel').value < 60 }} [[
    // Orange
    featProp Venusflytrap.Graphing.meterColor setTo 16737792
  ]]
  // in trouble
  ifExpr {{ Venusflytrap.getProp('energyLevel').value < 30 }} [[
    // Red
    featProp Venusflytrap.Graphing.meterColor setTo 16711680

    // avoid getting too
    exprPush {{ .15 }}
    featPropPop Venusflytrap.Costume.scale

  ]]
]]`
    },
    {
      "name": "Squirrel",
      "scriptText": `# BLUEPRINT Squirrel
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
// The Squirrel is one of the characters that takes / produces energy
// Note that it mostly just stores properties that the EnergyRepresentation will check / change
// The other main functionality (under update) is that it will update its meter color depending on
// how much energy it has


addFeature Costume
featProp Squirrel.Costume.costumeName setTo 'CP_squirrel.png'

addFeature Physics
featProp Squirrel.Costume.scale setTo 0.35

// types to use for energy transfer: 
addProp energyType String 'squirrel'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Squirrel.energyLevel setMax 100
prop Squirrel.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Squirrel lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Squirrel.Graphing.meterProp setTo 'energyLevel'

featProp Squirrel.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 2 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Squirrel.getProp('energyLevel').value - Squirrel.getProp('energyUse').value }}
  propPop Squirrel.energyLevel

  // this code sets the color of the energy bar based on how hungry the Squirrel is
  // sated
  ifExpr {{ Squirrel.getProp('energyLevel').value > 50 }} [[
    featProp Squirrel.Costume.currentFrame setTo 0
    // Green
    featProp Squirrel.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Squirrel.getProp('energyLevel').value < 50 }} [[
    featProp Squirrel.Costume.currentFrame setTo 1
    // Orange
    featProp Squirrel.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Squirrel.getProp('energyLevel').value < 20 }} [[
    featProp Squirrel.Costume.currentFrame setTo 1
    // Red
    featProp Squirrel.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Squirrel.getProp('energyLevel').value < 1 }} [[
    featProp Squirrel.Costume.currentFrame setTo 2
    prop Squirrel.alpha setTo 0.3
    prop Squirrel.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Squirrel.Graphing.meterProp setTo 'energyLevel'

]]

// required directive
# PROGRAM INIT`
    },
    {
      "name": "Fly",
      "scriptText": `# BLUEPRINT Fly
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM DEFINE
// The Fly is one of the characters that takes / produces energy
// Note that it mostly just stores properties that the EnergyRepresentation will check / change
// The other main functionality (under update) is that it will update its meter color depending on
// how much energy it has


addFeature Costume
featProp Fly.Costume.costumeName setTo 'CP_fly.png'

addFeature Physics
featProp Fly.Costume.scale setTo 0.4

// types to use for energy transfer:
addProp energyType String 'fly'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Fly.energyLevel setMax 100
prop Fly.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Fly lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Fly.Graphing.meterProp setTo 'energyLevel'

featProp Fly.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 2 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Fly.getProp('energyLevel').value - Fly.getProp('energyUse').value }}
  propPop Fly.energyLevel

  // this code sets the color of the energy bar based on how hungry the Fly is
  // sated
  ifExpr {{ Fly.getProp('energyLevel').value > 50 }} [[
    featProp Fly.Costume.currentFrame setTo 0
    // Green
    featProp Fly.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Fly.getProp('energyLevel').value < 50 }} [[
    featProp Fly.Costume.currentFrame setTo 1
    // Orange
    featProp Fly.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Fly.getProp('energyLevel').value < 20 }} [[
    featProp Fly.Costume.currentFrame setTo 1
    // Red
    featProp Fly.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Fly.getProp('energyLevel').value < 1 }} [[
    featProp Fly.Costume.currentFrame setTo 2
    prop Fly.alpha setTo 0.3
    prop Fly.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Fly.Graphing.meterProp setTo 'energyLevel'

]]

// required directive
# PROGRAM INIT`
    },
    {
      "name": "EnergyRepresentation",
      "scriptText": `# BLUEPRINT EnergyRepresentation
# TAG isCharControllable true
# TAG isPozyxControllable true
# TAG isPTrackControllable false
# PROGRAM DEFINE

addFeature Costume
featProp EnergyRepresentation.Costume.costumeName setTo 'FWE_empty_energy.png'

addFeature Physics
featProp EnergyRepresentation.Costume.scale setTo 0.06

// setup energy properties
addProp energyLevel Number 0
prop EnergyRepresentation.energyLevel setMax 100
prop EnergyRepresentation.energyLevel setMin 0

// setup energy type so that we know what we can give it to
// start with none
addProp energyType String 'none'

addFeature Touches
featCall EnergyRepresentation.Touches monitor 'Sun' c2b
featCall EnergyRepresentation.Touches monitor 'Grass' c2b
featCall EnergyRepresentation.Touches monitor 'Squash' c2b
featCall EnergyRepresentation.Touches monitor 'Venusflytrap' c2b
featCall EnergyRepresentation.Touches monitor 'Fly' c2b
featCall EnergyRepresentation.Touches monitor 'Squirrel' c2b


# PROGRAM UPDATE
// types to use for energy transfer: sun, grass, squash, venusflytrap, fly, squirrel
// sunToGrass, sunToSquash, sunToVenus, sunToFly, sunToSquirrel

// ---updating sun energy---

when EnergyRepresentation centerFirstTouches Sun [[

  // when touching, show an annotation about how the sun produces energy
  featProp EnergyRepresentation.Costume.costumeName setTo 'FWE_sun.png'
]]

when EnergyRepresentation centerLastTouches Sun [[

  // when moving off, take a full amount of energy in the form of sunlight and heat (our focus fis on light since the plants use it)
  prop EnergyRepresentation.energyType setTo 'sun'
  prop EnergyRepresentation.energyLevel setTo 100

  featProp EnergyRepresentation.Costume.costumeName setTo 'FWE_sun.png'
]]


// ---updating Grass energy---

when EnergyRepresentation centerFirstTouches Grass [[
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'none' }} [[
    prop EnergyRepresentation.energyType setTo 'grass'
    featProp EnergyRepresentation.Costume.costumeName setTo 'CP_grass_energy.png'
  ]]

  // if you have energy from the sun, then give some energy to the grass, but not all of it because some is released into the environment
  // as heat or lost in other ways
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'sun' }} [[
    prop EnergyRepresentation.energyType setTo 'sunToGrass'

    // STUDENTS_MAY_CHANGE to alter how much energy the VeggieGarden gets from the sun
    prop EnergyRepresentation.energyLevel setTo 0
    prop Grass.energyLevel add 50
    // we are losing 50 of the hundred, so not that in the global
    prop global.energyReleasedAsHeat add 50


    featProp EnergyRepresentation.Costume.costumeName setTo 'CP_sun_to_grass.png'

    featProp Grass.Costume.glow setTo 1

  ]]
]]

when EnergyRepresentation centerLastTouches Grass [[

  // if you have no energy type, take some energy from the Grass
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'sunToGrass' && Grass.getProp('energyLevel').value > 25 }} [[
    prop EnergyRepresentation.energyType setTo 'grass'

    // STUDENTS_MAY_CHANGE to alter how much energy the VeggieGarden gives to a animal
    // note - it was too fast, so i am removing less then I am moving, but let's imagine they are on different scales
    prop Grass.energyLevel sub 10
    prop EnergyRepresentation.energyLevel add 25
    // we are losing 25 of the hundred, so not that in the global
    prop global.energyReleasedAsHeat add 25

    featProp EnergyRepresentation.Costume.costumeName setTo 'CP_grass_energy.png'
  ]]

  // when leaving (after arriving with relevent energy type) make sure to leave with vaggiegarden energy type
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'none' || EnergyRepresentation.getProp('energyType').value == 'sunToGrass' }} [[
    prop EnergyRepresentation.energyType setTo 'grass'
    featProp EnergyRepresentation.Costume.costumeName setTo 'CP_grass_energy.png'
  ]]
]]

// ---updating Squash energy---

when EnergyRepresentation centerFirstTouches Squash [[
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'none' }} [[
    prop EnergyRepresentation.energyType setTo 'squash'
    featProp EnergyRepresentation.Costume.costumeName setTo 'CP_squash_energy.png'
  ]]

  // if you have energy from the sun, then give some energy to the squash, but not all of it because some is released into the environment
  // as heat or lost in other ways
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'sun' }} [[
    prop EnergyRepresentation.energyType setTo 'sunToSquash'

    // STUDENTS_MAY_CHANGE to alter how much energy the Grass gets from the sun
    prop EnergyRepresentation.energyLevel setTo 0
    prop Squash.energyLevel add 50
    // we are losing 50 of the hundred, so not that in the global
    prop global.energyReleasedAsHeat add 50


    featProp EnergyRepresentation.Costume.costumeName setTo 'CP_sun_to_squash.png'
    featProp Squash.Costume.scale setTo 0.4

    featProp Squash.Costume.glow setTo 1

  ]]
]]

when EnergyRepresentation centerLastTouches Squash [[

  // if you have no energy type, take some energy from the Grass
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'sunToSquash' && Squash.getProp('energyLevel').value > 25 }} [[
    prop EnergyRepresentation.energyType setTo 'squash'

    // STUDENTS_MAY_CHANGE to alter how much energy the Grass gives to a animal
    // note - it was too fast, so i am removing less then I am moving, but let's imagine they are on different scales
    prop Squash.energyLevel sub 10
    prop EnergyRepresentation.energyLevel add 25
    // we are losing 25 of the hundred, so not that in the global
    prop global.energyReleasedAsHeat add 25

    featProp EnergyRepresentation.Costume.costumeName setTo 'CP_squash_energy.png'
    featProp EnergyRepresentation.Costume.scale setTo 0.06

  ]]

  // when leaving (after arriving with relevant energy type) make sure to leave with squash energy type
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'none' || EnergyRepresentation.getProp('energyType').value == 'sunToSquash' }} [[
    prop EnergyRepresentation.energyType setTo 'squash'
    featProp EnergyRepresentation.Costume.costumeName setTo 'CP_squash_energy.png'
  ]]
]]

// ---updating Squirrel energy---

when EnergyRepresentation centerFirstTouches Squirrel [[

  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'none' }} [[
    prop EnergyRepresentation.energyType setTo 'squirrel'
    featProp EnergyRepresentation.Costume.costumeName setTo 'CP_squirrel_energy.png'
  ]]

  // when touch Squirrel, and energy type is from Grass and energy isn't 0, get energy, change meter color to orange, change type to grassToSquirrel
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'grass' && Squirrel.getProp('energyLevel').value >2 }} [[
    prop EnergyRepresentation.energyType setTo 'grassToSquirrel'

    // STUDENTS_MAY_CHANGE to alter how much energy the Squirrel gets from the Grass, and what it does to the energy character
    prop EnergyRepresentation.energyLevel setTo 0
    prop Squirrel.energyLevel add 10
    // we are losing 50 of the hundred, so not that in the global
    prop global.energyReleasedAsHeat add 15

    featProp EnergyRepresentation.Costume.costumeName setTo 'CP_grass_to_squirrel.png'
    featProp Squirrel.Costume.glow setTo 1
  ]]

  // when touch Squirrel and energy type is from squash and energy isn't 0, get energy, change meter color to orange, change type to squashToSquirrel
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'squash' && Squirrel.getProp('energyLevel').value >2 }} [[
    prop EnergyRepresentation.energyType setTo 'squashToSquirrel'

    // STUDENTS_MAY_CHANGE to alter how much energy the Squirrel gets from the Squash, and what it does to the energy character
    prop EnergyRepresentation.energyLevel setTo 0
    prop Squirrel.energyLevel add 10
    // we are losing 50 of the hundred, so not that in the global
    prop global.energyReleasedAsHeat add 15

    featProp EnergyRepresentation.Costume.costumeName setTo 'CP_squash_to_squirrel.png'
    featProp Squirrel.Costume.glow setTo 1
  ]]

]]

when EnergyRepresentation centerLastTouches Squirrel [[

  // if you have no Squirrel energy type, take some energy from the Squirrel to the energy
  ifExpr {{ (EnergyRepresentation.getProp('energyType').value == 'grassToSquirrel' || EnergyRepresentation.getProp('energyType').value == 'squashToSquirrel') && Squirrel.getProp('energyLevel').value > 25 }} [[
    prop EnergyRepresentation.energyType setTo 'squirrel'

    // STUDENTS_MAY_CHANGE to alter how much energy the Squirrel gives to a animal
    // note - it was too fast, so i am removing less then I am moving, but let's imagine they are on different scales
    prop Squirrel.energyLevel sub 10
    prop EnergyRepresentation.energyLevel add 25
    // we are losing 25 of the hundred, so not that in the global
    prop global.energyReleasedAsHeat add 25

    featProp EnergyRepresentation.Costume.costumeName setTo 'CP_squirrel_energy.png'

  ]]

  // when leaving (after arriving with relevant energy type) make sure to leave with Squirrel energy type
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'none' || EnergyRepresentation.getProp('energyType').value == 'grassToSquirrel' || EnergyRepresentation.getProp('energyType').value == 'squashToSquirrel' }} [[
    prop EnergyRepresentation.energyType setTo 'squirrel'
    featProp EnergyRepresentation.Costume.costumeName setTo 'CP_squirrel_energy.png'
  ]]

]]

// ---updating Fly energy---

when EnergyRepresentation centerFirstTouches Fly [[

  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'none' }} [[
    prop EnergyRepresentation.energyType setTo 'fly'
    featProp EnergyRepresentation.Costume.costumeName setTo 'CP_fly_energy.png'
  ]]

  // when touch Fly, and energy type is from squash and energy isn't 0, get energy, change meter color to orange, change type to squashToFly
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'squash' && Fly.getProp('energyLevel').value >2 }} [[
    prop EnergyRepresentation.energyType setTo 'squashToFly'

    // STUDENTS_MAY_CHANGE to alter how much energy the Fly gets from the Squash, and what it does to the energy character
    prop EnergyRepresentation.energyLevel setTo 0
    prop Fly.energyLevel add 10
    // we are losing 50 of the hundred, so not that in the global
    prop global.energyReleasedAsHeat add 15

    featProp EnergyRepresentation.Costume.costumeName setTo 'CP_squash_to_fly.png'
    featProp Fly.Costume.glow setTo 1
  ]]

  // when touch snake and energy type is from squirrel and energy isn't 0, get energy, change meter color to orange, change type to squirrelToFly
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'squirrel' && Fly.getProp('energyLevel').value >2 }} [[
    prop EnergyRepresentation.energyType setTo 'squirrelToFly'

    // STUDENTS_MAY_CHANGE to alter how much energy the fly gets from the squirrel, and what it does to the energy character
    prop EnergyRepresentation.energyLevel setTo 0
    prop Fly.energyLevel add 10
    // we are losing 50 of the hundred, so not that in the global
    prop global.energyReleasedAsHeat add 15

    featProp EnergyRepresentation.Costume.costumeName setTo 'CP_squirrel_to_fly.png'
    featProp Fly.Costume.glow setTo 1
  ]]

]]

when EnergyRepresentation centerLastTouches Fly [[

  // if you have no Fly energy type, take some energy from the Fly to the energy
  ifExpr {{ (EnergyRepresentation.getProp('energyType').value == 'squashToFly' || EnergyRepresentation.getProp('energyType').value == 'squirrelToFly') && Fly.getProp('energyLevel').value > 25 }} [[
    prop EnergyRepresentation.energyType setTo 'fly'

    // STUDENTS_MAY_CHANGE to alter how much energy the Fly gives to a animal
    // note - it was too fast, so i am removing less then I am moving, but let's imagine they are on different scales
    prop Fly.energyLevel sub 10
    prop EnergyRepresentation.energyLevel add 25
    // we are losing 25 of the hundred, so not that in the global
    prop global.energyReleasedAsHeat add 25

    featProp EnergyRepresentation.Costume.costumeName setTo 'CP_fly_energy.png'

  ]]

  // when leaving (after arriving with relevent energy type) make sure to leave with Fly energy type
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'none' || EnergyRepresentation.getProp('energyType').value == 'squashToFly' || EnergyRepresentation.getProp('energyType').value == 'squirrelToFly' }} [[
    prop EnergyRepresentation.energyType setTo 'fly'
    featProp EnergyRepresentation.Costume.costumeName setTo 'CP_fly_energy.png'
  ]]

]]

// ---updating Venusflytrap energy---

when EnergyRepresentation centerFirstTouches Venusflytrap [[

  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'none' }} [[
    prop EnergyRepresentation.energyType setTo 'venusflytrap'
    featProp EnergyRepresentation.Costume.costumeName setTo 'CP_venusflytrap_energy.png'
  ]]

  // when touch Venusflytrap, and energy type is from sun and energy isn't 0, get energy, change meter color to orange, change type to sunToVenusflytrap
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'sun' && Venusflytrap.getProp('energyLevel').value >2 }} [[
    prop EnergyRepresentation.energyType setTo 'sunToVenusflytrap'

    // STUDENTS_MAY_CHANGE to alter how much energy the Venusflytrap gets from the Sun, and what it does to the energy character
    prop EnergyRepresentation.energyLevel setTo 0
    prop Venusflytrap.energyLevel add 10
    // we are losing 50 of the hundred, so not that in the global
    prop global.energyReleasedAsHeat add 15

    featProp EnergyRepresentation.Costume.costumeName setTo 'CP_sun_to_venusflytrap.png'
    featProp Venusflytrap.Costume.glow setTo 1
  ]]

  // when touch Venusflytrap and energy type is from fly and energy isn't 0, get energy, change meter color to orange, change type to flyToVenusflytrap
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'fly' && Venusflytrap.getProp('energyLevel').value >2 }} [[
    prop EnergyRepresentation.energyType setTo 'flyToVenusflytrap'

    // STUDENTS_MAY_CHANGE to alter how much energy the Venusflytrap gets from the Fly, and what it does to the energy character
    prop EnergyRepresentation.energyLevel setTo 0
    prop Venusflytrap.energyLevel add 10
    // we are losing 50 of the hundred, so not that in the global
    prop global.energyReleasedAsHeat add 15

    featProp EnergyRepresentation.Costume.costumeName setTo 'CP_fly_to_venusflytrap.png'
    featProp Venusflytrap.Costume.glow setTo 1
  ]]

  when EnergyRepresentation centerLastTouches Venusflytrap [[

    // if you have no Squirrel energy type, take some energy from the Squirrel to the energy
    ifExpr {{ (EnergyRepresentation.getProp('energyType').value == 'sunToVenusflytrap' || EnergyRepresentation.getProp('energyType').value == 'flyToVenusflytrap') && Venusflytrap.getProp('energyLevel').value > 25 }} [[
      prop EnergyRepresentation.energyType setTo 'venusflytrap'

      // STUDENTS_MAY_CHANGE to alter how much energy the Squirrel gives to a animal
      // note - it was too fast, so i am removing less then I am moving, but let's imagine they are on different scales
      prop Venusflytrap.energyLevel sub 10
      prop EnergyRepresentation.energyLevel add 25
      // we are losing 25 of the hundred, so not that in the global
      prop global.energyReleasedAsHeat add 25

      featProp EnergyRepresentation.Costume.costumeName setTo 'FWE_empty_energy.png'

    ]]

    // when leaving (after arriving with relevant energy type) make sure to leave with Squirrel energy type
    ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'none' || EnergyRepresentation.getProp('energyType').value == 'sunToVenusflytrap' || EnergyRepresentation.getProp('energyType').value == 'flyToVenusflytrap' }} [[
      prop EnergyRepresentation.energyType setTo 'venusflytrap'
      featProp EnergyRepresentation.Costume.costumeName setTo 'FWE_empty_energy.png'
    ]]

  ]]
]]
// required directive
# PROGRAM INIT`
    }
  ],
  "instances": [
    {
      "id": "0",
      "label": "Sun",
      "bpid": "Sun",
      "initScript": `prop x setTo -199.1
prop y setTo -381.73`
    },
    {
      "id": "5",
      "label": "Timer",
      "bpid": "Timer",
      "initScript": `prop x setTo 354.35
prop y setTo -394.62`
    },
    {
      "id": "6",
      "label": "Sky6",
      "bpid": "Sky",
      "initScript": `prop x setTo 2.36
prop y setTo -22.06`
    },
    {
      "id": "21",
      "label": "Squash21",
      "bpid": "Squash",
      "initScript": `prop x setTo -238.73
prop y setTo 9.76`
    },
    {
      "id": "22",
      "label": "Venusflytrap22",
      "bpid": "Venusflytrap",
      "initScript": `prop x setTo 76.90
prop y setTo 19.26`
    },
    {
      "id": "23",
      "label": "Grass23",
      "bpid": "Grass",
      "initScript": `prop x setTo 12.64
prop y setTo 284.80`
    },
    {
      "id": "24",
      "label": "Squirrel24",
      "bpid": "Squirrel",
      "initScript": `prop x setTo -31.83
prop y setTo -192.07`
    },
    {
      "id": "25",
      "label": "Fly25",
      "bpid": "Fly",
      "initScript": `prop x setTo 267.70
prop y setTo -113.70`
    },
    {
      "id": "27",
      "label": "EnergyInSystem27",
      "bpid": "EnergyInSystem",
      "initScript": `prop x setTo 490.42
prop y setTo 291.36`
    }
  ]
}