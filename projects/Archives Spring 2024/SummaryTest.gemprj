{
  "id": "SummaryTest",
  "label": "SummaryTest",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 102,
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [],
  "blueprints": [
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body

# PROGRAM INIT

// üîé WHAT DOES MODEL DO?
// üîé This starter model assumes you have at least 2 charaacters, one that is controllable by IsPozyxControllable
// üîé and one that is not though you can use character controller with the second
// üîé Change this description once you are ready to share the model so others know how it is supposed to work.


prop global.visible setTo false

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Entity",
      "scriptText": `# BLUEPRINT Entity
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body

# PROGRAM INIT
// This is the most basic setup of properties that happens as soon as this character is saved

addFeature Graphing
addFeature Costume
addFeature Physics
addFeature Touches

featProp Entity.Costume.costumeName setTo 'GEN_square.json'
featProp Entity.Costume.scale setTo 0.25
featCall Entity.Touches monitor 'Process' b2b

# PROGRAM UPDATE
when Entity touches Process [[
  featProp Entity.Costume.glow setTo 1
  // insert code here
]]

when Entity lastTouches Process [[
  featProp Entity.Costume.glow setTo 0
  // insert code here
]]
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time
// This is also where you can handle touches between characters such as When Algae touches Fish`
    },
    {
      "name": "Process",
      "scriptText": `# BLUEPRINT Process
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable false

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body

# PROGRAM INIT
// This is the most basic setup of properties that happens as soon as this character is saved

addFeature Costume
addFeature Physics
addFeature Touches
addFeature Population
addFeature Movement

addProp createTrace boolean true

featProp Process.Costume.costumeName setTo 'GEN_circle.json'
featProp Process.Costume.scale setTo 0.2
featCall Process.Costume setColorize 200 100 100
prop Process.zIndex setTo 500
# PROGRAM UPDATE
every 0.05 runAfter [[
  ifProp Process.createTrace equal true [[
    featCall Process.Population createCharacter Trace [[

    ]]
  ]]
]]`
    },
    {
      "name": "Trace",
      "scriptText": `# BLUEPRINT Trace
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Population

featProp Trace.Costume.costumeName setTo 'GEN_circle.json'
featProp Trace.Costume.scale setTo 0.05
featCall Trace.Costume setColorizeHSV 21 78 94
addProp removeCountdown number 10
prop Trace.alpha setTo 0.5

# PROGRAM UPDATE
every 1 runAfter [[
  prop Trace.removeCountdown sub 1

  ifProp Trace.removeCountdown equal 0 [[
    featCall Trace.Population removeCharacter
  ]]
]]`
    }
  ],
  "instances": [
    {
      "id": "0",
      "label": "Water",
      "bpid": "Entity",
      "initScript": `prop x setTo -20.96
prop y setTo -150.99`
    },
    {
      "id": "1",
      "label": "Trees",
      "bpid": "Entity",
      "initScript": `prop x setTo -237.91
prop y setTo -33.14`
    },
    {
      "id": "2",
      "label": "Dam",
      "bpid": "Entity",
      "initScript": `prop x setTo -69.27
prop y setTo 155.23`
    },
    {
      "id": "3",
      "label": "Lodge",
      "bpid": "Entity",
      "initScript": `prop x setTo 68.23
prop y setTo 144.91`
    },
    {
      "id": "4",
      "label": "Predator",
      "bpid": "Entity",
      "initScript": `prop x setTo 222.83
prop y setTo -101.07`
    }
  ]
}