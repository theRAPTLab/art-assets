{
  "id": "BlackDeath1",
  "label": "Black Death Model",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": "0x00bfff",
    "roundsCanLoop": false,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [
    {
      "id": "r1",
      "label": "Before Times",
      "time": 60,
      "intro": "Go about your life. For now, your focus is on eating to get energy and nutrition.",
      "outtro": "",
      "initScript": `dbgOut 'roundDef: Round1'
      
        prop global.hasPlague setTo false

        // give each person a random wealth and nutritionLevel
        featCall global.Population charactersForEach 'Person' [[
          prop Person.wealth setToRnd 2 10 true
          prop Person.nutritionLevel setToRnd 2 7 true
        ]]
      `,
      "endScript": `dbgOut 'END Round!'`
    },
    {
      "id": "r2",
      "label": "Plague Strikes",
      "time": 60,
      "intro": "Plague has struck! You still need food, but be careful... ",
      "outtro": "",
      "initScript": `dbgOut 'roundDef: Round2'
            
        prop global.hasPlague setTo true

        // create plague vectors and place them
        featCall global.Population createCharacter PlagueVector [[
          prop PlagueVector.x setTo 60
          prop PlagueVector.y setTo 40
        ]]

        featCall global.Population createCharacter PlagueVector [[
          prop PlagueVector.x setTo 80
          prop PlagueVector.y setTo 200
        ]]

        featCall global.Population createCharacter PlagueVector [[
          prop PlagueVector.x setTo 10
          prop PlagueVector.y setTo 1000
        ]]

      `,
      "endScript": `dbgOut 'END Round!'`
    }
  ],
  "blueprints": [
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body

# PROGRAM INIT

// add features
addFeature Population

prop global.visible setTo false

// Setup properties
// This helps us determine if plague is something to be worried about
addProp hasPlague boolean false

// chance of getting plague as a percentage
addProp chanceOfCatchingPlague number 0.3

// chance of dying each round once you have plague (so not a direct rate of death)
addProp chanceOfDying number 0.1

# PROGRAM UPDATE`
    },
    {
      "name": "Person",
      "scriptText": `# BLUEPRINT Person
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
// add features
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Population
addFeature Graphing

// setup the costume
featProp Person.Costume.costumeName setTo 'PP_person_neutral.png'
featProp Person.Costume.scale setTo 0.5

// make sure we track interactions with other people
featCall Person.Touches monitor 'Person' b2b
featCall Person.Touches monitor 'Place' b2b
featCall Person.Touches monitor 'Food' b2b
featCall Person.Touches monitor 'PlagueVector' b2b

// üîé WHAT are the properties of people?
// Do they currently have the plague?
addProp hasPlague boolean false
// Or were they exposed to it?
addProp wasExposed boolean false

// How wealthy are they?  This will impact access to food.
addProp wealth number 5
prop Person.wealth setMin 0
prop Person.wealth setMax 10

// How much energyLevel do they have?  Need food for energyLevel
addProp energyLevel number 5
prop Person.energyLevel setMin 0
prop Person.energyLevel setMax 10

// How healthy are they generally in terms of nutrition?
// for simplicity of modeling, start at 5 (middle of the road) and go up for eating good food
addProp nutritionLevel number 5
prop Person.nutritionLevel setMin 0
prop Person.nutritionLevel setMax 10

// used for calculating whether we get plague
addProp randomNum number 0
addProp tempNum number 0

featProp Person.Graphing.meterProp setTo 'energyLevel'
featProp Person.Graphing.meterColor setTo 65280


// Set name
// exprPush {{ 'Wealth: ' + Person.getProp('wealth').value + ' ' + 'Nutrition: ' + Person.getProp('nutritionLevel').value }}
// featPropPop Person.Graphing.text
featProp Person.Graphing.text setTo 'Wealth: ## Nutrition: ##'

# PROGRAM UPDATE

every 3 runAtStart [[
  // People use energyLevel over time
  prop Person.energyLevel sub 1

  // check if they have plague and maybe die if they do
  prop Person.randomNum setToRnd 1 10 true

  ifProp Person.randomNum lessThan chanceOfDying [[
    prop Person.energyLevel setTo 0
  ]]

  // if we have no energy, we are dead 
  ifProp Person.energyLevel equal 0 [[
    prop Person.alpha setTo 0.5
    featProp Person.Costume.costumeName setTo 'PP_person_sad.png'
    prop Person.isInert setTo true
  ]]

]]

every 0.1 runAtStart [[

  // update display of wealth
  exprPush {{ 'Wealth: ' + Person.getProp('wealth').value + ' ' + 'Nutrition: ' + Person.getProp('nutritionLevel').value + ' Plague: ' + Person.getProp('hasPlague').value }}
  featPropPop Person.Graphing.text

  // if this is a round where plague is present
  ifProp global.hasPlague equal true [[
    // if this person is not positive and has been exposed
    ifProp Person.hasPlague equal false [[
      ifProp Person.wasExposed equal true [[

        // Determine if theey have plague and then clear exposed
        // The two key variables are:
        // - global.chanceOfCatchingPlague (percentage)
        // - Person.nutritionLevel (1-10)

        // Current approach
        propPush Person.nutritionLevel
        propPop Person.tempNum

        // change nutrition into a percentage
        prop Person.tempNum div 10

        // pick a random number between 1 and 10
        prop Person.randomNum setToRnd 0 1 false

        // dbgOut {{ 'Our random number is: ' + Person.getProp('randomNum').value }}
        // dbgOut {{ 'Our temp number is: ' + Person.getProp('tempNum').value }}

        // multiple that random number by our temp number
        propPush Person.randomNum
        propPush Person.tempNum
        stackMul
        propPop Person.tempNum

        // dbgOut {{ 'Mult and result is: ' + Person.getProp('tempNum').value }}
        // dbgOut {{ 'Checking if we are sick given a tempNum of ' +  Person.getProp('tempNum').value + ' and global: ' + global.getProp('chanceOfCatchingPlague').value }}

        // if the random number is below the threshold, the person is now sick
        ifExpr {{ Person.getProp('tempNum').value < global.getProp('chanceOfCatchingPlague').value }} [[
          // We have a new person who is sick
          dbgOut 'We have a new person who is sick'
          prop Person.hasPlague setTo true
        ]]

        // set this to false so we don't bother checking again
        prop Person.wasExposed setTo false
      ]]

      // NOTE this does not currently have a period of positive but not visible
      // if the person now has plague, change their costume to be sad
      ifProp Person.hasPlague equal true [[
        featProp Person.Costume.costumeName setTo 'PP_person_sad.png'
      ]]
      // if they feel OK still, they are happy because they are relieved!!
      ifProp Person.hasPlague equal false [[
        featProp Person.Costume.costumeName setTo 'PP_person_happy.png'
      ]]
    ]]
  ]]
]]

when Person firstTouches Person [[
  // glow to show we are interacting
  featProp Person.Costume.glow setTo 1

  ifExpr {{ agent.getProp('trackerId').value !=  Person.getProp('trackerId').value }} [[
    ifProp Person.hasPlague equal true [[
      prop Person.wasExposed setTo true
    ]]
  ]]
]]


when Person firstTouches PlagueVector [[
  // glow to show we are interacting
  featProp Person.Costume.glow setTo 1

  ifProp PlagueVector.hasPlague equal true [[
    prop Person.wasExposed setTo true
  ]]
]]

when Person firstTouches Place [[
  // if the Place has a higher wealth than the person, make them feel unwelcome
  ifExpr {{ Place.getProp('wealth').value > Person.getProp('wealth').value }} [[
    featCall Person.Population createCharacter PopupEffect [[
      prop PopupEffect.textToUse setTo 'You are not welcome!'
    ]]

    featProp Person.Costume.costumeName setTo 'PP_person_sad.png'

  ]]
]]

when Person firstTouches Food [[
  // glow to show we are interacting
  featProp Person.Costume.glow setTo 1

  // If you cant afford the food, you are notified, if you can, get some nutrition and energyLevel
  ifExpr {{ Food.getProp('wealth').value > Person.getProp('wealth').value }} [[
    featCall Person.Population createCharacter PopupEffect [[
      prop PopupEffect.textToUse setTo 'You cannot afford this!'
    ]]

    featProp Person.Costume.costumeName setTo 'PP_person_sad.png'

  ]]

  // If you can afford the food, eat it
  ifExpr {{ Person.getProp('wealth').value >= Food.getProp('wealth').value }} [[
    prop Person.energyLevel add 1
    // If the food nutrition is higher than person, increase it for the person
    // otherwise lower it
    ifExpr {{ Food.getProp('nutritionLevel').value > Person.getProp('nutritionLevel').value }} [[
      prop Person.nutritionLevel add 1
      featProp Person.Costume.costumeName setTo 'PP_person_neutral.png'
    ]]

    // decreate nutrition if you are eating unhealthy food
    ifExpr {{ Food.getProp('nutritionLevel').value < Person.getProp('nutritionLevel').value }} [[
      prop Person.nutritionLevel sub 1
    ]]

    // if you are doing pretty well, smile! 
    ifProp Person.nutritionLevel greaterThanOrEqual 6 [[
            featProp Person.Costume.costumeName setTo 'PP_person_happy.png'
    ]]

    // if you are doing less well ... 
    ifProp Person.nutritionLevel lessThan 6 [[
            featProp Person.Costume.costumeName setTo 'PP_person_neutral.png'
    ]]
  ]]
]]`
    },
    {
      "name": "Place",
      "scriptText": `# BLUEPRINT Place
# TAG isCharControllable true
# TAG isPozyxControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Graphing

// Setup costume
featProp Place.Costume.costumeName setTo 'GEN_square.json'
prop Place.zIndex setTo -200

// üîé WHAT are the properties of Places?
// üîé Note that many people perceive these as being ranked, rather than
// üîé simply different, and therefore that is how they are represented in the scriptaddProp perceivedColor Number 0

// How wealthy is the Place?  This will impact who is welcome.
addProp wealth number 5
prop Place.wealth setMin 0
prop Place.wealth setMax 10

# PROGRAM UPDATE`
    },
    {
      "name": "PopupEffect",
      "scriptText": `# BLUEPRINT PopupEffect
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

# PROGRAM INIT

addFeature Costume
addFeature Physics
addFeature Graphing
addFeature Population

featProp PopupEffect.Costume.costumeName setTo 'GEN_onexone.json'
featProp PopupEffect.Graphing.text setTo ''
prop PopupEffect.zIndex setTo 500

addProp costumeToUse string ''
addProp textToUse string 'TEST'
addProp countDown Number 2

# PROGRAM UPDATE

every 0.1 runAtStart [[
  ifProp PopupEffect.costumeToUse notEqual '' [[
    propPush PopupEffect.costumeToUse
    featPropPop PopupEffect.Costume.costumeName
    prop PopupEffect.costumeToUse setTo ''
  ]]

  ifProp PopupEffect.textToUse notEqual '' [[
    propPush PopupEffect.textToUse
    featPropPop PopupEffect.Graphing.text
    prop PopupEffect.textToUse setTo ''
  ]]
]]
every 1 runAtStart [[

  prop PopupEffect.countDown sub 1
  ifExpr {{ PopupEffect.getProp('countDown').value == 0 }} [[
    featCall PopupEffect.Population removeCharacter
  ]]
]]`
    },
    {
      "name": "Food",
      "scriptText": `# BLUEPRINT Food
# TAG isCharControllable true
# TAG isPozyxControllable true
# TAG isPTrackControllable false

# PROGRAM INIT

// Add features we need for this character
addFeature Costume
addFeature Physics

// Setup the costume
featProp Food.Costume.costumeName setTo 'DC_tomato.png'
featProp Food.Costume.scale setTo 0.2

// how expensive is the food
addProp wealth number 5
prop Food.wealth setMin 0
prop Food.wealth setMax 10

// how nutritional is the food
addProp nutritionLevel number 5
prop Food.nutritionLevel setMin 0
prop Food.nutritionLevel setMax 10

# PROGRAM UPDATE`
    },
    {
      "name": "PlagueVector",
      "scriptText": `# BLUEPRINT PlagueVector
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
// add features
addFeature Costume
addFeature Physics

// setup costume
featProp PlagueVector.Costume.costumeName setTo 'GEN_circle.json'
featProp PlagueVector.Costume.scale setTo 0.2
featCall PlagueVector.Costume setColorizeHSV 0 0 0.5
prop PlagueVector.alpha setTo 0
// Do they currently have the plague?
addProp hasPlague boolean true

# PROGRAM UPDATE
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body`
    }
  ],
  "instances": [
    {
      "id": "2",
      "label": "Wealthy Place",
      "bpid": "Place",
      "initScript": `prop x setTo -271.37
prop y setTo -272.55
prop wealth setTo 9
featCall Place.Costume setColorizeHSV 0.2 1 1
`
    },
    {
      "id": "3",
      "label": "Average Place",
      "bpid": "Place",
      "initScript": `prop x setTo 270.54
prop y setTo -273.32
prop wealth setTo 5
featCall Place.Costume setColorizeHSV 0 0 0.8
`
    },
    {
      "id": "4",
      "label": "Poor Place",
      "bpid": "Place",
      "initScript": `prop x setTo 268.95
prop y setTo 214.55
prop wealth setTo 2
featCall Place.Costume setColorizeHSV 0.2 0.2 0.8
`
    },
    {
      "id": "5",
      "label": "Great Food",
      "bpid": "Food",
      "initScript": `prop x setTo -342.15
prop y setTo -338.28
prop nutritionLevel setTo 9
prop wealth setTo 9
`
    },
    {
      "id": "6",
      "label": "Above Average Food",
      "bpid": "Food",
      "initScript": `prop x setTo 346.39
prop y setTo -297.27
prop nutritionLevel setTo 6
prop wealth setTo 6`
    },
    {
      "id": "7",
      "label": "Average Food",
      "bpid": "Food",
      "initScript": `prop x setTo 233.23
prop y setTo -343.12
prop nutritionLevel setTo 5
prop wealth setTo 5`
    },
    {
      "id": "8",
      "label": "Poor Food",
      "bpid": "Food",
      "initScript": `prop x setTo 290.87
prop y setTo 285.08
prop nutritionLevel setTo 2
prop wealth setTo 2`
    },
    {
      "id": "9",
      "label": "Poor Food",
      "bpid": "Food",
      "initScript": `prop x setTo 343.97
prop y setTo 201.80
prop nutritionLevel setTo 2
prop wealth setTo 2`
    },
    {
      "id": "10",
      "label": "Great Food",
      "bpid": "Food",
      "initScript": `prop x setTo -358.23
prop y setTo -259.79
prop nutritionLevel setTo 9
prop wealth setTo 10`
    }
  ]
}