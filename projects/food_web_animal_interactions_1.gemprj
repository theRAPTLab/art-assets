{
  "id": "food_web_animal_interactions_1",
  "label": "Terrestrial Ecosystem 1",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 3289600,
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [],
  "blueprints": [
    {
      "name": "Snake",
      "scriptText": `# BLUEPRINT Snake
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable false

// 🔎 WHAT IS A SNAKE?
// 🔎 SNAKES are ?????? who EAT ?????? to make SNAKE ENERGY through DIGESTION

// 🔎 WHAT IS A PRODUCER?
// 🔎 PRODUCERS are organisms that CONVERT SUN ENERGY into MATTER

// 🔎 WHAT IS A CONSUMER?
// 🔎 CONSUMERS are organisms that EAT PRODUCERS

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor
addFeature Physics
addFeature Touches
addFeature Graphing
addProp alive Boolean true

// Set the snake artwork and make it smaller since it is really big
featProp Snake.Costume.costumeName setTo 'FWE_snake.png'
// 🔎 WHAT SIZE IS THE SNAKE?
// ✏️ LETS CHANGE THIS:
// ✏️ HIGHER number => LARGER SNAKES
featProp Snake.Costume.scale setTo 0.2

// This tells any sankes that are controlled by the computer instead of by a student how to move 
featProp Snake.Movement.movementType setTo 'wander'
//featProp Snake.Movement.compassDirection setTo 'S'
featProp Snake.Movement.distance setTo 3
//featProp Snake.Movement.targetY setMax 0.7


// check when snakes interact with rabbits 
featCall Snake.Touches monitor 'Rabbit' b2b


// 🔎 WHAT DOES THIS DO?
// 🔎 How much ENERGY do SNAKES START with?
// ✏️ LETS CHANGE THIS:
// ✏️ HIGHER numbers => START with MORE ENERGY
addProp energyLevel Number 50

// 🔎 What is the MOST/LEAST amount of energy a snake can have?
prop Snake.energyLevel setMax 100
prop Snake.energyLevel setMin 0


// use a widget to depict the current energy, and color it green 
featProp Snake.Graphing.meterProp setTo 'energyLevel'
featProp Snake.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
// whenever the snake is touching a rabbit
when Snake touches Rabbit [[
  ifProp Snake.alive equal true [[
    ifProp Rabbit.alive equal true [[
      every 1 runAtStart [[
        featProp Snake.Costume.glow setTo 1
        
        // the rabbit dies when touched by a snake
        featProp Rabbit.Movement.movementType setTo 'stop'
        prop Rabbit.energyLevel setTo 0
        prop Rabbit.alive setTo false
        prop Rabbit.alpha setTo 0.3
        
        // 🔎 WHAT DOES THIS DO?
        // 🔎 How much ENERGY do SNAKE GAIN when eating?
        // ✏️ LETS CHANGE THIS:
        // ✏️ HIGHER numbers => GAIN MORE ENERGY
        prop Snake.energyLevel add 25
      ]]
    ]]
  ]]
]]  

// After the snake eats a rabbit, it will stop glowing 
when Snake lastTouches Rabbit [[
  featProp Snake.Costume.glow setTo 0
]]

every 1 runAtStart [[

  // 🔎 WHAT DOES THIS DO?
  // 🔎 How much ENERGY do SNAKES LOSE when moving?
  // ✏️ LETS CHANGE THIS:
  // ✏️ HIGHER numbers => LOSE MORE ENERGY
  prop Snake.energyLevel sub 3

  // WHAT DOES THIS DO?
  // This script changes the color of the snake's meter depending on how much energy it has
  // We can change the numbers if we want the colors to appear at different levels
  
  // The snake is feeling good, so make the meter green if the snake has over 50 energy (out of 100)
  ifProp Snake.energyLevel greaterThanOrEqual 50 [[
    featProp Snake.Costume.currentFrame setTo 0
    featProp Snake.Graphing.meterColor setTo 65280
  ]]
  // The snake is hungry, but not starving if it has less than 50, but more than 20, so make the meter orange
  ifProp Snake.energyLevel lessThan 50 [[
    featProp Snake.Costume.currentFrame setTo 1
    featProp Snake.Graphing.meterColor setTo 16737792
  ]]
  
  // The snake is really hungry, so make the meter red if we are under 20
  ifProp Snake.energyLevel lessThan 20 [[
    featProp Snake.Costume.currentFrame setTo 1
    featProp Snake.Graphing.meterColor setTo 16711680
  ]]
  // The snake is dead if it has 0 energy
  ifProp Snake.energyLevel equal 0 [[
    featProp Snake.Costume.currentFrame setTo 2
    prop Snake.alpha setTo 0.3
    prop Snake.alive setTo false
    featProp Snake.Movement.movementType setTo 'stop'
  ]]

  // set meter to mirror energyLevel
  featProp Snake.Graphing.meterProp setTo 'energyLevel'

]]`
    },
    {
      "name": "Reincarnator",
      "scriptText": `# BLUEPRINT Reincarnator
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics

featProp Reincarnator.Costume.costumeName setTo 'square.json'

featProp agent.Costume.scale setTo 0.4
# PROGRAM UPDATE
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]`
    },
    {
      "name": "Background",
      "scriptText": `# BLUEPRINT Background
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics


featProp Background.Costume.costumeName setTo 'FW1_day.png'
featProp Background.Costume.size setTo 800
propPush global.alphaSettingForAll
propPop Background.alpha
prop Background.alpha setTo 0.6

addProp state string 'daytime'
prop global.skyState setTo 'daytime'
addProp changed boolean false
prop Background.changed setTo false


# PROGRAM UPDATE
every 5 [[
  // insert code here
  // ifExpr {{Sky.getProp('state').value == 'daytime'}} [[
  ifProp Background.state equal 'daytime' [[
    // insert code here
    // featProp Sky.Costume.costumeName setTo 'dusk.png'
    featProp Background.Costume.costumeName setTo 'FW1_night.png'
    prop Background.state setTo 'nighttime'
    prop global.skyState setTo 'nighttime'
    prop Background.changed setTo true
  ]]
  ifExpr {{ Background.getProp('changed').value == false }} [[
    // ifProp Sky.changed equal false [[
    // insert code here
    ifProp Background.state equal 'nighttime' [[
      // insert code here
      featProp Background.Costume.costumeName setTo 'FW1_day.png'
      prop Background.state setTo 'daytime'
      prop global.skyState setTo 'daytime'
    ]]
  ]]
  prop Background.changed setTo false
]]`
    },
    {
      "name": "VeggieGarden",
      "scriptText": `# BLUEPRINT VeggieGarden
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Physics
addFeature Touches
addProp alive Boolean true

// set the costume
featProp VeggieGarden.Costume.costumeName setTo 'FWE_veggiegarden.png'
featProp VeggieGarden.Costume.scale setTo 0.3

// make sure we track interactions with the other creatures
featCall VeggieGarden.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 3/4 way
addProp energyLevel number 75
prop VeggieGarden.energyLevel setMax 100
prop VeggieGarden.energyLevel setMin 0

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp VeggieGarden.Graphing.meterProp setTo 'energyLevel'

featProp VeggieGarden.Graphing.meterColor setTo 65280

# PROGRAM EVENT
ifProp global.skyState equal 'daytime' [[
  every 1 [[
    prop VeggieGarden.energyLevel add 5
  ]]
]]

# PROGRAM UPDATE

every 1 runAtStart [[

  // decrease energy each tick, using the energyUse varable to determine how much
  ifProp VeggieGarden.energyLevel greaterThan 0 [[
    prop VeggieGarden.energyLevel sub 1
  ]]

  // this code sets the color of the energy bar based on how hungry the VeggieGarden is
  // set VeggieGarden energy meter color
  // doing great
  ifProp VeggieGarden.energyLevel greaterThanOrEqual 60 [[
    // Green
    featProp VeggieGarden.Graphing.meterColor setTo 65280
  ]]
  // needs some energy
  ifProp VeggieGarden.energyLevel lessThan 60 [[
    // Orange
    featProp VeggieGarden.Graphing.meterColor setTo 16737792
  ]]
  // in trouble
  ifProp VeggieGarden.energyLevel lessThan 30 [[
    // Red
    featProp VeggieGarden.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifProp VeggieGarden.energyLevel equal 0 [[
    featProp VeggieGarden.Costume.currentFrame setTo 2
    prop VeggieGarden.alpha setTo 0.3
    prop VeggieGarden.alive setTo false
    prop VeggieGarden.isInert setTo true
  ]]

  // avoid getting too small
  exprPush {{ 0.3 }}
  featPropPop VeggieGarden.Costume.scale

]]

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time`
    },
    {
      "name": "Clover",
      "scriptText": `# BLUEPRINT Clover
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume

// set the costume
featProp Clover.Costume.costumeName setTo 'FW1_clover.png'

// add other features
addFeature Physics
addFeature Touches

featProp Clover.Costume.scale setTo 0.2

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Clover.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 3/4 way
addProp energyLevel Number 70
prop Clover.energyLevel setMax 100
prop Clover.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make VeggieGarden lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Clover.Graphing.meterProp setTo 'energyLevel'

featProp Clover.Graphing.meterColor setTo 65280

# PROGRAM EVENT
ifProp global.skyState equal 'daytime' [[
  every 1 [[
    prop Clover.energyLevel add 5
  ]]
]]

# PROGRAM UPDATE
every 1 runAtStart [[

  // decrease energy each tick, using the energyUse varable to determine how much
  ifExpr {{ Clover.getProp('energyLevel').value > 0 }} [[
    exprPush {{ Clover.getProp('energyLevel').value - Clover.getProp('energyUse').value }}
    propPop Clover.energyLevel
  ]]

  // this code sets the color of the energy bar based on how hungry the clover is
  // set clover energy meter color
  // doing great
  ifProp Clover.energyLevel greaterThanOrEqual 60 [[
    // Green
    featProp Clover.Graphing.meterColor setTo 65280
  ]]
  // needs some energy
  ifProp Clover.energyLevel lessThan 60 [[
    // Orange
    featProp Clover.Graphing.meterColor setTo 16737792
  ]]
  // in trouble
  ifProp Clover.energyLevel lessThan 30 [[
    // Red
    featProp Clover.Graphing.meterColor setTo 16711680
  ]]
    
    // dead
  ifProp Clover.energyLevel equal 0 [[
    featProp Clover.Costume.currentFrame setTo 2
    prop Clover.alpha setTo 0.3
    prop Clover.alive setTo false
    prop Clover.isInert setTo true
    ]]

    // avoid getting too
    exprPush {{ .15 }}
    featPropPop Clover.Costume.scale

  ]]

`
    },
    {
      "name": "Caterpillar",
      "scriptText": `# BLUEPRINT Caterpillar
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable false

// 🔎 WHAT IS A CATERPILLAR?
// 🔎 CATERPILLARS are ?????? who EAT ?????? to make CATERPILLAR ENERGY through DIGESTION

// 🔎 WHAT IS A PRODUCER?
// 🔎 PRODUCERS are organisms that CONVERT SUN ENERGY into MATTER

// 🔎 WHAT IS A CONSUMER?
// 🔎 CONSUMERS are organisms that EAT PRODUCERS

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Graphing
addProp alive Boolean true

// Set the caterpillar artwork and make it smaller since it is really big
featProp Caterpillar.Costume.costumeName setTo 'FWE_caterpillar.png'
// 🔎 WHAT SIZE IS THE CATERPILLAR?
// ✏️ LETS CHANGE THIS:
// ✏️ HIGHER number => LARGER CATERPILLAR
featProp agent.Costume.scale setTo 0.1

featProp Caterpillar.Movement.movementType setTo 'wander'
featProp Caterpillar.Movement.compassDirection setTo 'W'
featProp Caterpillar.Movement.distance setTo 2
featProp Caterpillar.Movement.targetY setMax 0.7

// make sure we track interactions with the other creatures
featCall Caterpillar.Touches monitor 'VeggieGarden' b2b

// 🔎 WHAT DOES THIS DO?
// 🔎 How much ENERGY do CATERPILLARS START with?
// ✏️ LETS CHANGE THIS:
// ✏️ HIGHER numbers => START with MORE ENERGY
addProp energyLevel Number 50

// 🔎 What is the MOST/LEAST amount of energy a caterpillar can have?
prop Caterpillar.energyLevel setMax 100
prop Caterpillar.energyLevel setMin 0

// use a widget to depict the current energy, and color it green
featProp Caterpillar.Graphing.meterProp setTo 'energyLevel'
featProp Caterpillar.Graphing.meterColor setTo 65280

# PROGRAM UPDATE

// whenever a caterpillar touches a veggie garden
when Caterpillar touches VeggieGarden [[
  every 1 runAtStart [[
    // if the caterpillar and veggie garden are alive 
    ifProp Caterpillar.alive equal true [[
      ifProp VeggieGarden.alive equal true [[
        featProp Caterpillar.Costume.glow setTo 1
        
        // 🔎 WHAT DOES THIS DO?
        // 🔎 How much ENERGY do VEGGIE GARDEN LOSE when eaten?
        // ✏️ LETS CHANGE THIS:
        // ✏️ HIGHER numbers => LOSE MORE ENERGY
        prop VeggieGarden.energyLevel sub 10
        
        // 🔎 WHAT DOES THIS DO?
        // 🔎 How much ENERGY do CATERPILLARS GAIN when eating?
        // ✏️ LETS CHANGE THIS:
        // ✏️ HIGHER numbers => GAIN MORE ENERGY
        prop Caterpillar.energyLevel add 20
      ]]
    ]]
  ]]
]]

every 1 runAtStart [[

  // 🔎 WHAT DOES THIS DO?
  // 🔎 How much ENERGY do CATERPILLARS LOSE when moving?
  // ✏️ LETS CHANGE THIS:
  // ✏️ HIGHER numbers => LOSE MORE ENERGY
  prop Caterpillar.energyLevel sub 3

  // WHAT DOES THIS DO?
  // This script changes the color of the caterpillar's meter depending on how much energy it has
  // We can change the numbers if we want the colors to appear at different levels
  
  // The caterpillar is feeling good, so make the meter green if the caterpillar has over 50 energy (out of 100)
  ifProp Caterpillar.energyLevel greaterThanOrEqual 50 [[
    featProp Caterpillar.Costume.currentFrame setTo 0
    featProp Caterpillar.Graphing.meterColor setTo 65280
  ]]
  
  // The caterpillar is hungry, but not starving if it has less than 50, but more than 20, so make the meter orange
  ifProp Caterpillar.energyLevel lessThan 50 [[
    featProp Caterpillar.Costume.currentFrame setTo 1
    featProp Caterpillar.Graphing.meterColor setTo 16737792
  ]]
  
  // The caterpillar is really hungry, so make the meter red if we are under 20
  ifProp Caterpillar.energyLevel lessThan 20 [[
    featProp Caterpillar.Costume.currentFrame setTo 1
    featProp Caterpillar.Graphing.meterColor setTo 16711680
  ]]
  // The caterpillar is dead if it has 0 energy
  ifProp Caterpillar.energyLevel equal 0 [[
    featProp Caterpillar.Costume.currentFrame setTo 2
    prop Caterpillar.alpha setTo 0.3
    featProp Caterpillar.Movement.movementType setTo 'string'
  ]]

  // set meter to mirror energyLevel
  featProp Caterpillar.Graphing.meterProp setTo 'energyLevel'
]]


# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time`
    },
    {
      "name": "Robin",
      "scriptText": `# BLUEPRINT Robin
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable false

// 🔎 WHAT IS A ROBIN?
// 🔎 ROBINS are ?????? who EAT ?????? to make ROBIN ENERGY through DIGESTION

// 🔎 WHAT IS A PRODUCER?
// 🔎 PRODUCERS are organisms that CONVERT SUN ENERGY into MATTER

// 🔎 WHAT IS A CONSUMER?
// 🔎 CONSUMERS are organisms that EAT PRODUCERS

# PROGRAM INIT
// add the Caterpillar we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor
addFeature Physics
addFeature Touches
addFeature Graphing
addProp alive Boolean true

// Set the fish artwork and make it smaller since it is really big
featProp Robin.Costume.costumeName setTo 'FWE_robin.png'

// 🔎 WHAT SIZE IS THE ROBIN?
// ✏️ LETS CHANGE THIS:
// ✏️ HIGHER number => LARGER ROBINS
featProp Robin.Costume.scale setTo 0.2

// This tells any robins that are controlled by the computer instead of by a student how to move 
featProp Robin.Movement.movementType setTo 'wander'
featProp Robin.Movement.compassDirection setTo 'W'
// This is the speed the robin moves at when it is not controlled by students 
featProp Robin.Movement.distance setTo 3
featProp Robin.Movement.targetY setMax 0.7

// check with robins touch caterpillars
featCall Robin.Touches monitor 'Caterpillar' b2b

// 🔎 WHAT DOES THIS DO?
// 🔎 How much ENERGY do ROBINS START with?
// ✏️ LETS CHANGE THIS:
// ✏️ HIGHER numbers => START with MORE ENERGY
addProp energyLevel Number 50
// 🔎 What is the MOST/LEAST amount of energy a robin can have?
prop Robin.energyLevel setMax 100
prop Robin.energyLevel setMin 0


// use a widget to depict the current energy, and color it green
featProp Robin.Graphing.meterProp setTo 'energyLevel'
featProp Robin.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
// whenever a robin is touching a caterpillar 
when Robin touches Caterpillar [[
  // when the robin and the caterpillar are alive 
  ifProp Robin.alive equal true [[
    ifProp Caterpillar.alive equal true [[
      every 1 runAtStart [[
        featProp Robin.Costume.glow setTo 1
        
        // the caterpillar dies when touched by the robin
        featProp Caterpillar.Movement.movementType setTo 'stop'
        prop Caterpillar.alive setTo false
        prop Caterpillar.energyLevel setTo 0
        prop Caterpillar.alpha setTo 0.3
        
        // 🔎 WHAT DOES THIS DO?
        // 🔎 How much ENERGY do ROBIN GAIN when eating?
        // ✏️ LETS CHANGE THIS:
        // ✏️ HIGHER numbers => GAIN MORE ENERGY
        prop Robin.energyLevel add 25
      ]]
    ]]
  ]]
]]


// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time
every 1 runAtStart [[
  // 🔎 WHAT DOES THIS DO?
  // 🔎 How much ENERGY do ROBINS LOSE when flying?
  // ✏️ LETS CHANGE THIS:
  // ✏️ HIGHER numbers => LOSE MORE ENERGY
  prop Robin.energyLevel sub 3

  // WHAT DOES THIS DO?
  // This script changes the color of the robin's meter depending on how much energy it has
  // We can change the numbers if we want the colors to appear at different levels
  
  // The robin is feeling good, so make the meter green if the robin has over 50 energy (out of 100)
  ifProp Robin.energyLevel greaterThanOrEqual 50[[
    featProp Robin.Costume.currentFrame setTo 0
    featProp Robin.Graphing.meterColor setTo 65280
  ]]
  
  // The robin is hungry, but not starving if it has less than 50, but more than 20, so make the meter orange
  ifProp Robin.energyLevel lessThan 50 [[
    featProp Robin.Costume.currentFrame setTo 1
    featProp Robin.Graphing.meterColor setTo 16737792
  ]]
  
  // The robin is really hungry, so make the meter red if we are under 20
  ifProp Robin.energyLevel lessThan 20 [[
    featProp Robin.Costume.currentFrame setTo 1
    // Red
    featProp Robin.Graphing.meterColor setTo 16711680
  ]]
  
  // The robin is dead if it has 0 energy
  ifProp Robin.energyLevel equal 0 [[
    featProp Robin.Costume.currentFrame setTo 2
    prop Robin.alpha setTo 0.3
    prop Robin.alive setTo false
    featProp Robin.Movement.movementType setTo 'stop'
  ]]

  // set meter to mirror energyLevel
  featProp Robin.Graphing.meterProp setTo 'energyLevel'

]]`
    },
    {
      "name": "Hawk",
      "scriptText": `# BLUEPRINT Hawk
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable false

// 🔎 WHAT IS A HAWK?
// 🔎 HAWKS are CONSUMERS who EAT ??????? to make HAWK ENERGY through DIGESTION

// 🔎 WHAT IS A PRODUCER?
// 🔎 PRODUCERS are organisms that CONVERT SUN ENERGY into MATTER

// 🔎 WHAT IS A CONSUMER?
// 🔎 CONSUMERS are organisms that EAT PRODUCERS

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Graphing
addProp alive Boolean true

// Set the hawk artwork and make it 1/2 size since it is really big
featProp Hawk.Costume.costumeName setTo 'FWE_Hawk.png'

// 🔎 WHAT SIZE IS THE HAWK?
// ✏️ LETS CHANGE THIS:
// ✏️ HIGHER number => LARGER HAWKS
featProp Hawk.Costume.scale setTo 0.15

// This tells the hawks how to move
featProp Hawk.Movement.compassDirection setTo 'west'
featProp Hawk.Movement.movementType setTo 'wander'
featProp Hawk.Movement.distance setTo 5
featCall Hawk.Movement setRandomDirection

// // Check when the hawk touches other organisms so it can eat it
featCall Hawk.Touches monitor 'Snake' b2b
featCall Hawk.Touches monitor 'Robin' b2b
featCall Hawk.Touches monitor 'Rabbit' b2b


// 🔎 WHAT DOES THIS DO?
// 🔎 How much ENERGY do HAWKS START with?
// ✏️ LETS CHANGE THIS:
// ✏️ HIGHER numbers => START with MORE ENERGY
addProp energyLevel Number 50

// 🔎 What is the MOST/LEAST amount of energy an hawk can have?
prop Hawk.energyLevel setMax 100
prop Hawk.energyLevel setMin 0

// use a widget to depict the current energy, and color it green (maybe change later)

featProp Hawk.Graphing.meterProp setTo 'energyLevel'
featProp Hawk.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
// whenever the hawk is touching a snake
when Hawk touches Snake [[
  every 1 runAtStart [[
    // if the hawk and the snake are alive
    ifProp Hawk.alive equal true [[
      ifProp Snake.alive equal true [[
        featProp Hawk.Costume.glow setTo 1
        // the snake dies when touched by the hawk
        featProp Snake.Movement.movementType setTo 'stop'
        prop Snake.alive setTo false
        prop Snake.alpha setTo 0.3
        prop Snake.energyLevel setTo 0

        // 🔎 WHAT DOES THIS DO?
        // 🔎 How much ENERGY do HAWKS GAIN when eating a snake?
        // ✏️ LETS CHANGE THIS:
        // ✏️ HIGHER numbers => GAIN MORE ENERGY
        prop Hawk.energyLevel add 25
      ]]
    ]]
  ]]
]]

// After the hawk eats a snake, it will stop glowing 
when Hawk lastTouches Snake [[
  featProp Hawk.Costume.glow setTo 0
]]

// whenever the hawk is touching a robin
when Hawk touches Robin [[
  every 1 runAtStart [[
    // if the hawk and the snake are alive
    ifProp Hawk.alive equal true [[
      ifProp Robin.alive equal true [[
        featProp Hawk.Costume.glow setTo 1
        // the robin dies when touched by the hawk
        featProp Robin.Movement.movementType setTo 'stop'
        prop Robin.alive setTo false
        prop Robin.alpha setTo 0.3
        prop Robin.energyLevel setTo 0
        

        // 🔎 WHAT DOES THIS DO?
        // 🔎 How much ENERGY do HAWKS GAIN when eating a robin?
        // ✏️ LETS CHANGE THIS:
        // ✏️ HIGHER numbers => GAIN MORE ENERGY
        prop Hawk.energyLevel add 25

      ]]
    ]]
  ]]
]]

// After the hawk eats a robin, it will stop glowing 
when Hawk lastTouches Robin [[
  featProp Hawk.Costume.glow setTo 0
]]

// whenever the hawk is touching a rabbit
when Hawk touches Rabbit [[
  every 1 runAtStart [[
    // if the hawk and the rabbit are alive
    ifProp Hawk.alive equal true [[
      ifProp Rabbit.alive equal true [[
        featProp Hawk.Costume.glow setTo 1
        // the rabbit dies when touched by the hawk
        featProp Rabbit.Movement.movementType setTo 'stop'
        prop Rabbit.alive setTo false
        prop Rabbit.alpha setTo 0.3
        prop Rabbit.energyLevel setTo 0

        // 🔎 WHAT DOES THIS DO?
        // 🔎 How much ENERGY do HAWKS GAIN when eating a rabbit?
        // ✏️ LETS CHANGE THIS:
        // ✏️ HIGHER numbers => GAIN MORE ENERGY
        prop Hawk.energyLevel add 25
      ]]
    ]]
  ]]
]]

// After the hawk eats a rabbit, it will stop glowing 
when Hawk lastTouches Rabbit [[
  featProp Hawk.Costume.glow setTo 0
]]

every 1 runAtStart [[

  // 🔎 WHAT DOES THIS DO?
  // 🔎 How much ENERGY do HAWKS LOSE when flying?
  // ✏️ LETS CHANGE THIS:
  // ✏️ HIGHER numbers => LOSE MORE ENERGY
  prop Hawk.energyLevel sub 2

  // WHAT DOES THIS DO?
  // This script changes the color of the hawk's meter depending on how much energy it has
  // We can change the numbers if we want the colors to appear at different levels

  // The hawk is feeling good, so make the meter green if the hawk has over 50 energy (out of 100)
  ifProp Hawk.energyLevel greaterThanOrEqual 50 [[
    featProp Hawk.Costume.currentFrame setTo 0
    featProp Hawk.Graphing.meterColor setTo 65280
  ]]

  // The hawk is hungry, but not starving if it has less than 50, but more than 20, so make the meter orange
  ifProp Hawk.energyLevel lessThan 50 [[
    featProp Hawk.Costume.currentFrame setTo 1
    featProp Hawk.Graphing.meterColor setTo 16737792
  ]]

  // The hawk is really hungry, so make the meter red if we are under 20
  ifProp Hawk.energyLevel lessThan 20 [[
    featProp Hawk.Costume.currentFrame setTo 1
    featProp Hawk.Graphing.meterColor setTo 16711680
  ]]
  // The hawk dies if it has 0 energy
  ifProp Hawk.energyLevel equal 0 [[
    prop Hawk.alive setTo false
    // change the artwork to show it is dead
    featProp Hawk.Costume.currentFrame setTo 2
    prop Hawk.alpha setTo 0.3
    prop Hawk.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Hawk.Graphing.meterProp setTo 'energyLevel'

]]`
    },
    {
      "name": "Rabbit",
      "scriptText": `# BLUEPRINT Rabbit
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable true

// 🔎 WHAT IS A RABBIT?
// 🔎 RABBITS are ???????? who EAT ??????? to make RABBIT ENERGY through DIGESTION

// 🔎 WHAT IS A PRODUCER?
// 🔎 PRODUCERS are organisms that CONVERT SUN ENERGY into MATTER

// 🔎 WHAT IS A CONSUMER?
// 🔎 CONSUMERS are organism that cannot make its own food
// 🔎 and must eat other plants or animals to get energy


# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor
addFeature Physics
addFeature Touches
addFeature Graphing
addProp alive Boolean true


// set the rabbit artwork and make it smaller
featProp Rabbit.Costume.costumeName setTo 'FW1_rabbit.png'

// 🔎 WHAT SIZE IS THE RABBIT?
// ✏️ LETS CHANGE THIS:
// ✏️ HIGHER number => LARGER RABBIT
featProp agent.Costume.scale setTo 0.2

// if the computer controls the rabbit, this tells the rabbit how to move and how quickly
featProp Rabbit.Movement.movementType setTo 'wander'
featProp Rabbit.Movement.distance setTo 4
// featProp Rabbit.Movement.targetY setMax 0.7



// make sure we track interactions with the other creatures
featCall Rabbit.Touches monitor 'VeggieGarden' b2b
featCall Rabbit.Touches monitor 'Clover' b2b
featCall Rabbit.Touches monitor 'Reincarnator' b2b

// 🔎 WHAT DOES THIS DO?
// 🔎 how much does energy does each rabbit START with?
// ✏️ LETS CHANGE THIS:
addProp energyLevel Number 50

// 🔎 what is the MOST/LEAST amount of energy a rabbit can have?
prop Rabbit.energyLevel setMax 100
prop Rabbit.energyLevel setMin 0


// use a widget to depict the current energy, and color it green (maybe change later)
featProp Rabbit.Graphing.meterProp setTo 'energyLevel'
featProp Rabbit.Graphing.meterColor setTo 65280

# PROGRAM UPDATE

// do this whenever a rabbit touches a clover
when Rabbit touches Clover [[
  every 1 runAtStart [[
  // the rabbit and the clover must be alive
    ifProp Rabbit.alive equal true [[
      ifProp Clover.alive equal true [[
      
        featProp Rabbit.Costume.glow setTo 1
        
        // 🔎 WHAT DOES THIS DO?
        // 🔎 How much ENERGY do CLOVER LOSE when eaten?
        // ✏️ LETS CHANGE THIS:
        // ✏️ HIGHER numbers => LOSE MORE ENERGY
        prop Clover.energyLevel sub 10
        
        // 🔎 WHAT DOES THIS DO?
        // 🔎 How much ENERGY do RABBITS GAIN when eating?
        // ✏️ LETS CHANGE THIS:
        // ✏️ HIGHER numbers => GAIN MORE ENERGY
        prop Rabbit.energyLevel add 10
      ]]
    ]]
  ]]
]]

when Rabbit touches VeggieGarden [[
  every 1 runAtStart [[
    ifProp Rabbit.alive equal true [[
      ifProp VeggieGarden.alive equal true [[
        featProp Rabbit.Costume.glow setTo 1
        
        // 🔎 WHAT DOES THIS DO?
        // 🔎 How much ENERGY do VEGGIE GARDEN LOSE when eaten?
        // ✏️ LETS CHANGE THIS:
        // ✏️ HIGHER numbers => LOSE MORE ENERGY
        prop VeggieGarden.energyLevel sub 10
        
        // 🔎 WHAT DOES THIS DO?
        // 🔎 How much ENERGY do RABBITS GAIN when eating?
        // ✏️ LETS CHANGE THIS:
        // ✏️ HIGHER numbers => GAIN MORE ENERGY
        prop Rabbit.energyLevel add 20
        
      ]]
    ]]
  ]]
]]

// This script flips the artwork depending on whether the rabbit is moving left or right
ifFeatProp Rabbit.Movement.compassDirection equal 'E' [[
  featProp Rabbit.Costume.flipX setTo false
]]
ifFeatProp Rabbit.Movement.compassDirection equal 'W' [[
  featProp Rabbit.Costume.flipX setTo true
]]

  every 1 runAtStart [[
  
    // 🔎 WHAT DOES THIS DO?
    // 🔎 How much ENERGY do RABBITS LOSE when moving?
    // ✏️ LETS CHANGE THIS:
    // ✏️ HIGHER numbers => LOSE MORE ENERGY
    prop Rabbit.energyLevel sub 3
    
    // 🔎 WHAT DOES THIS DO?
    // This script changes the color of the Rabbit's meter depending on how much energy it has
    // We can change the numbers if we want the colors to appear at different levels


    // The rabbit is feeling good, so make the meter green if the rabbit has over 50 energy (out of 100)
    ifProp Rabbit.energyLevel greaterThanOrEqual 50 [[
      featProp Rabbit.Costume.currentFrame setTo 0
      featProp Rabbit.Graphing.meterColor setTo 65280
    ]]

    // The rabbit is hungry, but not starving if it has less than 50, but more than 20, so make the meter orange
    ifProp Rabbit.energyLevel lessThan 50 [[
      featProp Rabbit.Costume.currentFrame setTo 1
      featProp Rabbit.Graphing.meterColor setTo 16737792
    ]]

    // The rabbit is really hungry, so make the meter red if we are under 20
    ifProp Rabbit.energyLevel lessThan 20 [[
      featProp Rabbit.Costume.currentFrame setTo 1
      featProp Rabbit.Graphing.meterColor setTo 16711680
    ]]

    // The rabbit is dead if it has 0 energy
    ifProp Rabbit.energyLevel equal 0 [[
      featProp Rabbit.Costume.currentFrame setTo 2
      prop Rabbit.alpha setTo 0.3
      featProp Rabbit.Movement.movementType setTo 'stop'
    ]]
    // set meter to mirror energyLevel
    featProp Rabbit.Graphing.meterProp setTo 'energyLevel'
  ]]


// when the rabbit touches the reincarnator 
  when Rabbit touches Reincarnator [[
    ifExpr {{ Rabbit.getProp('alive').value == false }} [[
      featProp Rabbit.Costume.glow setTo 1
      prop Rabbit.alive setTo true
      prop Rabbit.alpha setTo 1
      prop Rabbit.energyLevel setTo 50
    ]]
  ]]




// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time`
    },
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

# PROGRAM INIT
addFeature Population
prop global.visible setTo false
addProp alphaSettingForAll number 0.5
addProp skyState string 'daytime'
addProp day boolean true

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Pesticide",
      "scriptText": `# BLUEPRINT Pesticide
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Pesticide.Costume.costumeName setTo 'FW1_pesticide.png'

// add other features
addFeature Physics
addFeature Touches

featProp Pesticide.Costume.scale setTo 0.15

featProp Pesticide.Movement.compassDirection setTo 'west'
featProp Pesticide.Movement.movementType setTo 'wander'
featProp Pesticide.Movement.distance setTo 5
featCall Pesticide.Movement setRandomDirection

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Pesticide.Touches monitor 'Hawk' b2b
featCall Pesticide.Touches monitor 'Snake' b2b
featCall Pesticide.Touches monitor 'Robin' b2b
featCall Pesticide.Touches monitor 'Mouse' b2b
featCall Pesticide.Touches monitor 'Gopher' b2b
featCall Pesticide.Touches monitor 'Rabbit' b2b
featCall Pesticide.Touches monitor 'Snail' b2b
featCall Pesticide.Touches monitor 'Caterpillar' b2b
featCall Pesticide.Touches monitor 'Beetle' b2b
featCall Pesticide.Touches monitor 'Snake' b2b
featCall Pesticide.Touches monitor 'Weeds' b2b
featCall Pesticide.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 100
prop Pesticide.energyLevel setMax 100
prop Pesticide.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Pesticide lose energy faster (or slower)
addProp energyUse Number 0

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Pesticide.Graphing.meterProp setTo 'energyLevel'

featProp Pesticide.Graphing.meterColor setTo 65280

# PROGRAM EVENT

when Pesticide touches Snake [[
  every 1 [[
    ifExpr {{ Pesticide.getProp('alive').value == true &&  Snake.getProp('alive').value == true }} [[
      featProp Pesticide.Costume.glow setTo 1
      prop Snake.energyUse setTo 20
      prop Pesticide.energyLevel sub 10

    ]]
  ]]

  when Pesticide touches Robin [[
    every 1 [[
      ifExpr {{ Pesticide.getProp('alive').value == true &&  Robin.getProp('alive').value == true }} [[
        featProp Pesticide.Costume.glow setTo 1
        prop Pesticide.energyLevel sub 10
        prop Robin.energyUse setTo 20
      ]]
    ]]
  ]]

  when Pesticide touches Mouse [[
    every 1 [[
      ifExpr {{ Pesticide.getProp('alive').value == true &&  Mouse.getProp('alive').value == true }} [[
        featProp Pesticide.Costume.glow setTo 1
        prop Pesticide.energyLevel sub 10
        prop Mouse.energyUse setTo 20
      ]]
    ]]
  ]]

  when Pesticide touches Gopher [[
    every 1 [[
      ifExpr {{ Pesticide.getProp('alive').value == true &&  Gopher.getProp('alive').value == true }} [[
        featProp Pesticide.Costume.glow setTo 1
        prop Pesticide.energyLevel sub 10
        prop Gopher.energyUse setTo 20
      ]]
    ]]
  ]]

  when Pesticide touches Rabbit [[
    every 1 [[
      ifExpr {{ Pesticide.getProp('alive').value == true &&  Rabbit.getProp('alive').value == true }} [[
        featProp Pesticide.Costume.glow setTo 1
        prop Pesticide.energyLevel sub 10
        prop Rabbit.energyUse setTo 20
      ]]
    ]]
  ]]

  when Pesticide touches Hawk [[
    every 1 [[
      ifExpr {{ Pesticide.getProp('alive').value == true &&  Hawk.getProp('alive').value == true }} [[
        featProp Pesticide.Costume.glow setTo 1
        prop Pesticide.energyLevel sub 10
        prop Hawk.energyUse setTo 20
      ]]
    ]]
  ]]

  when Pesticide touches Snail [[
    every 1 [[
      ifExpr {{ Pesticide.getProp('alive').value == true &&  Snail.getProp('alive').value == true }} [[
        featProp Pesticide.Costume.glow setTo 1
        prop Pesticide.energyLevel sub 10
        prop Snail.energyUse setTo 20
      ]]
    ]]
  ]]

  when Pesticide touches Caterpillar [[
    every 1 [[
      ifExpr {{ Pesticide.getProp('alive').value == true &&  Caterpillar.getProp('alive').value == true }} [[
        featProp Pesticide.Costume.glow setTo 1
        prop Pesticide.energyLevel sub 10
        prop Caterpillar.energyUse setTo 20
      ]]
    ]]
  ]]

  when Pesticide touches Beetle [[
    every 1 [[
      ifExpr {{ Pesticide.getProp('alive').value == true &&  Beetle.getProp('alive').value == true }} [[
        featProp Pesticide.Costume.glow setTo 1
        prop Pesticide.energyLevel sub 10
        prop Beetle.energyUse setTo 20
      ]]
    ]]
  ]]

  when Pesticide touches Weeds [[
    every 1 [[
      ifExpr {{ Pesticide.getProp('alive').value == true &&  Weeds.getProp('alive').value == true }} [[
        featProp Pesticide.Costume.glow setTo 1
        prop Pesticide.energyLevel sub 10
        prop Weeds.energyUse setTo 20
      ]]
    ]]
  ]]

  when Pesticide touches Reincarnator [[
    ifExpr {{ Pesticide.getProp('alive').value == false }} [[
      featProp Pesticide.Costume.glow setTo 1
      prop Pesticide.alive setTo true
      prop Pesticide.alpha setTo 1
    ]]
  ]]

]]

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time
every 1 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Pesticide.getProp('energyLevel').value - Pesticide.getProp('energyUse').value }}
  propPop Pesticide.energyLevel

  // this code sets the color of the energy bar based on how hungry the Pesticide is
  // sated
  ifExpr {{ Pesticide.getProp('energyLevel').value > 50 }} [[
    featProp Pesticide.Costume.currentFrame setTo 0
    // Green
    featProp Pesticide.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Pesticide.getProp('energyLevel').value < 50 }} [[
    featProp Pesticide.Costume.currentFrame setTo 1
    // Orange
    featProp Pesticide.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Pesticide.getProp('energyLevel').value < 20 }} [[
    featProp Pesticide.Costume.currentFrame setTo 1
    // Red
    featProp Pesticide.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Pesticide.getProp('energyLevel').value < 1 }} [[
    featProp Pesticide.Costume.currentFrame setTo 2
    prop Pesticide.alpha setTo 0.3
    prop Pesticide.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Pesticide.Graphing.meterProp setTo 'energyLevel'

]]`
    },
    {
      "name": "Timer",
      "scriptText": `# BLUEPRINT Timer
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature Graphing
addFeature Costume
featProp Timer.Costume.costumeName setTo 'GEN_onexone.json'
addProp time number 0
prop Timer.zIndex setTo 500

featProp Timer.Graphing.text setTo 'Time: 0'

# PROGRAM UPDATE
every 1 runAtStart [[
  prop Timer.time add 1
  exprPush {{ 'Time: ' + agent.getProp('time').value }}
  featPropPop Timer.Graphing.text
]]`
    },
    {
      "name": "RabbitPopulation",
      "scriptText": `# BLUEPRINT RabbitPopulation
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM DEFINE
addFeature Costume
featProp RabbitPopulation.Costume.costumeName setTo 'GEN_onexone.json'

addFeature Graphing
addFeature Population
featProp RabbitPopulation.Graphing.isLargeGraphic setTo true

// set y axis to starting # of Rabbits
addProp totalRabbitPop number 3


featProp RabbitPopulation.Graphing.graphProp setTo 'totalRabbitPop'

# PROGRAM INIT
// make sure something displays with some initial text, on bottom right at first
prop RabbitPopulation.x setTo 495
prop RabbitPopulation.y setTo 187
prop RabbitPopulation.zIndex setTo 300

featProp RabbitPopulation.Graphing.text setTo 'Rabbit Population'

# PROGRAM EVENT

onEvent Tick [[


  // count up the Bunny
  featProp RabbitPopulation.Population.monitoredCharacter setTo 'Rabbit'
  featProp RabbitPopulation.Population.monitoredCharacterProp setTo 'alive'
  featCall RabbitPopulation.Population countCharacterProp
  exprPush {{ agent.getFeatProp('Population', 'sum').value }}
  propPop RabbitPopulation.totalRabbitPop

  // graph the sum
  exprPush {{ agent.getProp('totalRabbitPop').value }}
  propPop RabbitPopulation.totalRabbitPop


]]

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "RobinPopulation",
      "scriptText": `# BLUEPRINT RobinPopulation
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM DEFINE
addFeature Costume
featProp RobinPopulation.Costume.costumeName setTo 'GEN_onexone.json'

addFeature Graphing
addFeature Population
featProp RobinPopulation.Graphing.isLargeGraphic setTo true

// set y axis to starting # of Robins
addProp totalRobinPop number 2


featProp RobinPopulation.Graphing.graphProp setTo 'totalRobinPop'

# PROGRAM INIT
// make sure something displays with some initial text, on bottom right at first
prop RobinPopulation.x setTo 495
prop RobinPopulation.y setTo 187
prop RobinPopulation.zIndex setTo 300

featProp RobinPopulation.Graphing.text setTo 'Robin Population'

# PROGRAM EVENT

onEvent Tick [[


  // count up the RobinRobinPopulation
  featProp RobinPopulation.Population.monitoredCharacter setTo 'Robin'
  featProp RobinPopulation.Population.monitoredCharacterProp setTo 'alive'
  featCall RobinPopulation.Population countCharacterProp
  exprPush {{ agent.getFeatProp('Population', 'sum').value }}
  propPop RobinPopulation.totalRobinPop

  // graph the sum
  exprPush {{ agent.getProp('totalRobinPop').value }}
  propPop RobinPopulation.totalRobinPop


]]

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "SnakePopulation",
      "scriptText": `# BLUEPRINT SnakePopulation
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM DEFINE
addFeature Costume
featProp SnakePopulation.Costume.costumeName setTo 'onexone.json'

addFeature Graphing
addFeature Population
featProp SnakePopulation.Graphing.isLargeGraphic setTo true

// set y axis to starting # of Snakes
addProp totalSnakePop number 2


featProp SnakePopulation.Graphing.graphProp setTo 'totalSnakePop'

# PROGRAM INIT
// make sure something displays with some initial text, on bottom right at first
prop SnakePopulation.x setTo 495
prop SnakePopulation.y setTo 187
prop SnakePopulation.zIndex setTo 300

featProp SnakePopulation.Graphing.text setTo 'Snake Population'

# PROGRAM EVENT

onEvent Tick [[


  // count up the snake
  featProp SnakePopulation.Population.monitoredCharacter setTo 'Snake'
  featProp SnakePopulation.Population.monitoredCharacterProp setTo 'alive'
  featCall SnakePopulation.Population countCharacterProp
  exprPush {{ agent.getFeatProp('Population', 'sum').value }}
  propPop SnakePopulation.totalSnakePop

  // graph the sum
  exprPush {{ agent.getProp('totalSnakePop').value }}
  propPop SnakePopulation.totalSnakePop


]]

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "CaterpillarPopulation",
      "scriptText": `# BLUEPRINT CaterpillarPopulation
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM DEFINE
addFeature Costume
featProp CaterpillarPopulation.Costume.costumeName setTo 'GEN_onexone.json'

addFeature Graphing
addFeature Population
featProp CaterpillarPopulation.Graphing.isLargeGraphic setTo true

// set y axis to starting # of Caterpillars
addProp totalCaterpillarPop number 2


featProp CaterpillarPopulation.Graphing.graphProp setTo 'totalCaterpillarPop'

# PROGRAM INIT
// make sure something displays with some initial text, on bottom right at first
prop CaterpillarPopulation.x setTo 495
prop CaterpillarPopulation.y setTo 187
prop CaterpillarPopulation.zIndex setTo 300

featProp CaterpillarPopulation.Graphing.text setTo 'Caterpillar Population'

# PROGRAM EVENT

onEvent Tick [[


  // count up the Caterpillar
  featProp CaterpillarPopulation.Population.monitoredCharacter setTo 'Caterpillar'
  featProp CaterpillarPopulation.Population.monitoredCharacterProp setTo 'alive'
  featCall CaterpillarPopulation.Population countCharacterProp
  exprPush {{ agent.getFeatProp('Population', 'sum').value }}
  propPop CaterpillarPopulation.totalCaterpillarPop

  // graph the sum
  exprPush {{ agent.getProp('totalCaterpillarPop').value }}
  propPop CaterpillarPopulation.totalCaterpillarPop


]]

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "VeggieGardenPopulation",
      "scriptText": `# BLUEPRINT VeggieGardenPopulation
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM DEFINE
addFeature Costume
featProp VeggieGardenPopulation.Costume.costumeName setTo 'GEN_onexone.json'

addFeature Graphing
addFeature Population
featProp VeggieGardenPopulation.Graphing.isLargeGraphic setTo true

// set y axis to starting # of VeggieGardens
addProp totalVeggieGardenPop number 4


featProp VeggieGardenPopulation.Graphing.graphProp setTo 'totalVeggieGardenPop'

# PROGRAM INIT
// make sure something displays with some initial text, on bottom right at first
prop VeggieGardenPopulation.x setTo 495
prop VeggieGardenPopulation.y setTo 187
prop VeggieGardenPopulation.zIndex setTo 300

featProp VeggieGardenPopulation.Graphing.text setTo 'VeggieGarden Population'

# PROGRAM EVENT

onEvent Tick [[


  // count up the VeggieGarden
  featProp VeggieGardenPopulation.Population.monitoredCharacter setTo 'VeggieGarden'
  featProp VeggieGardenPopulation.Population.monitoredCharacterProp setTo 'alive'
  featCall VeggieGardenPopulation.Population countCharacterProp
  exprPush {{ agent.getFeatProp('Population', 'sum').value }}
  propPop VeggieGardenPopulation.totalVeggieGardenPop

  // graph the sum
  exprPush {{ agent.getProp('totalVeggieGardenPop').value }}
  propPop VeggieGardenPopulation.totalVeggieGardenPop


]]

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "CloverPopulation",
      "scriptText": `# BLUEPRINT CloverPopulation
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM DEFINE
addFeature Costume
featProp CloverPopulation.Costume.costumeName setTo 'GEN_onexone.json'

addFeature Graphing
addFeature Population
featProp CloverPopulation.Graphing.isLargeGraphic setTo true

// set y axis to starting # of Clovers
addProp totalCloverPop number 2


featProp CloverPopulation.Graphing.graphProp setTo 'totalCloverPop'

# PROGRAM INIT
// make sure something displays with some initial text, on bottom right at first
prop CloverPopulation.x setTo 495
prop CloverPopulation.y setTo 187
prop CloverPopulation.zIndex setTo 300

featProp CloverPopulation.Graphing.text setTo 'Clover Population'

# PROGRAM EVENT

onEvent Tick [[


  // count up the Clover
  featProp CloverPopulation.Population.monitoredCharacter setTo 'Clover'
  featProp CloverPopulation.Population.monitoredCharacterProp setTo 'alive'
  featCall CloverPopulation.Population countCharacterProp
  exprPush {{ agent.getFeatProp('Population', 'sum').value }}
  propPop CloverPopulation.totalCloverPop

  // graph the sum
  exprPush {{ agent.getProp('totalCloverPop').value }}
  propPop CloverPopulation.totalCloverPop


]]

// required directive
# PROGRAM UPDATE`
    }
  ],
  "instances": [
    {
      "id": "13",
      "label": "Background13",
      "bpid": "Background",
      "initScript": `prop x setTo -0.99
prop y setTo -28.52`
    },
    {
      "id": "79",
      "label": "Timer79",
      "bpid": "Timer",
      "initScript": `prop x setTo -360.57
prop y setTo -398.91`
    },
    {
      "id": "94",
      "label": "VeggieGarden94",
      "bpid": "VeggieGarden",
      "initScript": `prop x setTo -169.45
prop y setTo 281.8`
    },
    {
      "id": "96",
      "label": "VeggieGarden96",
      "bpid": "VeggieGarden",
      "initScript": `prop x setTo -222.6
prop y setTo -118.57`
    },
    {
      "id": "97",
      "label": "VeggieGarden97",
      "bpid": "VeggieGarden",
      "initScript": `prop x setTo 161.31
prop y setTo -34.45`
    },
    {
      "id": "98",
      "label": "Rabbit98",
      "bpid": "Rabbit",
      "initScript": `prop x setTo 0
prop y setTo -20`
    },
    {
      "id": "99",
      "label": "Rabbit99",
      "bpid": "Rabbit",
      "initScript": `prop x setTo -282.79
prop y setTo 66.07`
    },
    {
      "id": "100",
      "label": "Rabbit100",
      "bpid": "Rabbit",
      "initScript": `prop x setTo 245.88
prop y setTo -101.87`
    },
    {
      "id": "101",
      "label": "Rabbit101",
      "bpid": "Rabbit",
      "initScript": `prop x setTo 214.13
prop y setTo 77.55`
    },
    {
      "id": "102",
      "label": "Rabbit102",
      "bpid": "Rabbit",
      "initScript": `prop x setTo -280.98
prop y setTo -44.96`
    },
    {
      "id": "103",
      "label": "Snake103",
      "bpid": "Snake",
      "initScript": `prop x setTo 290.37
prop y setTo -226.99`
    },
    {
      "id": "104",
      "label": "Snake104",
      "bpid": "Snake",
      "initScript": `prop x setTo -166.44
prop y setTo 152.86`
    },
    {
      "id": "105",
      "label": "Snake105",
      "bpid": "Snake",
      "initScript": `prop x setTo 72.08
prop y setTo 111.01`
    },
    {
      "id": "106",
      "label": "Snake106",
      "bpid": "Snake",
      "initScript": `prop x setTo -315.5
prop y setTo -216.18`
    },
    {
      "id": "107",
      "label": "Robin107",
      "bpid": "Robin",
      "initScript": `prop x setTo -52.02
prop y setTo 129.82`
    },
    {
      "id": "108",
      "label": "Robin108",
      "bpid": "Robin",
      "initScript": `prop x setTo 170.72
prop y setTo 194.36`
    },
    {
      "id": "109",
      "label": "Hawk109",
      "bpid": "Hawk",
      "initScript": `prop x setTo 111.57
prop y setTo -283.27`
    },
    {
      "id": "110",
      "label": "Caterpillar110",
      "bpid": "Caterpillar",
      "initScript": `prop x setTo -14
prop y setTo -5`
    },
    {
      "id": "111",
      "label": "Caterpillar111",
      "bpid": "Caterpillar",
      "initScript": `prop x setTo -2
prop y setTo -8`
    },
    {
      "id": "112",
      "label": "Caterpillar112",
      "bpid": "Caterpillar",
      "initScript": `prop x setTo -32
prop y setTo -9`
    },
    {
      "id": "113",
      "label": "Clover113",
      "bpid": "Clover",
      "initScript": `prop x setTo -21
prop y setTo -32`
    },
    {
      "id": "114",
      "label": "Clover114",
      "bpid": "Clover",
      "initScript": `prop x setTo 282.34
prop y setTo 233.63`
    },
    {
      "id": "115",
      "label": "Clover115",
      "bpid": "Clover",
      "initScript": `prop x setTo -95.07
prop y setTo -260.54`
    }
  ]
}