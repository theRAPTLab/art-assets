{
  "id": "wetlands_beavers_energy",
  "label": "Wetlands: Beavers Energy",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": "0x8A9A5B",
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [
    {
      "initScript": `
            featCall global.IU logString 'Starting model round'
      `,
      "endScript": `
     
      // prep the message, but display later in case we want to add to it
      featProp global.Graphing.messageStringToShow setTo 'Nice work! How do you think that went? '

      // change other things and / or add to the message here 

      // display message
      featCall global.Graphing showMessageProp

      // log that we are done
      featCall global.IU logString 'Ending model round'
`
    }
  ],
  "blueprints": [
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// üîé WHAT DOES THIS MODEL DO?
// üîé This model is designed to help us see how energy moves through
// üîé the wetlands ecosystem, with a focus on the sun, trees, and beavers

# PROGRAM INIT

// add features
addFeature IU
addFeature Graphing
addFeature Population

prop global.visible setTo false

// to help us keep track in the water
// the dam needs to update this
addProp damBuildLevel number 9

addProp tempNum number 0

// ‚úèÔ∏è CHANGE these variables to have the model show different details about how energy
// ‚úèÔ∏è is used in the system
addProp beaversEatWaterPlants boolean true
addProp waterPlantsUseEnergy boolean false
addProp fishEatWaterPlants boolean true
addProp fishUseEnergy boolean false
addProp predatorsEatBeavers boolean true
addProp predatorsUseEnergy boolean true

# PROGRAM UPDATE

`
    },
    {
      "name": "EnergyRepresentation",
      "scriptText": `# BLUEPRINT EnergyRepresentation
# TAG isCharControllable true
# TAG isPozyxControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Touches
addFeature IU
addFeature Graphing
//addFeature Data

// Use these below to make it easier to say whether to include certain paths in the flow of energy
addProp doThis boolean true
addProp dontDoThis boolean false

// Setup the sequence that describes how energy moves in this model
// incorporate the booleans from above

//featCall EnergyRepresentation.Data setProcessFlow 'sun' 'tree' 'photosynthesis' 30

// Start off looking like a magnifying lense so we know that you need to go look at the other characters.
// Later this will change to different types of energy as the students move over the other characters.
featProp EnergyRepresentation.Costume.costumeName setTo 'WL_energy_empty.png'
featProp EnergyRepresentation.Costume.scale setTo 0.5
prop EnergyRepresentation.alpha setTo 0.8
prop EnergyRepresentation.zIndex setTo 200

// Setup energy properties
addProp energyLevel number 0
prop EnergyRepresentation.energyLevel setMax 100
prop EnergyRepresentation.energyLevel setMin 0

// Setup energy type so that we know what we can give it to
// start with none beause we have not picked up energy yet.
addProp energyType string 'none'
// use this so that we have the type of energy that is being converted (if there is one)
addProp oldEnergyType string 'none'

// the character type of the last thing touched
addProp characterType string 'none'

// Setup the touch moniitoring so that we check when the
// EnergyRepresentation characters touch the Sun, Beaver, Tree, or Predator
// The scripts for when they do touch are within Update (e.g., when EnergyRepresentation touches Sun etc.)
featCall EnergyRepresentation.Touches monitor 'Sun' b2b
featCall EnergyRepresentation.Touches monitor 'Tree' b2b
featCall EnergyRepresentation.Touches monitor 'Beaver' b2b
featCall EnergyRepresentation.Touches monitor 'Predator' b2b
featCall EnergyRepresentation.Touches monitor 'WaterPlant' b2b
featCall EnergyRepresentation.Touches monitor 'Fish' b2b

# PROGRAM UPDATE

// Any time you touch the sun, take on sun energy
// Note that the sun has effectively infinite energy
// Note this is also a special case where we never give energy
// and where we always reset
when EnergyRepresentation firsttouches Sun [[
  // Save the old energy type in case we need to check if it changed
  propPush EnergyRepresentation.energyType
  propPop EnergyRepresentation.oldEnergyType

  // set the new energy type
  prop EnergyRepresentation.energyType setTo 'source'
  prop EnergyRepresentation.characterType setTo 'sun'

  // set the new costume based on the energy type
  featProp EnergyRepresentation.Costume.costumeName setTo 'WL_energy_sun.png'

  // log what happened
  featCall EnergyRepresentation.IU logString 'An energy representation picked up energy from the sun.'
]]

when EnergyRepresentation firsttouches Tree [[
 ifProp EnergyRepresentation.energyType equal 'source' [[
    featProp EnergyRepresentation.Costume.costumeName setTo 'WL_energy_sun_plant.png'
    prop EnergyRepresentation.energyType setTo 'photosynthesis'
    prop Tree.energyLevel add 30

    featCall EnergyRepresentation.IU logString 'An energy representation is showing a plant using photosynthesis to convert energy from the sun into sugar, which is energy for the plant'
  ]]

  // if you are carrying nothing, show the process, but do not gain energy
  ifProp EnergyRepresentation.energyType equal 'none' [[
    featProp EnergyRepresentation.Costume.costumeName setTo 'WL_energy_sun_plant.png'
    prop EnergyRepresentation.energyType setTo 'photosynthesis'

    featCall EnergyRepresentation.IU logString 'An energy representation is showing a plant using photosynthesis to convert energy from the sun into sugar, which is energy for the plant'
  ]]
]]

when EnergyRepresentation lasttouches Tree [[
  ifProp EnergyRepresentation.energyType equal 'photosynthesis' [[
    featProp EnergyRepresentation.Costume.costumeName setTo 'WL_energy_plant.png'
    prop EnergyRepresentation.energyType setTo 'producer'
  ]]
]]

when EnergyRepresentation firsttouches WaterPlant [[
  ifProp EnergyRepresentation.energyType equal 'source' [[
    featProp EnergyRepresentation.Costume.costumeName setTo 'WL_energy_sun_plant.png'
    prop EnergyRepresentation.energyType setTo 'photosynthesis'
    prop WaterPlant.energyLevel add 30

    featCall EnergyRepresentation.IU logString 'An energy representation is showing a plant using photosynthesis to convert energy from the sun into sugar, which is energy for the plant'
  ]]

  // if you are carrying nothing, show the process, but do not gain energy
  ifProp EnergyRepresentation.energyType equal 'none' [[
    featProp EnergyRepresentation.Costume.costumeName setTo 'WL_energy_sun_plant.png'
    prop EnergyRepresentation.energyType setTo 'photosynthesis'

    featCall EnergyRepresentation.IU logString 'An energy representation is showing a plant using photosynthesis to convert energy from the sun into sugar, which is energy for the plant'
  ]]
]]

when EnergyRepresentation lasttouches WaterPlant [[
  ifProp EnergyRepresentation.energyType equal 'photosynthesis' [[
    featProp EnergyRepresentation.Costume.costumeName setTo 'WL_energy_plant.png'
    prop EnergyRepresentation.energyType setTo 'producer'
  ]]
]]

when EnergyRepresentation firsttouches Beaver [[
  ifProp EnergyRepresentation.energyType equal 'producer' [[
    featProp EnergyRepresentation.Costume.costumeName setTo 'WL_energy_plant_beaver.png'
    prop EnergyRepresentation.energyType setTo 'digestion'
    prop Beaver.energyLevel add 20

    featCall EnergyRepresentation.IU logString 'An energy representation is showing how the beaver (a consumer) gets energy by digesting a plant.'
  ]]

  // if you are not carrying energy, show the digestion but do not change energy levels
  ifProp EnergyRepresentation.energyType equal 'none' [[
    featProp EnergyRepresentation.Costume.costumeName setTo 'WL_energy_plant_beaver.png'
    prop EnergyRepresentation.energyType setTo 'digestion'

    featCall EnergyRepresentation.IU logString 'An energy representation is showing how the beaver (a consumer) gets energy by digesting a plant.'
  ]]
]]

when EnergyRepresentation lasttouches Beaver [[
  ifProp EnergyRepresentation.energyType equal 'digestion' [[

    ifProp global.predatorsEatBeavers equal false [[
      prop EnergyRepresentation.energyType setTo 'none'
      featProp EnergyRepresentation.Costume.costumeName setTo 'WL_energy_empty.png'
    ]]

    ifProp global.predatorsEatBeavers equal true [[
      prop EnergyRepresentation.energyType setTo 'consumer'
      featProp EnergyRepresentation.Costume.costumeName setTo 'WL_energy_beaver.png'
    ]]
  ]]
]]

when EnergyRepresentation firsttouches Fish [[
  ifProp EnergyRepresentation.energyType equal 'producer' [[
    featProp EnergyRepresentation.Costume.costumeName setTo 'WL_energy_plant_fish.png'
    prop EnergyRepresentation.energyType setTo 'digestion'
    prop Fish.energyLevel add 20

    featCall EnergyRepresentation.IU logString 'An energy representation is showing how the beaver (a consumer) gets energy by digesting a plant.'
  ]]

  // if you are not carrying energy, show the digestion but do not change energy levels
  ifProp EnergyRepresentation.energyType equal 'none' [[
    featProp EnergyRepresentation.Costume.costumeName setTo 'WL_energy_plant_fish.png'
    prop EnergyRepresentation.energyType setTo 'digestion'

    featCall EnergyRepresentation.IU logString 'An energy representation is showing how the beaver (a consumer) gets energy by digesting a plant.'
  ]]

]]

when EnergyRepresentation lasttouches Fish [[
  ifProp EnergyRepresentation.energyType equal 'digestion' [[
    prop EnergyRepresentation.energyType setTo 'none'
    featProp EnergyRepresentation.Costume.costumeName setTo 'WL_energy_empty.png'
  ]]
]]

when EnergyRepresentation firsttouches Predator [[
  // if you are not carrying energy, show the digestion but do not change energy levels
  ifProp EnergyRepresentation.energyType equal 'consumer' [[
    featProp EnergyRepresentation.Costume.costumeName setTo 'WL_energy_beaver_coyote.png'
    prop EnergyRepresentation.energyType setTo 'digestion'

    prop Predator.energyLevel add 30

    featCall EnergyRepresentation.IU logString 'An energy representation is showing how the coyote (a consumer, also a predator) gets energy by digesting a beaver.'
  ]]
]]

when EnergyRepresentation lasttouches Predator [[
  ifProp EnergyRepresentation.energyType equal 'digestion' [[
    featProp EnergyRepresentation.Costume.costumeName setTo 'WL_energy_empty.png'
    prop EnergyRepresentation.energyType setTo 'none'

  ]]
]]`
    },
    {
      "name": "Beaver",
      "scriptText": `# BLUEPRINT Beaver
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
// setup features
addFeature Physics
addFeature Touches
addFeature Costume
addFeature IU
addFeature Graphing
addFeature Movement

// set initial costume and resize
featProp Beaver.Costume.costumeName setTo 'WL_beaver.png'
featProp Beaver.Costume.scale setTo 0.15

// For logging more elaborate ideas
addProp tempString string ''

addProp energyType string 'consumer'
addProp characterType string 'beaver'

addProp energyLevel number 100
prop Beaver.energyLevel setMin 0
prop Beaver.energyLevel setMax 100

featProp Beaver.Graphing.meterProp setTo 'energyLevel'
featProp Beaver.Graphing.meterColor setTo 65280

# PROGRAM UPDATE

every 1 [[
  // lower energyLevel because living takes energy
  prop Beaver.energyLevel sub 4

  // check if the beaver is ok
  // but only if it has not already been killed by a predator
  ifProp Beaver.isInert equal false [[
    ifProp Beaver.energyLevel equal 0 [[
      featCall Beaver.IU logString 'Beaver died from starvation'
      prop Beaver.alpha setTo 0.5
      prop Beaver.isInert setTo true
      prop Beaver.energyLevel setTo 0
    ]]
  ]]

  // Set the color of the energy meter depending on the amount of energy that the character has
  // These are green orange, and red in order
  ifProp Beaver.energyLevel greaterThanOrEqual 60 [[
    featProp Beaver.Graphing.meterColor setTo 65280
  ]]
  ifProp Beaver.energyLevel lessThan 60 [[
    featProp Beaver.Graphing.meterColor setTo 16737792
  ]]
  ifProp Beaver.energyLevel lessThan 30 [[
    featProp Beaver.Graphing.meterColor setTo 16711680
  ]]

]]`
    },
    {
      "name": "Twig",
      "scriptText": `# BLUEPRINT Twig
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

# PROGRAM INIT

// setup all of the features we need
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Population

// set the costume
featProp Twig.Costume.costumeName setTo 'WL_twig.png'
featProp Twig.Costume.scale setTo 0.2

# PROGRAM UPDATE
`
    },
    {
      "name": "Rock",
      "scriptText": `# BLUEPRINT Rock
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

# PROGRAM INIT

// setup all of the features we need
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Population

// set the costume
featProp Rock.Costume.costumeName setTo 'WL_rock.png'
featProp Rock.Costume.scale setTo 0.2

# PROGRAM UPDATE
`
    },
    {
      "name": "Mud",
      "scriptText": `# BLUEPRINT Mud
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

# PROGRAM INIT

// setup all of the features we need
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Population

// set the costume
featProp Mud.Costume.costumeName setTo 'WL_mud.png'
featProp Mud.Costume.scale setTo 0.1

# PROGRAM UPDATE`
    },
    {
      "name": "Lodge",
      "scriptText": `# BLUEPRINT Lodge
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics

featProp Lodge.Costume.costumeName setTo 'GEN_square.json'
featProp Lodge.Costume.width setTo 120
featProp Lodge.Costume.height setTo 40
featCall Lodge.Costume setColorizeHSV 0.1 0.4 0.8


# PROGRAM UPDATE
`
    },
    {
      "name": "Dam",
      "scriptText": `# BLUEPRINT Dam
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics

featProp Dam.Costume.costumeName setTo 'GEN_square.json'
featProp Dam.Costume.width setTo 150
featProp Dam.Costume.height setTo 40
featCall Dam.Costume setColorizeHSV 0.1 0.4 0.8


# PROGRAM UPDATE
`
    },
    {
      "name": "Water",
      "scriptText": `# BLUEPRINT Water
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics

featProp Water.Costume.costumeName setTo 'GEN_square.json'
featProp Water.Costume.width setTo 200
featProp Water.Costume.height setTo 400
featCall Water.Costume setColorize 51 170 255
prop Water.zIndex setTo -200


// can be above or below the dam
// we only do certain things if it is above
addProp location string 'belowDam'

// this can be fast, medium, or slow
addProp speedOfWater string 'fast'

# PROGRAM UPDATE
`
    },
    {
      "name": "StreamBed",
      "scriptText": `# BLUEPRINT StreamBed
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics

featProp StreamBed.Costume.costumeName setTo 'GEN_square.json'
featProp StreamBed.Costume.width setTo 200
featProp StreamBed.Costume.height setTo 400
featCall StreamBed.Costume setColorizeHSV 0.1 0.9 0.7
prop StreamBed.zIndex setTo -300

# PROGRAM UPDATE`
    },
    {
      "name": "Predator",
      "scriptText": `# BLUEPRINT Predator
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Graphing

featProp Predator.Costume.costumeName setTo 'WL_coyote.png'
featProp Predator.Costume.scale setTo 0.2

addProp energyType string 'predator'
addProp characterType string 'coyote'


addProp energyLevel number 50
prop Predator.energyLevel setMin 0
prop Predator.energyLevel setMax 100

featProp Predator.Graphing.meterProp setTo 'energyLevel'


# PROGRAM UPDATE

every 1 [[
    // disable this for the predator to make it run longer
    ifProp global.predatorsUseEnergy equal true [[
      // lower energyLevel because living takes energy
      prop Predator.energyLevel sub 2
    ]]

    // Set the color of the energy meter depending on the amount of energy that the character has
    // These are green orange, and red in order
    ifProp Predator.energyLevel greaterThanOrEqual 60 [[
      featProp Predator.Graphing.meterColor setTo 65280
    ]]
    ifProp Predator.energyLevel lessThan 60 [[
      featProp Predator.Graphing.meterColor setTo 16737792
    ]]
    ifProp Predator.energyLevel lessThan 30 [[
      featProp Predator.Graphing.meterColor setTo 16711680
    ]]
]]

`
    },
    {
      "name": "WaterPlant",
      "scriptText": `# BLUEPRINT WaterPlant
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Graphing
addFeature IU

featProp WaterPlant.Costume.costumeName setTo 'WL_plant.png'
featProp WaterPlant.Costume.scale setTo 0.15

addProp energyLevel number 100
prop WaterPlant.energyLevel setMin 0
prop WaterPlant.energyLevel setMax 100

addProp energyType string 'producer'
addProp characterType string 'plant'

ifProp global.beaversEatWaterPlants equal true [[
  featProp WaterPlant.Graphing.meterProp setTo 'energyLevel'
  featProp WaterPlant.Graphing.meterColor setTo 65280
]]

  featProp WaterPlant.Graphing.text setTo ''

# PROGRAM UPDATE
every 1 [[
  ifProp global.beaversEatWaterPlants equal true [[

    ifProp global.waterPlantsUseEnergy equal true [[
        // lower energyLevel because living takes energy
        prop WaterPlant.energyLevel sub 2
    ]]

    // Set the color of the energy meter depending on the amount of energy that the character has
    // These are green orange, and red in order
    ifProp WaterPlant.energyLevel greaterThanOrEqual 60 [[
      featProp WaterPlant.Graphing.meterColor setTo 65280
    ]]
    ifProp WaterPlant.energyLevel lessThan 60 [[
      featProp WaterPlant.Graphing.meterColor setTo 16737792
    ]]
    ifProp WaterPlant.energyLevel lessThan 30 [[
      featProp WaterPlant.Graphing.meterColor setTo 16711680
    ]]
  ]]
]]

`
    },
    {
      "name": "Fish",
      "scriptText": `# BLUEPRINT Fish
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Graphing
addFeature IU

featProp Fish.Costume.costumeName setTo 'AQ_fish.png'
featProp Fish.Costume.scale setTo 0.15

addProp energyLevel number 100
prop Fish.energyLevel setMin 0
prop Fish.energyLevel setMax 100

addProp energyType string 'consumer'
addProp characterType string 'fish'

ifProp global.fishEatWaterPlants equal true [[
  featProp Fish.Graphing.meterProp setTo 'energyLevel'
  featProp Fish.Graphing.meterColor setTo 65280
]]

  featProp Fish.Graphing.text setTo ''

# PROGRAM UPDATE

# PROGRAM UPDATE
every 1 [[
  ifProp global.fishEatWaterPlants equal true [[

    ifProp global.fishUseEnergy equal true [[
        // lower energyLevel because living takes energy
        prop Fish.energyLevel sub 2
    ]]

    // Set the color of the energy meter depending on the amount of energy that the character has
    // These are green orange, and red in order
    ifProp Fish.energyLevel greaterThanOrEqual 60 [[
      featProp Fish.Graphing.meterColor setTo 65280
    ]]
    ifProp Fish.energyLevel lessThan 60 [[
      featProp Fish.Graphing.meterColor setTo 16737792
    ]]
    ifProp Fish.energyLevel lessThan 30 [[
      featProp Fish.Graphing.meterColor setTo 16711680
    ]]
  ]]
]]
`
    },
    {
      "name": "Tree",
      "scriptText": `# BLUEPRINT Tree
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Graphing

featProp Tree.Costume.costumeName setTo 'WL_tree.png'
featProp Tree.Costume.scale setTo 0.25

addProp energyLevel number 100
prop Tree.energyLevel setMin 0
prop Tree.energyLevel setMax 100

featProp Tree.Graphing.meterProp setTo 'energyLevel'
featProp Tree.Graphing.meterColor setTo 65280

addProp energyType string 'producer'
addProp characterType string 'tree'

# PROGRAM UPDATE
every 1 [[
    // lower energyLevel because living takes energy
    prop Tree.energyLevel sub 2

    // Set the color of the energy meter depending on the amount of energy that the character has
    // These are green orange, and red in order
    ifProp Tree.energyLevel greaterThanOrEqual 60 [[
      featProp Tree.Graphing.meterColor setTo 65280
    ]]
    ifProp Tree.energyLevel lessThan 60 [[
      featProp Tree.Graphing.meterColor setTo 16737792
    ]]
    ifProp Tree.energyLevel lessThan 30 [[
      featProp Tree.Graphing.meterColor setTo 16711680
    ]]
]]

  `
    },
    {
      "name": "GreatSpotForDam",
      "scriptText": `# BLUEPRINT GreatSpotForDam
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp GreatSpotForDam.Costume.costumeName setTo 'WL_dam_bg.png'
featProp GreatSpotForDam.Costume.scale setTo 0.5


# PROGRAM UPDATE`
    },
    {
      "name": "WaterSpeed",
      "scriptText": `# BLUEPRINT WaterSpeed
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp WaterSpeed.Costume.costumeName setTo 'WL_water_speed_medium.png'
featProp WaterSpeed.Costume.scale setTo 0.5
prop WaterSpeed.zIndex setTo 100

// can be above or below the dam
// we only do certain things if it is above
addProp location string 'belowDam'

# PROGRAM UPDATE

`
    },
    {
      "name": "Sun",
      "scriptText": `# BLUEPRINT Sun
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false


# PROGRAM INIT
addFeature Costume
featProp Sun.Costume.costumeName setTo 'GEN_sun-corner.png'
// featCall Sun.Costume setColorize 255 215 0
prop Sun.zIndex setTo 0

addFeature Physics

featProp Sun.Costume.scale setTo 1.3

// types to use for energy transfer include the type of energy
  // source, producer, consumer
  // as well as the mechanism for transfer
  // photosynthesis, digesting

addProp energyType string 'source'
addProp characterType string 'sun'

// required directive
# PROGRAM UPDATE`
    }
  ],
  "instances": [
    {
      "id": "0",
      "label": "Twig 1",
      "bpid": "Twig",
      "initScript": `prop x setTo -214.17
prop y setTo 131.70`
    },
    {
      "id": "1",
      "label": "Lodge",
      "bpid": "Lodge",
      "initScript": `prop x setTo 0
prop y setTo -225`
    },
    {
      "id": "2",
      "label": "Dam",
      "bpid": "Dam",
      "initScript": `prop x setTo 0
prop y setTo 0
`
    },
    {
      "id": "3",
      "label": "Water Above Dam",
      "bpid": "Water",
      "initScript": `prop x setTo 0
prop y setTo -200
prop location setTo 'aboveDam'
prop Water.speedOfWater setTo 'slow'
featCall Water.Costume setColorize 0 71 143
featProp Water.Costume.width setTo 470
`
    },
    {
      "id": "4",
      "label": "Water Below Dam",
      "bpid": "Water",
      "initScript": `prop x setTo 0
prop y setTo 199
prop location setTo 'belowDam'
prop Water.speedOfWater setTo 'slow'
featCall Water.Costume setColorize 128 225 255
featProp Water.Costume.width setTo 110

`
    },
    {
      "id": "9",
      "label": "Twig 2",
      "bpid": "Twig",
      "initScript": `prop x setTo 336.74
prop y setTo -226.82`
    },
    {
      "id": "12",
      "label": "Rock 1",
      "bpid": "Rock",
      "initScript": `prop x setTo 319.34
prop y setTo -113.62`
    },
    {
      "id": "18",
      "label": "Tree 3",
      "bpid": "Tree",
      "initScript": `prop x setTo 300.85
prop y setTo 286.16`
    },
    {
      "id": "19",
      "label": "Tree 2",
      "bpid": "Tree",
      "initScript": `prop x setTo -306.76
prop y setTo 20.23`
    },
    {
      "id": "20",
      "label": "Tree 1",
      "bpid": "Tree",
      "initScript": `prop x setTo 336.30
prop y setTo -324.79`
    },
    {
      "id": "26",
      "label": "WaterPlant 1",
      "bpid": "WaterPlant",
      "initScript": `prop x setTo -52.45
prop y setTo -71.28
`
    },
    {
      "id": "27",
      "label": "StreamBed",
      "bpid": "StreamBed",
      "initScript": `prop x setTo 0
prop y setTo 199`
    },
    {
      "id": "31",
      "label": "Fish 1",
      "bpid": "Fish",
      "initScript": `prop x setTo 178.44
prop y setTo -51.24`
    },
    {
      "id": "34",
      "label": "GreatSpotForDam",
      "bpid": "GreatSpotForDam",
      "initScript": `prop x setTo 1.21
prop y setTo 2.01
prop zIndex setTo 50`
    },
    {
      "id": "44",
      "label": "WaterSpeedBottom",
      "bpid": "WaterSpeed",
      "initScript": `prop x setTo 2.90
prop y setTo 196.10
prop location setTo 'belowDam'`
    },
    {
      "id": "45",
      "label": "WaterSpeedTop",
      "bpid": "WaterSpeed",
      "initScript": `prop x setTo -1.18
prop y setTo -163.69
prop location setTo 'aboveDam'
prop visible setTo false
`
    },
    {
      "id": "47",
      "label": "Beaver 1",
      "bpid": "Beaver",
      "initScript": `prop x setTo 39.43
prop y setTo -231.28`
    },
    {
      "id": "48",
      "label": "Sun",
      "bpid": "Sun",
      "initScript": `prop x setTo -261.05
prop y setTo -361.04`
    },
    {
      "id": "50",
      "label": "Beaver 3",
      "bpid": "Beaver",
      "initScript": `prop x setTo -156.04
prop y setTo 121.20
featProp Beaver.Costume.flipX setTo true
`
    },
    {
      "id": "51",
      "label": "Beaver 2",
      "bpid": "Beaver",
      "initScript": `prop x setTo 156.78
prop y setTo -232.34`
    },
    {
      "id": "52",
      "label": "Predator",
      "bpid": "Predator",
      "initScript": `prop x setTo -322.42
prop y setTo 310.86`
    }
  ]
}