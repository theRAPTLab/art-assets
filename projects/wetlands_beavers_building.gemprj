{
  "id": "wetlands_beavers_building",
  "label": "Wetlands: Beavers Building",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": "0x8A9A5B",
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [
    {
      "initScript": ``,
      "endScript": `
     
      // prep the message, but display later in case we want to add to it
      featProp global.Graphing.messageStringToShow setTo 'Nice work! How do you think that went? '

      // display infoPanels if there are enough plants / fish to possibly have seen them
      ifProp global.waterPlantCount greaterThan 0 [[
        featProp global.Graphing.messageStringToShow add 'Did you notice the plants appearing? '
        featCall global.Population charactersForEach PlantInfoPanel [[
          prop PlantInfoPanel.visible setTo 1
        ]]
      ]]
      ifProp global.fishCount greaterThan 0 [[
        featProp global.Graphing.messageStringToShow add 'Did you notice the fish appearing? '
        featCall global.Population charactersForEach FishInfoPanel [[
          prop FishInfoPanel.visible setTo 1
        ]]
      ]]

      // display message
      featCall global.Graphing showMessageProp

      // log that we are done
      featCall global.IU logString 'Ending model run'
`
    }
  ],
  "blueprints": [
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// üîé WHAT DOES THIS MODEL DO?
// üîé This is a model of how Beavers interact with and create a wetland ecosystem
// - We expect that learners will control beavers, moving around and trying to survive
// - As the Beavers add materials (twigs, mud, rocks) to the Dam, it grows, causing the water to pool above it
// - To add something, they need to pick it up, go to the Dam (or Lodge) and wait for 1 second
// - Once the pond is deep / slow enough, the Beavers can build a lodge
// --- When the water is deep enough, water plants and fish will also appear
// --- The plants impact carbon capture, and pollution
// üîé Note: we can remove / turn off or on the following:
// - Predators (by using the character controller)
// - Whether Beavers lose energy and thus need to eat by going to trees (a beaver property)
// - Carbon and pollution graphs (by using setup)
// - The info panels (by changing a property in global)
// - Fish can be removed simply by deleting them (they can be added later)

// TODO
// breaker

# PROGRAM INIT

// add features
addFeature IU
addFeature Graphing
addFeature Population

// if this is set to true, you can't drop twigs or rocks unless the gesture helper overlaps with the beaver
addProp requireGestureHelper boolean false

// ‚úèÔ∏è Consider adding / removing
// ‚úèÔ∏è The carbon capture graph
// ‚úèÔ∏è The pollution graph
// ‚úèÔ∏è The Beaver property for losesEnergy to make it easier to try ideas out

prop global.visible setTo false

// to help us keep track in the water
// the dam needs to update this
addProp damSize number 1
addProp lodgeSize number 1

// change this to true once the water is a certain size
addProp canBuildLodge boolean false

// count of currently alive water plants
// the plants themselves update the count in the touches script
addProp waterPlantCount number 0
// track the fish too, just in case
addProp fishCount number 0

// variables for helping the environment
addProp carbonCaptureRate number 10
addProp pollutionInWater number 60

addProp initialCarbonCaptureRate number 10
addProp initialPollutionInWater number 60

addProp tempNum number 0

// props if we want to break out what this is made of
addProp numTwigsInDam number 0
addProp numMudInDam number 0
addProp numRocksInDam number 0

addProp numTwigsInLodge number 0
addProp numMudInLodge number 0
addProp numRocksInLodge number 0

// to be used by the noticing wizard
addProp noticingString string '...'

addProp textForPopup string ''

featCall global.IU setupFunction 'popupMessage' [[

  featCall global.Population createCharacter PopupEffect [[
    propPush global.textForPopup
    propPop PopupEffect.textToUse
    prop PopupEffect.costumeToUse setTo ''
  ]]
]]

// required directive
# PROGRAM UPDATE

every 1 [[

  // update the captured carbon rate and pollution levels
  // multiply the waterPlantCount by a number to scale its impact
  // currently this is 1
  // then add that to the total captured
  propPush global.waterPlantCount
  prop global.tempNum setTo 5
  propPush global.tempNum
  stackMul
  propPush global.initialCarbonCaptureRate
  stackAdd
  propPop global.carbonCaptureRate

  // now do the same for pollution, but subtract instead of add
  propPush global.waterPlantCount
  prop global.tempNum setTo 5
  propPush global.tempNum
  stackMul
  propPush global.initialPollutionInWater
  stackSub
  propPop global.pollutionInWater

]]

every 0.5 [[
  // Check to see if the lodge can be built based on dam size
  // also log the shift once it can
  ifProp global.damSize greaterThan 5 [[
    // so we know it is about to flip
    ifProp global.canBuildLodge equal false [[
      featProp global.IU.logStringText setTo 'The water is deep and slow enough to build the lodge now'
      featCall global.IU logProperty
      prop global.canBuildLodge setTo true
      prop global.noticingString setTo 'Look how slow and deep the water above the dam is.'
    ]]
  ]]
  ifProp global.damSize lessThan 5 [[
    prop global.canBuildLodge setTo false
  ]]
]]

onEvent START [[
  featCall global.IU logString 'Starting model run'
]]`
    },
    {
      "name": "Beaver",
      "scriptText": `# BLUEPRINT Beaver
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
// setup features
addFeature Physics
addFeature Touches
addFeature Costume
addFeature IU
addFeature Graphing
addFeature Movement
// addFeature Feedback

// set initial costume and resize
featProp Beaver.Costume.costumeName setTo 'WL_beaver.png'
featProp Beaver.Costume.scale setTo 0.15
prop Beaver.zIndex setTo 200

// the beaver can carry nothing, twig, rock, or mud
addProp carrying string 'nothing'

// if the GestureHelper is touching the beaver, set to true
// if it moves off, set to false
addProp gesturing boolean false
addProp gestureTimer number 0

// For logging more elaborate ideas
addProp tempString string ''

// for predator handling - true if hidden
addProp protected boolean false

addProp energyLevel number 100
prop Beaver.energyLevel setMin 0
prop Beaver.energyLevel setMax 100

// setup to see if the beaver is touching anything it might pick up
featCall Beaver.Touches monitor 'Twig' b2b
featCall Beaver.Touches monitor 'Rock' b2b
featCall Beaver.Touches monitor 'Mud' b2b
featCall Beaver.Touches monitor 'Water' b2b
featCall Beaver.Touches monitor 'Lodge' b2b
featCall Beaver.Touches monitor 'Dam' b2b
featCall Beaver.Touches monitor 'Tree' b2b

addProp displayText string ''
propPush Beaver.trackerId
propPop Beaver.displayText
featProp Beaver.Graphing.textProp setTo 'displayText'
featProp Beaver.Graphing.meterProp setTo 'energyLevel'
featProp Beaver.Graphing.meterColor setTo 65280

// ‚úèÔ∏è LETS CHANGE THIS: Does the beaver lose energy?
// ‚úèÔ∏è If this is set to false, it helps us explore the model without worrying about food
addProp beaverLosesEnergy boolean true

// log the value of beaverLosesEnergy
ifProp Beaver.beaverLosesEnergy equal true [[
  featCall Beaver.IU logString 'Beaver started with beaverLosesEnergy set to true'
]]
ifProp Beaver.beaverLosesEnergy equal false [[
  featCall Beaver.IU logString 'Beaver started with beaverLosesEnergy set to false'
]]

featCall Beaver.IU logString 'The beaver started off carrying nothing'

# PROGRAM UPDATE

// Flip the artwork to point left or right depending on the direction the character is moving
ifFeatProp Beaver.Movement.compassDirection equal 'E' [[
  featProp Beaver.Costume.flipX setTo false
]]
ifFeatProp Beaver.Movement.compassDirection equal 'W' [[
  featProp Beaver.Costume.flipX setTo true
]]

when Beaver firsttouches Twig [[
  // If the beaver isn't carrying anything yet, pick up the twig
  ifProp Beaver.carrying equal 'nothing' [[
    featCall Beaver.IU logString 'Beaver picked up a twig'
    prop Beaver.carrying setTo 'twig'
    featProp Beaver.Costume.costumeName setTo 'WL_beaver_carrying_twig.png'
    featCall Twig.Population removeCharacter
  ]]
]]

when Beaver firsttouches Rock [[
  // If the beaver isn't carrying anything yet, pick up the rock
  ifProp Beaver.carrying equal 'nothing' [[
    featCall Beaver.IU logString 'Beaver picked up a rock'
    prop Beaver.carrying setTo 'rock'
    featProp Beaver.Costume.costumeName setTo 'WL_beaver_carrying_rock.png'
    featCall Rock.Population removeCharacter
  ]]
]]

when Beaver firsttouches Mud [[
  // If the beaver isn't carrying anything yet, pick up the mud
  ifProp Beaver.carrying equal 'nothing' [[
    featCall Beaver.IU logString 'Beaver picked up some mud'
    prop Beaver.carrying setTo 'mud'
    featProp Beaver.Costume.costumeName setTo 'WL_beaver_carrying_mud.png'
    featCall Mud.Population removeCharacter
  ]]
]]

when Beaver touches Dam [[
  every 1 [[

    // We are carrying a rock, mud, or twig
    ifProp Beaver.carrying notEqual 'nothing' [[

      // if we don't need to track the gesture directly through touching the gestureHelper
      // have a slight delay handled here so it's not too fast for users to notice what is happening
      ifProp global.requireGestureHelper equal false [[
        prop Beaver.gestureTimer add 1
      ]]

      ifProp Beaver.gestureTimer greaterThanOrEqual 2 [[

        prop global.textForPopup setTo ''

        // üîé WHAT DOES THIS SECTION DO?
        // üîé This section checks if we are holding something that we can add to the dam
        // üîé If we already have too much of whatever it is, just drop it
        ifProp Beaver.carrying equal 'twig' [[
          // ‚úèÔ∏è This line limits how many twigs the beaver can add to the dam
          ifProp global.numTwigsInDam greaterThanOrEqual 8 [[
            prop Beaver.carrying setTo 'nothing'
            prop global.textForPopup setTo 'The dam has enough twigs.'
            featCall Beaver.IU logString 'Beaver dropped the twig becuase there were too many in the dam.'
          ]]
        ]]
        ifProp Beaver.carrying equal 'rock' [[
          // ‚úèÔ∏è This line limits how many rocks the beaver can add to the dam
          ifProp global.numRocksInDam greaterThanOrEqual 8 [[
            prop Beaver.carrying setTo 'nothing'
            prop global.textForPopup setTo 'The damn has enough rocks.'
            featCall Beaver.IU logString 'Beaver dropped the rock becuase there were too many in the dam.'
          ]]
        ]]
        ifProp Beaver.carrying equal 'mud' [[
          // ‚úèÔ∏è This line limits how much mud the beaver can add to the dam
          ifProp global.numMudInDam greaterThanOrEqual 8 [[
            prop Beaver.carrying setTo 'nothing'
            prop global.textForPopup setTo 'The damn has enough mud.'
            featCall Beaver.IU logString 'Beaver dropped the mud becuase there was too much in the dam.'
          ]]
        ]]

        ifProp global.textForPopup notEqual '' [[
          featCall global.IU callFunction 'popupMessage'
        ]]

        // üîé WHAT DOES THIS SECTION DO?
        // üîé This section is where we check if dropping something helps build the dam and how much
        // üîé First we decide how much each thing adds, then we add it
        ifProp Beaver.carrying equal 'twig' [[
          prop global.numTwigsInDam add 1
          // ‚úèÔ∏è This line sets how much each twig adds
          prop Dam.size add 1
          featCall Beaver.IU logString 'Beaver added a twig to the dam.'
        ]]
        ifProp Beaver.carrying equal 'rock' [[
          prop global.numRocksInDam add 1
          // ‚úèÔ∏è This line sets how much each rock adds
          prop Dam.size add 1
          featCall Beaver.IU logString 'Beaver added a rock to the dam.'
        ]]
        ifProp Beaver.carrying equal 'mud' [[
          prop global.numMudInDam add 1
          // ‚úèÔ∏è This line sets how much each bit of mud adds
          prop Dam.size add 1
          featCall Beaver.IU logString 'Beaver added mud to the dam.'
        ]]


        propPush Dam.size
        propPop global.damSize

        prop Beaver.carrying setTo 'nothing'
        featProp Beaver.Costume.costumeName setTo 'WL_beaver.png'

        ifProp global.requireGestureHelper equal false [[
          prop Beaver.gestureTimer setTo 0
        ]]

      ]]
    ]]
  ]]
]]

when Beaver firsttouches Lodge [[
  ifProp Lodge.size greaterThanOrEqual 3 [[
    prop Beaver.protected setTo true
    featCall Beaver.IU logString 'Beaver is protected in the lodge'

    prop Beaver.displayText add ' üõ°'
  ]]
  ifProp Lodge.size lessThan 3 [[
    featCall Beaver.IU logString 'Beaver is near the lodge, but the lodge is not big enough to protect it'
  ]]
]]
when Beaver lasttouches Lodge [[
  ifProp Beaver.protected equal true [[
    prop Beaver.protected setTo false
    featCall Beaver.IU logString 'Beaver left the lodge so is no-longer protected'

    propPush Beaver.trackerId
    propPop Beaver.displayText

  ]]
]]

when Beaver touches Lodge [[
  every 1 [[

    // We are carrying a rock, mud, or twig
    ifProp Beaver.carrying notEqual 'nothing' [[

      // if we don't need to track the gesture directly through touching the gestureHelper
      // have a slight delay handled here so it's not too fast for users to notice what is happening
      ifProp global.requireGestureHelper equal false [[
        prop Beaver.gestureTimer add 1
      ]]

      ifProp Beaver.gestureTimer greaterThanOrEqual 2 [[
        ifProp global.canBuildLodge equal true [[

          prop global.textForPopup setTo ''

          // üîé WHAT DOES THIS SECTION DO?
          // üîé This section checks if we are holding something that we can add to the lodge
          // üîé If we already have too much of whatever it is, just drop it
          ifProp Beaver.carrying equal 'twig' [[
            // ‚úèÔ∏è This line limits how many twigs the beaver can add to the lodge
            ifProp global.numTwigsInLodge greaterThanOrEqual 8 [[
              prop Beaver.carrying setTo 'nothing'
              prop global.textForPopup setTo 'The lodge has enough twigs.'
              featCall Beaver.IU logString 'Beaver dropped the twig becuase there were too many in the lodge.'
            ]]
          ]]
          ifProp Beaver.carrying equal 'rock' [[
            // ‚úèÔ∏è This line limits how many rocks the beaver can add to the lodge
            ifProp global.numRocksInLodge greaterThanOrEqual 8 [[
              prop Beaver.carrying setTo 'nothing'
              prop global.textForPopup setTo 'The lodge has enough mud.'
              featCall Beaver.IU logString 'Beaver dropped the rock becuase there were too many in the lodge.'
            ]]
          ]]
          ifProp Beaver.carrying equal 'mud' [[
            // ‚úèÔ∏è This line limits how much mud the beaver can add to the lodge
            ifProp global.numMudInLodge greaterThanOrEqual 8 [[
              prop global.textForPopup setTo 'The lodge has enough rocks.'
              featCall Beaver.IU logString 'Beaver dropped the mud becuase there was too much in the lodge.'
            ]]
          ]]

          ifProp global.textForPopup notEqual '' [[
            featCall global.IU callFunction 'popupMessage'
          ]]

          // üîé WHAT DOES THIS SECTION DO?
          // üîé This section is where we check if dropping something helps build the lodge and how much
          // üîé First we decide how much each thing adds, then we add it
          ifProp Beaver.carrying equal 'twig' [[
            prop global.numTwigsInLodge add 1
            // ‚úèÔ∏è This line sets how much each twig adds
            prop Lodge.size add 1
            featCall Beaver.IU logString 'Beaver added a twig to the lodge.'
          ]]
          ifProp Beaver.carrying equal 'rock' [[
            prop global.numRocksInLodge add 1
            // ‚úèÔ∏è This line sets how much each rock adds
            prop Lodge.size add 1
            featCall Beaver.IU logString 'Beaver added a rock to the lodge.'
          ]]
          ifProp Beaver.carrying equal 'mud' [[
            prop global.numMudInLodge add 1
            // ‚úèÔ∏è This line sets how much each blob of mud adds
            prop Lodge.size add 1
            featCall Beaver.IU logString 'Beaver added mud to the lodge.'
          ]]

          propPush Lodge.size
          propPop global.lodgeSize

          prop Beaver.carrying setTo 'nothing'
          featProp Beaver.Costume.costumeName setTo 'WL_beaver.png'

          ifProp global.requireGestureHelper equal false [[
            prop Beaver.gestureTimer setTo 0
          ]]
        ]]
      ]]
    ]]
  ]]
]]

when Beaver touches Tree [[
  every 1 [[
    featCall Beaver.IU logString 'Beaver ate some wood at a tree'
    prop Beaver.energyLevel add 20
  ]]
]]

every 1 [[

  ifProp Beaver.beaverLosesEnergy equal true [[
    // lower energyLevel because living takes energy
    prop Beaver.energyLevel sub 2

    // Set the color of the energy meter depending on the amount of energy that the character has
    // These are green orange, and red in order
    ifProp Beaver.energyLevel greaterThanOrEqual 60 [[
      featProp Beaver.Graphing.meterColor setTo 65280
    ]]
    ifProp Beaver.energyLevel lessThan 60 [[
      featProp Beaver.Graphing.meterColor setTo 16737792
    ]]
    ifProp Beaver.energyLevel lessThan 30 [[
      featProp Beaver.Graphing.meterColor setTo 16711680
    ]]

  ]]

  // check if the beaver is ok
  // but only if it has not already been killed by a predator
  ifProp Beaver.isInert equal false [[
    ifProp Beaver.energyLevel equal 0 [[
      featCall Beaver.IU logString 'Beaver died from starvation'
      prop Beaver.alpha setTo 0.5
      prop Beaver.isInert setTo true
      prop Beaver.energyLevel setTo 0
    ]]
  ]]

  // check if gesturing, and then handle that inside the when touches above
  ifProp global.requireGestureHelper equal true [[
    ifProp Beaver.gesturing equal true [[
      prop Beaver.gestureTimer add 1
    ]]
    ifProp Beaver.gesturing equal false [[
      prop Beaver.gestureTimer setTo 0
    ]]
  ]]
]]`
    },
    {
      "name": "Twig",
      "scriptText": `# BLUEPRINT Twig
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

# PROGRAM INIT

// setup all of the features we need
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Population

// set the costume
featProp Twig.Costume.costumeName setTo 'WL_twig.png'
featProp Twig.Costume.scale setTo 0.2

# PROGRAM UPDATE
`
    },
    {
      "name": "Rock",
      "scriptText": `# BLUEPRINT Rock
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

# PROGRAM INIT

// setup all of the features we need
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Population

// set the costume
featProp Rock.Costume.costumeName setTo 'WL_rock.png'
featProp Rock.Costume.scale setTo 0.2

# PROGRAM UPDATE
`
    },
    {
      "name": "Mud",
      "scriptText": `# BLUEPRINT Mud
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

# PROGRAM INIT

// setup all of the features we need
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Population

// set the costume
featProp Mud.Costume.costumeName setTo 'WL_mud.png'
featProp Mud.Costume.scale setTo 0.1

# PROGRAM UPDATE`
    },
    {
      "name": "GestureHelper",
      "scriptText": `# BLUEPRINT GestureHelper
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

// üîé WHAT DOES the GestureHelper DO?
// üîé This is a character so that lets a helper tell GEM-STEP when
// üîé the person pretending to be a beaver is doing the right gesture
// üîé to put down what it is carrying (either helping build something or dropping it)

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Touches
featProp GestureHelper.Costume.costumeName setTo 'GEN_circle.json'
featProp GestureHelper.Costume.scale setTo 0.1
prop GestureHelper.alpha setTo 0.5
prop GestureHelper.zIndex setTo 500

featCall GestureHelper.Touches monitor 'Beaver' b2b

# PROGRAM UPDATE


when GestureHelper firsttouches Beaver [[
  prop Beaver.gesturing setTo true
  featCall Beaver.IU logString 'Player acting as a beaver started gesturing'
]]

when GestureHelper lasttouches Beaver [[
  prop Beaver.gesturing setTo false
  featCall Beaver.IU logString 'Player acting as a beaver stopped gesturing'

]]
`
    },
    {
      "name": "Lodge",
      "scriptText": `# BLUEPRINT Lodge
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics

featProp Lodge.Costume.costumeName setTo 'GEN_square.json'
featProp Lodge.Costume.width setTo 100
featProp Lodge.Costume.height setTo 40
featCall Lodge.Costume setColorizeHSV 0.1 0.2 0.8

addProp size number 1
prop Lodge.size setMin 1
prop Lodge.size setMax 10

// to be used in re-scaling the width
addProp tempWidth number 0
prop Lodge.alpha setTo 0.2

# PROGRAM UPDATE

every 0.5 [[
  // re-scale based on the size
  propPush Lodge.size
  propPop Lodge.tempWidth
  prop Lodge.tempWidth mul 20
  prop Lodge.tempWidth add 80
  propPush Lodge.tempWidth
  featPropPop Lodge.Costume.width

  ifProp global.canBuildLodge equal true [[
    // make it clear we can now build
    featCall Lodge.Costume setColorizeHSV 0.1 0.4 0.8
    prop Lodge.alpha setTo 1
  ]]
]]`
    },
    {
      "name": "Dam",
      "scriptText": `# BLUEPRINT Dam
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics

featProp Dam.Costume.costumeName setTo 'GEN_square.json'
featProp Dam.Costume.width setTo 100
featProp Dam.Costume.height setTo 40
featCall Dam.Costume setColorizeHSV 0.1 0.4 0.8

addProp size number 1
prop Dam.size setMin 1
prop Dam.size setMax 10

// to be used in re-scaling the width
addProp tempWidth number 0

# PROGRAM UPDATE

every 0.5 [[
  // re-scale based on the size
  propPush Dam.size
  propPop Dam.tempWidth
  prop Dam.tempWidth mul 20
  prop Dam.tempWidth add 80
  propPush Dam.tempWidth
  featPropPop Dam.Costume.width
]]`
    },
    {
      "name": "Water",
      "scriptText": `# BLUEPRINT Water
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics

featProp Water.Costume.costumeName setTo 'GEN_square.json'
featProp Water.Costume.width setTo 200
featProp Water.Costume.height setTo 400
featCall Water.Costume setColorize 51 170 255
prop Water.zIndex setTo -200

addProp depth number 1
prop Water.depth setMin 1
prop Water.depth setMax 10

// used in calculating the width to match build level
addProp tempWidth number 0

// can be above or below the dam
// we only do certain things if it is above
addProp location string 'belowDam'

// this can be fast, medium, or slow
addProp speed string 'medium'

# PROGRAM UPDATE


// 1 - 200
// 2 - 230, 190
// 3 - 260, 180

every 0.5 [[
  // the water above the dam grows as the dam makes it pool
  ifProp Water.location equal 'aboveDam' [[
    propPush global.damSize
    propPop Water.tempWidth
    prop Water.tempWidth mul 30
    prop Water.tempWidth add 170
    propPush Water.tempWidth
    featPropPop Water.Costume.width
  ]]
  ifProp Water.location notEqual 'aboveDam' [[
    propPush global.damSize
    propPop Water.tempWidth
    prop Water.tempWidth mul -10
    prop Water.tempWidth add 210
    propPush Water.tempWidth
    featPropPop Water.Costume.width
  ]]

  // ‚úèÔ∏è LETS CHANGE how the width of the water effects the depth of the water
  // The water starts at 200 pixels wide and is adjusted by the dam
  // We cab imagine that each pixel is like an inch in this model
  ifFeatProp Water.Costume.width lessThan 180 [[
    prop Water.depth setTo 2
  ]]
  ifFeatProp Water.Costume.width greaterThanOrEqual 180 [[
    prop Water.depth setTo 3
  ]]
  ifFeatProp Water.Costume.width greaterThanOrEqual 200 [[
    prop Water.depth setTo 4
  ]]
  ifFeatProp Water.Costume.width greaterThanOrEqual 240 [[
    prop Water.depth setTo 5
  ]]

  // ‚úèÔ∏è LETS CHANGE how the water depth effects the speed of the water
  // it moves faster when it is narrower, and slows down as it becomes deeper
  ifProp Water.depth lessThanOrEqual 3 [[
    // the water is shallow, so it moves pretty fast
    prop Water.speed setTo 'fast'
    // make the light blue so we know it is shallow
    featCall Water.Costume setColorize 51 170 255
  ]]

  ifProp Water.depth greaterThan 3 [[
    // the water is medium deep, so it moves medium fast
    prop Water.speed setTo 'medium'
    // make the water medium  blue so we know it is medium deep
    featCall Water.Costume setColorize 0 118 198
  ]]

  ifProp Water.depth greaterThanOrEqual 5 [[
    // the water is deep, so it moves pretty slow
    prop Water.speed setTo 'slow'
    // make the water dark blue so we know it is deep
    featCall Water.Costume setColorize 0 71 143
  ]]

]]`
    },
    {
      "name": "StreamBed",
      "scriptText": `# BLUEPRINT StreamBed
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics

featProp StreamBed.Costume.costumeName setTo 'GEN_square.json'
featProp StreamBed.Costume.width setTo 204
featProp StreamBed.Costume.height setTo 800
featCall StreamBed.Costume setColorizeHSV 0.1 0.9 0.7
prop StreamBed.zIndex setTo -300

# PROGRAM UPDATE`
    },
    {
      "name": "Predator",
      "scriptText": `# BLUEPRINT Predator
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Movement

featProp Predator.Costume.costumeName setTo 'WL_coyote.png'
featProp Predator.Costume.scale setTo 0.2

featCall Predator.Touches monitor 'Beaver' b2b

# PROGRAM UPDATE

// Flip the artwork to point left or right depending on the direction the character is moving
ifFeatProp Predator.Movement.compassDirection equal 'E' [[
  featProp Predator.Costume.flipX setTo false
]]
ifFeatProp Predator.Movement.compassDirection equal 'W' [[
  featProp Predator.Costume.flipX setTo true
]]

when Predator firsttouches Beaver [[
  ifProp Beaver.protected equal false [[
    // the beaver is killed by the predator
    featCall Beaver.IU logString 'Beaver was killed by a predator because it was not protected'
    prop Beaver.alpha setTo 0.5
    prop Beaver.isInert setTo true
    prop Beaver.energyLevel setTo 0
  ]]
  ifProp Beaver.protected equal true [[
    featCall Beaver.IU logString 'The predator tried to attack the beaver but it was protected!'
  ]]

]]

`
    },
    {
      "name": "GoodWaterPlantSpot",
      "scriptText": `# BLUEPRINT GoodWaterPlantSpot
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Touches
addFeature IU
addFeature Population

featProp GoodWaterPlantSpot.Costume.costumeName setTo 'GEN_square.json'
featProp GoodWaterPlantSpot.Costume.width setTo 30
featProp GoodWaterPlantSpot.Costume.height setTo 30
featCall GoodWaterPlantSpot.Costume setColorizeHSV 0.3 0.5 0.8

featCall GoodWaterPlantSpot.Touches monitor 'Water' c2b

addProp plantAlreadyGrewHere boolean false
prop GoodWaterPlantSpot.visible setTo false

# PROGRAM UPDATE

// ‚úèÔ∏è LETS CHANGE When the water plants appear in the model
// If this spot is under water, and the water is slow enough, a plant might grow here
when GoodWaterPlantSpot centertouches Water [[
  every 1 runAfter [[
    // Only plants if the water is the right speed
    // The options are slow, medium, and fast
    ifProp Water.speed notEqual 'fast' [[
      // Only grow a new plant if one isn't here already
      ifProp GoodWaterPlantSpot.plantAlreadyGrewHere equal false [[
        // there are now plants here yet, so make a new plant
        featCall GoodWaterPlantSpot.Population createCharacter WaterPlant [[
        ]]

        // keep track of how many water plants we have in case we want to graph it
        prop GoodWaterPlantSpot.plantAlreadyGrewHere setTo true
        prop global.waterPlantCount add 1

        // tell the observers that a new water plant grew, and log it
        prop global.noticingString setTo 'Check out the new plants!'
        featCall GoodWaterPlantSpot.IU logString 'A new plant is in the pond because of the slow water'
      ]]
    ]]
  ]]
]]`
    },
    {
      "name": "WaterPlant",
      "scriptText": `# BLUEPRINT WaterPlant
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Population

featProp WaterPlant.Costume.costumeName setTo 'WL_plant.png'
featProp WaterPlant.Costume.scale setTo 0.15

featCall WaterPlant.Touches monitor 'Water' c2b

# PROGRAM UPDATE

when WaterPlant centerlasttouches Water [[
  // The plant can't survive out of the water, so it dies
  featCall WaterPlant.Population removeCharacter
]]`
    },
    {
      "name": "GoodFishSpawningSpot",
      "scriptText": `# BLUEPRINT GoodFishSpawningSpot
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Touches
addFeature IU
addFeature Population

featProp GoodFishSpawningSpot.Costume.costumeName setTo 'GEN_square.json'
featProp GoodFishSpawningSpot.Costume.width setTo 30
featProp GoodFishSpawningSpot.Costume.height setTo 30
featCall GoodFishSpawningSpot.Costume setColorizeHSV 0.1 0.2 0.8

featCall GoodFishSpawningSpot.Touches monitor 'Water' c2b

addProp fishAlreadySpawnedHere boolean false

prop GoodFishSpawningSpot.visible setTo false

# PROGRAM UPDATE

// ‚úèÔ∏è LETS CHANGE When the fish appear in the model
// If this spot is under water, and the water is slow enough, fish might lay eggs
when GoodFishSpawningSpot centertouches Water [[
  every 1 runAfter [[
    // Only lay eggs if the water is the right speed
    // The options are slow, medium, and fast
    ifProp Water.speed equal 'slow' [[
      // If a fish already laid eggs, don't add new ones
      ifProp GoodFishSpawningSpot.fishAlreadySpawnedHere equal false [[
        // there are no fish here yet, so make a new fish
        featCall GoodFishSpawningSpot.Population createCharacter Fish [[
        ]]

        // keep track of how many fish we have in case we want to graph the amount
        prop GoodFishSpawningSpot.fishAlreadySpawnedHere setTo true
        prop global.fishCount add 1

        // tell the observers that some fish spawned, and log it
        prop global.noticingString setTo 'Check out the new Fish!'
        featCall GoodFishSpawningSpot.IU logString 'A new fish is in the pond because of the slow water'
      ]]
    ]]
  ]]
]]`
    },
    {
      "name": "Fish",
      "scriptText": `# BLUEPRINT Fish
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Population
addFeature Physics
addFeature Touches

featProp Fish.Costume.costumeName setTo 'AQ_fish.png'
featProp Fish.Costume.scale setTo 0.15

featCall Fish.Touches monitor 'Water' c2b

# PROGRAM UPDATE

when WaterPlant centerlasttouches Water [[
  // The Fish can't survive out of the water, so it dies
  featCall Fish.Population removeCharacter
]]`
    },
    {
      "name": "Tree",
      "scriptText": `# BLUEPRINT Tree
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Touches

featProp Tree.Costume.costumeName setTo 'WL_tree.png'
featProp Tree.Costume.scale setTo 0.25

# PROGRAM UPDATE`
    },
    {
      "name": "CarbonCaptureRateGraph",
      "scriptText": `# BLUEPRINT CarbonCaptureRateGraph
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Graphing
addProp carbonCaptureRate number 0


featProp CarbonCaptureRateGraph.Costume.costumeName setTo 'GEN_onexone.json'
featProp CarbonCaptureRateGraph.Graphing.isLargeGraphic setTo true
featProp CarbonCaptureRateGraph.Graphing.graphProp setTo 'carbonCaptureRate'
featProp CarbonCaptureRateGraph.Graphing.graphMinY setTo 0
featProp CarbonCaptureRateGraph.Graphing.graphMaxY setTo 100
featProp CarbonCaptureRateGraph.Graphing.text setTo 'Carbon Capture Rate'

# PROGRAM UPDATE
every 1 runAtStart [[
  propPush global.carbonCaptureRate
  propPop CarbonCaptureRateGraph.carbonCaptureRate
]]

`
    },
    {
      "name": "PollutionGraph",
      "scriptText": `# BLUEPRINT PollutionGraph
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Graphing
addProp pollutionInWater number 0

featProp PollutionGraph.Costume.costumeName setTo 'GEN_onexone.json'
featProp PollutionGraph.Graphing.isLargeGraphic setTo true
featProp PollutionGraph.Graphing.graphProp setTo 'pollutionInWater'
featProp PollutionGraph.Graphing.graphMinY setTo 0
featProp PollutionGraph.Graphing.graphMaxY setTo 100
featProp PollutionGraph.Graphing.text setTo 'Pollution in the Water'

# PROGRAM UPDATE
every 1 runAtStart [[
  propPush global.pollutionInWater
  propPop PollutionGraph.pollutionInWater
]]

`
    },
    {
      "name": "GreatSpotForDam",
      "scriptText": `# BLUEPRINT GreatSpotForDam
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp GreatSpotForDam.Costume.costumeName setTo 'WL_dam_bg.png'
featProp GreatSpotForDam.Costume.scale setTo 0.5


# PROGRAM UPDATE`
    },
    {
      "name": "WaterSpeed",
      "scriptText": `# BLUEPRINT WaterSpeed
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Touches

featProp WaterSpeed.Costume.costumeName setTo 'WL_water_speed_medium.png'
featProp WaterSpeed.Costume.scale setTo 0.5
prop WaterSpeed.zIndex setTo 100

featCall WaterSpeed.Touches monitor 'Water' b2b

// can be above or below the dam
// we only do certain things if it is above
addProp location string 'belowDam'

# PROGRAM UPDATE

when WaterSpeed touches Water [[
  every 0.5 runAtStart [[
      ifProp Water.speed equal 'fast' [[
        featProp WaterSpeed.Costume.costumeName setTo 'WL_water_speed_fast.png'
        prop WaterSpeed.alpha setTo 1
      ]]

      ifProp Water.speed equal 'medium' [[
        featProp WaterSpeed.Costume.costumeName setTo 'WL_water_speed_medium.png'
        prop WaterSpeed.alpha setTo 1
      ]]

      ifProp Water.speed equal 'slow' [[
        prop WaterSpeed.alpha setTo 0
      ]]
    ]]
]]

`
    },
    {
      "name": "PopupEffect",
      "scriptText": `# BLUEPRINT PopupEffect
      # TAG isPozyxControllable false
      # TAG isCharControllable false
      # TAG isPTrackControllable false

      # PROGRAM INIT

      addFeature Costume
      addFeature Physics
      addFeature Graphing
      addFeature Population

      featProp PopupEffect.Costume.costumeName setTo 'GEN_onexone.json'
      prop PopupEffect.zIndex setTo 500

      featProp PopupEffect.Graphing.wordWrapWidth setTo 300
      featProp PopupEffect.Graphing.fontSize setTo 36
      featProp PopupEffect.Graphing.text setTo ''

      addProp costumeToUse string ''
      addProp textToUse string 'TEST'
      addProp countDown Number 2

      # PROGRAM UPDATE

      every 0.1 runAtStart [[
        ifProp PopupEffect.costumeToUse notEqual '' [[
          propPush PopupEffect.costumeToUse
          featPropPop PopupEffect.Costume.costumeName
          prop PopupEffect.costumeToUse setTo ''
        ]]

        ifProp PopupEffect.textToUse notEqual '' [[
          propPush PopupEffect.textToUse
          featPropPop PopupEffect.Graphing.text
          prop PopupEffect.textToUse setTo ''
        ]]
      ]]
      every 1 runAtStart [[

        prop PopupEffect.countDown sub 1
        ifExpr {{ PopupEffect.getProp('countDown').value == 0 }} [[
          featCall PopupEffect.Population removeCharacter
        ]]
      ]]
      `
    },
    {
      "name": "Noticing",
      "scriptText": `# BLUEPRINT Noticing
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Graphing
featProp Noticing.Costume.costumeName setTo 'GEN_onexone.json'
featProp Noticing.Graphing.wordWrapWidth setTo 300
featProp Noticing.Graphing.text setTo 'Important things to notice will be mentioned here.'

# PROGRAM UPDATE

every 1 [[
  
  propPush global.noticingString
  featPropPop Noticing.Graphing.text

]]

  `
    }
  ],
  "instances": [
    {
      "id": "0",
      "label": "Twig 1",
      "bpid": "Twig",
      "initScript": `prop x setTo -335.40
prop y setTo -44.16`
    },
    {
      "id": "1",
      "label": "Lodge",
      "bpid": "Lodge",
      "initScript": `prop x setTo 0.00
prop y setTo -225.00`
    },
    {
      "id": "2",
      "label": "Dam",
      "bpid": "Dam",
      "initScript": `prop x setTo 0
prop y setTo 0
prop Dam.size setTo 1
`
    },
    {
      "id": "3",
      "label": "Water 1",
      "bpid": "Water",
      "initScript": `prop x setTo 0
prop y setTo -200
prop location setTo 'aboveDam'`
    },
    {
      "id": "4",
      "label": "Water 2",
      "bpid": "Water",
      "initScript": `prop x setTo 0
prop y setTo 199
prop location setTo 'belowDam'`
    },
    {
      "id": "5",
      "label": "Twig 2",
      "bpid": "Twig",
      "initScript": `prop x setTo -317.10
prop y setTo -134.30`
    },
    {
      "id": "6",
      "label": "Twig 3",
      "bpid": "Twig",
      "initScript": `prop x setTo -336.43
prop y setTo -73.87`
    },
    {
      "id": "7",
      "label": "Twig 4",
      "bpid": "Twig",
      "initScript": `prop x setTo -316.76
prop y setTo -106.20`
    },
    {
      "id": "8",
      "label": "Twig 5",
      "bpid": "Twig",
      "initScript": `prop x setTo 293.36
prop y setTo -167.77`
    },
    {
      "id": "9",
      "label": "Twig 6",
      "bpid": "Twig",
      "initScript": `prop x setTo 311.16
prop y setTo -203.12`
    },
    {
      "id": "10",
      "label": "Twig 7",
      "bpid": "Twig",
      "initScript": `prop x setTo 233.44
prop y setTo 314.78`
    },
    {
      "id": "11",
      "label": "Mud 1",
      "bpid": "Mud",
      "initScript": `prop x setTo 282.14
prop y setTo 21.75`
    },
    {
      "id": "12",
      "label": "Rock 1",
      "bpid": "Rock",
      "initScript": `prop x setTo 319.34
prop y setTo -113.62`
    },
    {
      "id": "13",
      "label": "Rock 2",
      "bpid": "Rock",
      "initScript": `prop x setTo -303.54
prop y setTo 165.14`
    },
    {
      "id": "14",
      "label": "Mud 3",
      "bpid": "Mud",
      "initScript": `prop x setTo 309.95
prop y setTo 66.96`
    },
    {
      "id": "15",
      "label": "Mud 2",
      "bpid": "Mud",
      "initScript": `prop x setTo 277.77
prop y setTo 47.90`
    },
    {
      "id": "16",
      "label": "Rock 3",
      "bpid": "Rock",
      "initScript": `prop x setTo -361.11
prop y setTo 180.27`
    },
    {
      "id": "17",
      "label": "GoodWaterPlantSpot 1",
      "bpid": "GoodWaterPlantSpot",
      "initScript": `prop x setTo 118.95
prop y setTo -295.17`
    },
    {
      "id": "18",
      "label": "Tree 3",
      "bpid": "Tree",
      "initScript": `prop x setTo 329.12
prop y setTo 216.84`
    },
    {
      "id": "19",
      "label": "Tree 1",
      "bpid": "Tree",
      "initScript": `prop x setTo -328.12
prop y setTo -262.91`
    },
    {
      "id": "20",
      "label": "Tree 2",
      "bpid": "Tree",
      "initScript": `prop x setTo 319.10
prop y setTo -324.79`
    },
    {
      "id": "22",
      "label": "GoodWaterPlantSpot 2",
      "bpid": "GoodWaterPlantSpot",
      "initScript": `prop x setTo -74.02
prop y setTo -366.53`
    },
    {
      "id": "23",
      "label": "GoodWaterPlantSpot 3",
      "bpid": "GoodWaterPlantSpot",
      "initScript": `prop x setTo -83.06
prop y setTo 309.18`
    },
    {
      "id": "24",
      "label": "GoodWaterPlantSpot 4",
      "bpid": "GoodWaterPlantSpot",
      "initScript": `prop x setTo -209.94
prop y setTo -274.44`
    },
    {
      "id": "25",
      "label": "GoodWaterPlantSpot 5",
      "bpid": "GoodWaterPlantSpot",
      "initScript": `prop x setTo -118.26
prop y setTo -44.24`
    },
    {
      "id": "26",
      "label": "GoodWaterPlantSpot 6",
      "bpid": "GoodWaterPlantSpot",
      "initScript": `prop x setTo 191.07
prop y setTo -93.94`
    },
    {
      "id": "27",
      "label": "StreamBed",
      "bpid": "StreamBed",
      "initScript": `prop x setTo 0
prop y setTo 0`
    },
    {
      "id": "31",
      "label": "GoodFishSpawningSpot 1",
      "bpid": "GoodFishSpawningSpot",
      "initScript": `prop x setTo -10.14
prop y setTo -68.97`
    },
    {
      "id": "32",
      "label": "GoodFishSpawningSpot 2",
      "bpid": "GoodFishSpawningSpot",
      "initScript": `prop x setTo -113.14
prop y setTo -254.56`
    },
    {
      "id": "35",
      "label": "Mud 4",
      "bpid": "Mud",
      "initScript": `prop x setTo -311.83
prop y setTo 208.01`
    },
    {
      "id": "36",
      "label": "Rock 4",
      "bpid": "Rock",
      "initScript": `prop x setTo -361.33
prop y setTo 286.15`
    },
    {
      "id": "37",
      "label": "Mud 5",
      "bpid": "Mud",
      "initScript": `prop x setTo 336.39
prop y setTo 42.35`
    },
    {
      "id": "38",
      "label": "Twig 8",
      "bpid": "Twig",
      "initScript": `prop x setTo 325.18
prop y setTo -184.35`
    },
    {
      "id": "39",
      "label": "Rock 5",
      "bpid": "Rock",
      "initScript": `prop x setTo 348.90
prop y setTo -106.61`
    },
    {
      "id": "40",
      "label": "Rock 6",
      "bpid": "Rock",
      "initScript": `prop x setTo -341.33
prop y setTo 154.86`
    },
    {
      "id": "41",
      "label": "Mud ",
      "bpid": "Mud",
      "initScript": `prop x setTo -332.42
prop y setTo 222.62`
    },
    {
      "id": "42",
      "label": "Twig 9",
      "bpid": "Twig",
      "initScript": `prop x setTo -349.77
prop y setTo -127.91`
    },
    {
      "id": "43",
      "label": "Twig 10",
      "bpid": "Twig",
      "initScript": `prop x setTo -341.43
prop y setTo -94.20`
    },
    {
      "id": "44",
      "label": "WaterSpeedBottom",
      "bpid": "WaterSpeed",
      "initScript": `prop x setTo 2.9
prop y setTo 196.1
prop location setTo 'belowDam'`
    },
    {
      "id": "45",
      "label": "WaterSpeedTop",
      "bpid": "WaterSpeed",
      "initScript": `prop x setTo 2.42
prop y setTo -159.67
prop zIndex setTo -200
prop location setTo 'aboveDam'`
    },
    {
      "id": "46",
      "label": "Noticing46",
      "bpid": "Noticing",
      "initScript": `prop x setTo -246.11
prop y setTo -403.17`
    },
    {
      "id": "47",
      "label": "GreatSpotForDam47",
      "bpid": "GreatSpotForDam",
      "initScript": `prop x setTo 1.59
prop y setTo -0.83`
    }
  ]
}