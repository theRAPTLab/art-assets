{
  "id": "wetlands_beavers_flow",
  "label": "Wetlands: Beavers Flow",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": "0x8A9A5B",
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [
    {
      "initScript": ``,
      "endScript": ``
    }
  ],
  "blueprints": [
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

# PROGRAM INIT
addFeature IU
addFeature Population
prop global.visible setTo false

// current col / row
// 0 means we haven't started this run yet
addProp col number 0
addProp row number 0

// choices in this run
addProp lastColChoice string ''

// choices across runs
addProp collectedMaterialsCount number 0
addProp workedOnDamCount number 0
addProp workedOnLodgeCount number 0
addProp playedCount number 0
addProp ateAndStoredCount number 0

// temp stuff for passing in to loops
addProp tempNum number 0
addProp tempString string ''
addProp tempBool boolean false
addProp rowDiffIsBig boolean false

// setup the lastY to reflect the last action so that
// we can shift up and down and position between the last and current
addProp lastY number -60
addProp newY number 0

// setup the basic properties for the flow actions
featCall global.IU setupFunction 'initFlowActions' [[
  featCall global.Population charactersForEach FlowAction [[
    featCall FlowAction.IU callFunction 'initActionDisplay'
  ]]
]]

// tell all the flow actions to update their display based on
// the current col and most recent choice (if any)
featCall global.IU setupFunction 'updateFlowActions' [[
  featCall global.Population charactersForEach FlowAction [[
    featCall FlowAction.IU callFunction 'updateActionDisplay'
  ]]
]]
# PROGRAM UPDATE`
    },
    {
      "name": "FlowDirector",
      "scriptText": `# BLUEPRINT FlowDirector
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Population
addFeature Costume
addFeature Physics
addFeature Touches

featProp FlowDirector.Costume.costumeName setTo 'GEN_circle.json'
featProp FlowDirector.Costume.scale setTo 0.3

featCall FlowDirector.Touches monitor 'FlowAction' c2b
featCall FlowDirector.Touches monitor 'Start' c2b

addProp tempNum number 0
addProp needFlip boolean false
addProp arrowCostumeName string ''

# PROGRAM UPDATE

when FlowDirector centerfirsttouches Start [[
  // re-set the global properties so that we can display what is going on in this set of choices
  prop global.col setTo 0
  prop global.row setTo 0
  prop global.lastColChoice setTo ''

  featCall FlowDirector.Population charactersForEach Arrow [[
    prop Arrow.visible setTo false
    // Set this to the middle (update if we move the arrows)
    prop Arrow.y setTo -60
  ]]

  // we are starting a new run, so clear things out and get us ready
  featCall global.IU callFunction 'initFlowActions'
  featCall global.IU callFunction 'updateFlowActions'
]]

when FlowDirector centerfirsttouches FlowAction [[
  // ignore if we have been locked 
  ifProp FlowAction.locked equal false [[
    // the not chosen yet actions are all the ones to the right of the current row, so ignore if we are one of those
    ifProp FlowAction.actionChoice notEqual 'not chosen yet' [[
      // mark this FlowAction selected
      prop FlowAction.selected setTo true

      // before we set the new context, use the old one to draw an arrow
      // if this is the first col, draw the arrow from the start (treat as row 2)
      ifProp global.col equal 0 [[
        prop global.row setTo 2
        // this should be the middle / where start is
        prop global.lastY setTo -60

      ]]

      propPush global.row
      propPush FlowAction.row
      stackSub 
      propPop FlowDirector.tempNum

      // check if we need to flip it, and if so mul -1 to get abs
      prop FlowDirector.needFlip setTo true

      ifProp FlowDirector.tempNum lessThan 0 [[
        prop FlowDirector.needFlip setTo false
        prop FlowDirector.tempNum mul -1
      ]]

      // check scale of difference to shift arrow up or down
      prop global.rowDiffIsBig setTo false

      // have 3 existing arrows and then scale, rotate, and shift up or down
      // to scale, select different artowork that is longer
      
      // if rows are same, use short, straight
      ifProp FlowDirector.tempNum equal 0 [[
        prop FlowDirector.arrowCostumeName setTo 'WL_arrow_short.png'
      ]]

      // if rows are gap of 1, use medium angled (flip horiztonal if needed) 
      ifProp FlowDirector.tempNum equal 1 [[
        prop FlowDirector.arrowCostumeName setTo 'WL_arrow_medium.png'
      ]]

      // if rows are gap of 2, use long angled, (flip horiztonal if needed) 
      ifProp FlowDirector.tempNum equal 2 [[
        prop global.rowDiffIsBig setTo true
        prop FlowDirector.arrowCostumeName setTo 'WL_arrow_long.png'
      ]] 
      
      // pass variables up to global so we can use them in the next call
      propPush FlowDirector.arrowCostumeName
      propPop global.tempString
      propPush FlowDirector.needFlip
      propPop global.tempBool
      propPush FlowAction.y
      propPop global.newY

      featCall FlowDirector.Population charactersForEach Arrow [[
        propPush global.col
        propPush Arrow.col
        stackSub
        propPop global.tempNum

        // if they are the same col and thus this is the right arrow
        ifProp global.tempNum equal 0 [[
          // set the costume name based on distance (this is set above)
          propPush global.tempString
          featPropPop Arrow.Costume.costumeName
          
          // shift up or down if needed
          // to be in-between the last and current action
          propPush global.lastY
          propPush global.newY
          stackSub 
          propPop global.tempNum
          
          propPush global.newY
          propPop Arrow.y

          ifProp global.tempNum greaterThan 0 [[
              prop Arrow.y sub 100
              ifProp global.rowDiffIsBig equal true [[
                prop Arrow.y sub 100
              ]]

          ]]
          ifProp global.tempNum lessThan 0 [[
              prop Arrow.y add 100
              ifProp global.rowDiffIsBig equal true [[
                prop Arrow.y add 100
              ]]
          ]]

          // flip it based on direction if up or down (this is set above)
          propPush global.tempBool
          featPropPop Arrow.Costume.flipY

          // make it visible
          prop Arrow.visible setTo true

          // update the last y to be where the action was
          propPush global.newY
          propPop global.lastY
        ]]
      ]]
 
      // set the global context to be this col and row so we know what was selected
      // this helps in iterating through the FlowActions to update them (see updateFlowActions)
      propPush FlowAction.col
      propPop global.col
      propPush FlowAction.row
      propPop global.row

      // record this as the lastColChoice so we know what's what 
      propPush FlowAction.actionChoice
      propPop global.lastColChoice

      // do any global variable updating based on what type we are so displays update
      ifProp FlowAction.actionChoice equalToOption 'collect materials' [[
        prop global.collectedMaterialsCount add 1
      ]]
      ifProp FlowAction.actionChoice equalToOption 'work on dam' [[
        prop global.workedOnDamCount add 1
      ]]
      ifProp FlowAction.actionChoice equalToOption 'work on lodge' [[
        prop global.workedOnLodgeCount add 1
      ]]
      ifProp FlowAction.actionChoice equalToOption 'play' [[
        prop global.playedCount add 1
      ]]
      ifProp FlowAction.actionChoice equalToOption 'eat and store food' [[
        prop global.ateAndStoredCount add 1
      ]]

      // update all of the flowActions
      featCall global.IU callFunction 'updateFlowActions'
    ]]
  ]]
]]`
    },
    {
      "name": "FlowAction",
      "scriptText": `# BLUEPRINT FlowAction
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Physics
addFeature Touches
addFeature Costume
addFeature IU

featProp FlowAction.Costume.costumeName setTo 'WL_seq_blank.png'
featProp FlowAction.Costume.scale setTo 0.4
prop FlowAction.alpha setTo 0.3

// where is this in the grid
addProp row number 0
addProp col number 0

// is this item locked (the column was selected) and was it the one chosen?
addProp locked boolean false
addProp selected boolean false

// All the choices of actions (not all are displayed in each column)
addProp actionChoice string ''
prop FlowAction.actionChoice addOption 'not chosen yet' 'not chosen yet'
prop FlowAction.actionChoice addOption 'collect materials' 'collect materials'
prop FlowAction.actionChoice addOption 'work on dam' 'work on dam'
prop FlowAction.actionChoice addOption 'work on lodge' 'work on lodge'
prop FlowAction.actionChoice addOption 'play' 'play'
prop FlowAction.actionChoice addOption 'eat and store food' 'eat and store food'
prop FlowAction.actionChoice setToOption 'not chosen yet'

addProp tempNum number 0

featCall FlowAction.IU setupFunction initActionDisplay [[
  prop FlowAction.locked setTo false
  prop FlowAction.selected setTo false
  prop FlowAction.alpha setTo 0.3
  prop FlowAction.actionChoice setToOption 'not chosen yet'
  featProp FlowAction.Costume.costumeName setTo 'WL_seq_blank.png'
]]

featCall FlowAction.IU setupFunction 'updateActionDisplay' [[

  // do some quick math so we know the relative difference between our current action and the current col
  // 0 means same col, 1 means this is directly to the right, 2 means further
  propPush global.col
  propPush FlowAction.col
  stackSub
  propPop FlowAction.tempNum

  // dbgOut {{ 'global.col: ' + global.getProp('col').value + 'FlowAction.col: ' + FlowAction.getProp('col').value + 'FlowAction.tempNum: ' + FlowAction.getProp('tempNum').value }}

  // if we are the current col, lock
  ifProp tempNum equal 0 [[
    // lock this row
    prop FlowAction.locked setTo true
    // if you aren't the selected one, then fade
    ifProp FlowAction.selected equal false [[
      prop FlowAction.alpha setTo 0.3
    ]]
  ]]

  // if we are the next valid set of choices, set up the options
  ifProp tempNum equal 1 [[
    prop FlowAction.alpha setTo 1

    // This is the first column because the prior was empty, so display initial options
    ifProp global.lastColChoice equal '' [[
      ifProp FlowAction.row equal 1 [[
        prop FlowAction.actionChoice setToOption 'collect materials'
      ]]
      ifProp FlowAction.row equal 2 [[
        prop FlowAction.actionChoice setToOption 'eat and store food'

      ]]
      ifProp FlowAction.row equal 3 [[
        prop FlowAction.actionChoice setToOption 'play'
      ]]
    ]]

    ifProp global.lastColChoice equal 'collect materials' [[
      ifProp FlowAction.row equal 1 [[
        prop FlowAction.actionChoice setToOption 'work on dam'
      ]]
      ifProp FlowAction.row equal 2 [[
        prop FlowAction.actionChoice setToOption 'eat and store food'
      ]]
      ifProp FlowAction.row equal 3 [[
        prop FlowAction.actionChoice setToOption 'play'
      ]]
    ]]

    ifProp global.lastColChoice equal 'play' [[
      ifProp FlowAction.row equal 1 [[
        prop FlowAction.actionChoice setToOption 'eat and store food'
      ]]
      ifProp FlowAction.row equal 2 [[
        prop FlowAction.actionChoice setToOption 'work on dam'
      ]]
      ifProp FlowAction.row equal 3 [[
        prop FlowAction.actionChoice setToOption 'play'
      ]]
    ]]

    ifProp global.lastColChoice equal 'eat and store food' [[
      ifProp FlowAction.row equal 1 [[
        prop FlowAction.actionChoice setToOption 'collect materials'
      ]]
      ifProp FlowAction.row equal 2 [[
        prop FlowAction.actionChoice setToOption 'eat and store food'
      ]]
      ifProp FlowAction.row equal 3 [[
        prop FlowAction.actionChoice setToOption 'play'
      ]]
    ]]

    ifProp global.lastColChoice equal 'work on dam' [[
      ifProp FlowAction.row equal 1 [[
        prop FlowAction.actionChoice setToOption 'eat and store food'
      ]]
      ifProp FlowAction.row equal 2 [[
        prop FlowAction.actionChoice setToOption 'work on lodge'
      ]]
      ifProp FlowAction.row equal 3 [[
        prop FlowAction.actionChoice setToOption 'play'
      ]]
    ]]

    ifProp global.lastColChoice equal 'work on lodge' [[
      ifProp FlowAction.row equal 1 [[
        prop FlowAction.actionChoice setToOption 'eat and store food'
      ]]
      ifProp FlowAction.row equal 2 [[
        prop FlowAction.actionChoice setToOption 'work on dam'
      ]]
      ifProp FlowAction.row equal 3 [[
        prop FlowAction.actionChoice setToOption 'work on lodge'
      ]]
    ]]

  ]]

  // update the art based on the current selection
  ifProp FlowAction.actionChoice equalToOption 'not chosen yet' [[
    featProp FlowAction.Costume.costumeName setTo 'WL_seq_blank.png'
  ]]
  ifProp FlowAction.actionChoice equalToOption 'collect materials' [[
    featProp FlowAction.Costume.costumeName setTo 'WL_seq_collect.png'
  ]]
  ifProp FlowAction.actionChoice equalToOption 'work on dam' [[
    featProp FlowAction.Costume.costumeName setTo 'WL_seq_dam.png'
  ]]
  ifProp FlowAction.actionChoice equalToOption 'work on lodge' [[
    featProp FlowAction.Costume.costumeName setTo 'WL_seq_lodge.png'
  ]]
  ifProp FlowAction.actionChoice equalToOption 'play' [[
    featProp FlowAction.Costume.costumeName setTo 'WL_seq_play.png'
  ]]
  ifProp FlowAction.actionChoice equalToOption 'eat and store food' [[
    featProp FlowAction.Costume.costumeName setTo 'WL_seq_eat.png'
  ]]
]]

# PROGRAM UPDATE`
    },
    {
      "name": "Teacher",
      "scriptText": `# BLUEPRINT Teacher
# TAG isCharControllable false
# TAG isPozyxControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp Teacher.Costume.costumeName setTo 'GEN_onexone.json'
prop Teacher.visible setTo false

# PROGRAM UPDATE`
    },
    {
      "name": "Unused",
      "scriptText": `# BLUEPRINT Unused
# TAG isCharControllable false
# TAG isPozyxControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp Unused.Costume.costumeName setTo 'GEN_onexone.json'
prop Unused.visible setTo false

# PROGRAM UPDATE`
    },
    {
      "name": "Start",
      "scriptText": `# BLUEPRINT Start
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Physics
addFeature Costume
featProp Start.Costume.costumeName setTo 'KB_marker_home.png'
featProp Start.Costume.scale setTo 0.4
# PROGRAM UPDATE

`
    },
    {
      "name": "UpdateText",
      "scriptText": `# BLUEPRINT UpdateText
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Graphing
addFeature Costume
featProp UpdateText.Costume.costumeName setTo 'GEN_onexone.json'
featProp UpdateText.Graphing.wordWrapWidth setTo 500
featProp UpdateText.Graphing.text setTo 'Updates will appear here temporarily'

# PROGRAM UPDATE

every 0.5 runAtStart [[
  exprPush {{'collectedMaterialsCount: ' + global.getProp('collectedMaterialsCount').value + ', workedOnDamCount: ' + global.getProp('workedOnDamCount').value +', workedOnLodgeCount: ' + global.getProp('workedOnLodgeCount').value +', playedCount: ' + global.getProp('playedCount').value +', ateAndStoredCount: ' + global.getProp('ateAndStoredCount').value}}
  featPropPop  UpdateText.Graphing.text 
]]


`
    },
    {
      "name": "Arrow",
      "scriptText": `# BLUEPRINT Arrow
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp Arrow.Costume.costumeName setTo 'WL_arrow_short.png'
featProp Arrow.Costume.scale setTo 0.5
prop Arrow.visible setTo false

addProp col number 0

# PROGRAM UPDATE`
    },
    {
      "name": "EcosystemDiversity",
      "scriptText": `# BLUEPRINT EcosystemDiversity
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Graphing

featProp EcosystemDiversity.Costume.costumeName setTo 'WL_ecosystem_status_1.png'
featProp EcosystemDiversity.Costume.scale setTo 0.2
featProp EcosystemDiversity.Graphing.text setTo 'helpful diversity'

addProp diversityLevel number 0
prop diversityLevel setMin 0
prop diversityLevel setMax 10

featProp  EcosystemDiversity.Graphing.meterProp setTo 'diversityLevel'
addProp tempNum number 0
# PROGRAM UPDATE

every 0.5 runAtStart [[
   // exprPush {{'collectedMaterialsCount: ' + global.getProp('collectedMaterialsCount').value + ', workedOnDamCount: ' + global.getProp('workedOnDamCount').value +', workedOnLodgeCount: ' + global.getProp('workedOnLodgeCount').value +', playedCount: ' + global.getProp('playedCount').value +', ateAndStoredCount: ' + global.getProp('ateAndStoredCount').value}}
  prop EcosystemDiversity.tempNum setTo 2
  propPush EcosystemDiversity.tempNum
  propPush global.workedOnDamCount
  stackDiv
  propPop EcosystemDiversity.diversityLevel

  // set the art and meter color to show how we are doing
  ifProp EcosystemDiversity.diversityLevel equal 0 [[
    featProp EcosystemDiversity.Costume.costumeName setTo 'WL_ecosystem_status_1.png'
    featProp EcosystemDiversity.Graphing.meterColor setTo 16737792
  ]]
  ifProp EcosystemDiversity.diversityLevel greaterThan 0 [[
    featProp EcosystemDiversity.Costume.costumeName setTo 'WL_ecosystem_status_2.png'
    featProp EcosystemDiversity.Graphing.meterColor setTo 65280
  ]]
  ifProp EcosystemDiversity.diversityLevel greaterThan 4 [[
    featProp EcosystemDiversity.Costume.costumeName setTo 'WL_ecosystem_status_3.png'
    featProp EcosystemDiversity.Graphing.meterColor setTo 65280
  ]]
  ifProp EcosystemDiversity.diversityLevel greaterThan 6 [[
    featProp EcosystemDiversity.Costume.costumeName setTo 'WL_ecosystem_status_4.png'
    featProp EcosystemDiversity.Graphing.meterColor setTo 65280
  ]]
]]

`
    },
    {
      "name": "Timer",
      "scriptText": `# BLUEPRINT Timer
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// 🔎 WHAT DOES THIS CHARACTER DO?
// 🔎 This is a timer character so that we can see how much time has passed in our model
// 🔎 We can use that time to think about how long the ecosystem survives if we want

# PROGRAM INIT

addFeature Graphing
addFeature Costume

// Hide the actual art since we just want the text to displaay
featProp Timer.Costume.costumeName setTo 'GEN_onexone.json'
featProp Timer.Costume.scale setTo 1

// A property to track the time
addProp time number 0

// Unit of time
addProp timeUnit string 'days'

// set the initial label and then update it below during update
exprPush {{ 'Time: ' + Timer.getProp('time').value + ' ' + Timer.getProp('timeUnit').value}}
featPropPop Timer.Graphing.text

# PROGRAM UPDATE
// every second, add one to the time property and display the new time in the format \"Time: #\"\"
every 1 runAtStart [[
  prop Timer.time add 1
  exprPush {{ 'Time: ' + Timer.getProp('time').value + ' ' + Timer.getProp('timeUnit').value}}
  featPropPop Timer.Graphing.text
]]`
    },
    {
      "name": "EnergyConversionBackground",
      "scriptText": `# BLUEPRINT EnergyConversionBackground
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp EnergyConversionBackground.Costume.costumeName setTo 'WL_conversions_bg.png'
featProp EnergyConversionBackground.Costume.scale setTo 0.5
prop EnergyConversionBackground.zIndex setTo -500

ifProp global.showConversionCounts equal false [[
  prop EnergyConversionBackground.visible setTo false
]]
# PROGRAM UPDATE`
    }
  ],
  "instances": [
    {
      "id": "0",
      "label": "FlowAction 1 1",
      "bpid": "FlowAction",
      "initScript": `prop x setTo -190
prop y setTo -270
prop FlowAction.col setTo 1
prop FlowAction.row setTo 1
`
    },
    {
      "id": "1",
      "label": "FlowAction 1 2",
      "bpid": "FlowAction",
      "initScript": `prop x setTo -190
prop y setTo -60
prop FlowAction.col setTo 1
prop FlowAction.row setTo 2`
    },
    {
      "id": "2",
      "label": "FlowAction 1 3",
      "bpid": "FlowAction",
      "initScript": `prop x setTo -190
prop y setTo 160
prop FlowAction.col setTo 1
prop FlowAction.row setTo 3`
    },
    {
      "id": "3",
      "label": "FlowAction 2 1",
      "bpid": "FlowAction",
      "initScript": `prop x setTo 50
prop y setTo -270
prop FlowAction.col setTo 2
prop FlowAction.row setTo 1`
    },
    {
      "id": "4",
      "label": "FlowAction 2 2",
      "bpid": "FlowAction",
      "initScript": `prop x setTo 50
prop y setTo -60
prop FlowAction.col setTo 2
prop FlowAction.row setTo 2`
    },
    {
      "id": "5",
      "label": "FlowAction 2 3",
      "bpid": "FlowAction",
      "initScript": `prop x setTo 50
prop y setTo 160
prop FlowAction.col setTo 2
prop FlowAction.row setTo 3`
    },
    {
      "id": "6",
      "label": "FlowAction 3 1",
      "bpid": "FlowAction",
      "initScript": `prop x setTo 290
prop y setTo -270
prop FlowAction.col setTo 3
prop FlowAction.row setTo 1`
    },
    {
      "id": "7",
      "label": "FlowAction 3 2",
      "bpid": "FlowAction",
      "initScript": `prop x setTo 290
prop y setTo -60
prop FlowAction.col setTo 3
prop FlowAction.row setTo 2`
    },
    {
      "id": "8",
      "label": "FlowAction 3 3",
      "bpid": "FlowAction",
      "initScript": `prop x setTo 290
prop y setTo 160
prop FlowAction.col setTo 3
prop FlowAction.row setTo 3`
    },
    {
      "id": "9",
      "label": "Start",
      "bpid": "Start",
      "initScript": `prop x setTo -387.43
prop y setTo -60`
    },
    {
      "id": "10",
      "label": "UpdateText",
      "bpid": "UpdateText",
      "initScript": `prop x setTo 163.28
prop y setTo 290.02`
    },
    {
      "id": "11",
      "label": "Arrow 1",
      "bpid": "Arrow",
      "initScript": `prop x setTo -307.23
prop y setTo -60
prop Arrow.col setTo 0
`
    },
    {
      "id": "12",
      "label": "Arrow 2",
      "bpid": "Arrow",
      "initScript": `prop x setTo -65.9
prop y setTo -60
prop Arrow.col setTo 1`
    },
    {
      "id": "13",
      "label": "Arrow 3",
      "bpid": "Arrow",
      "initScript": `prop x setTo 174.29
prop y setTo -60
prop Arrow.col setTo 2`
    },
    {
      "id": "14",
      "label": "EcosystemDiversityMeter",
      "bpid": "EcosystemDiversity",
      "initScript": `prop x setTo -303.93
prop y setTo 270.92`
    },
    {
      "id": "15",
      "label": "Timer15",
      "bpid": "Timer",
      "initScript": `prop Timer.x setTo 491.69
prop Timer.y setTo -402.96`
    }
  ]
}