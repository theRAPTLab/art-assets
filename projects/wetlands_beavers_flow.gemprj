{
  "id": "wetlands_beavers_flow",
  "label": "Wetlands: Beavers Flow",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": "0x8A9A5B",
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [
    {
      "initScript": ``,
      "endScript": `
        // Generate a summary of the last run 
        featCall global.Graphing showMessage 'Nice Work! Here is a summary of what you did:'
        featCall global.Graphing showMessage ''
        featCall global.IU logString 'SUMMARY:'

        exprPush {{'Total run was ' + global.getProp('timeCount').value + ' ' + global.getProp('timeUnit').value}}
        propPop global.tempString
        propPush global.tempString
        featPropPop global.IU.logStringText
        featCall global.IU logProperty
        propPush global.tempString
        featPropPop global.Graphing.messageStringToShow
        featCall global.Graphing showMessageProp

        exprPush {{'Collected materials ' + global.getProp('collectedMaterialsCount').value + ' times'}}
        propPop global.tempString
        propPush global.tempString
        featPropPop global.IU.logStringText
        featCall global.IU logProperty
        propPush global.tempString
        featPropPop global.Graphing.messageStringToShow
        featCall global.Graphing showMessageProp

        exprPush {{'Worked on dam ' + global.getProp('workedOnDamCount').value + ' times, and lodge ' + global.getProp('workedOnLodgeCount').value + ' times'}}
        propPop global.tempString
        propPush global.tempString
        featPropPop global.IU.logStringText
        featCall global.IU logProperty
        propPush global.tempString
        featPropPop global.Graphing.messageStringToShow
        featCall global.Graphing showMessageProp

        exprPush {{'Ate and stored food ' + global.getProp('ateAndStoredCount').value + ' times, and played ' + global.getProp('playedCount').value + ' times'}}
        propPop global.tempString
        propPush global.tempString
        featPropPop global.IU.logStringText
        featCall global.IU logProperty
        propPush global.tempString
        featPropPop global.Graphing.messageStringToShow
        featCall global.Graphing showMessageProp

        // log that we are done
        featCall global.IU logString 'Ending model run'
      `
    }
  ],
  "blueprints": [
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

# PROGRAM INIT
addFeature IU
addFeature Population
addFeature Graphing

prop global.visible setTo false

// 🔎 system properties that we want to track
// 🔎 all of these are in a range of 0-10 to help us
// 🔎 think about them as going from low to high in a similar manner
// 🔎 0 is none, 1 is a little, 5 is medium amount, 10 is a lot
addProp damSize number 0
addProp lodgeSize number 0
addProp slowWaterAmount number 0
addProp numberBeavers number 0
addProp numberFish number 0
addProp happyFishers number 0
addProp numberWaterPlants number 0
addProp pollutionCleaned number 0
addProp chanceBeaversHurt number 10
addProp beaverFun number 0
addProp beaversReadyForWinter number 0
// this prop is for the EcosystemSummary character to change its art
addProp systemSummaryLevel number 1

// 🔎 choices / counts across runs
addProp canBuildLodge boolean false
addProp timeCount number 0
addProp timeUnit string 'days'
addProp collectedMaterialsCount number 0
addProp workedOnDamCount number 0
addProp workedOnLodgeCount number 0
addProp playedCount number 0
addProp ateAndStoredCount number 0

// current col / row
// 0 means we havent started this run yet
addProp col number 0
addProp row number 0

// setup the lastY to reflect the last action so that
// we can shift up and down and position between the last and current
addProp lastY number -60
addProp newY number 0

// last action chosen by the player
addProp playerActionChoice string ''

// temp stuff for passing in to loops
addProp tempNum number 0
addProp tempString string ''
addProp tempBool boolean false
addProp rowDiffIsBig boolean false

// This function is alled to update all of the variables in the system
// whenever a new action is chosen
featCall global.IU setupFunction 'updateVariables' [[
  // ✏️ CHANGE How all of the variables are impacted by beaver behavior
  // 🔎 Reminder: all of these numbers are between 0-10 to help us
  // 🔎 think about them as going from low to high in a similar manner
  // 🔎 0 is none, 1 is a little, 5 is medium amount, 10 is a lot

  ifProp global.playerActionChoice equal 'collect materials' [[
    featCall global.IU logString 'Beaver collected materials and can now work on the dam or lodge'
    prop global.collectedMaterialsCount add 1
  ]]
  ifProp global.playerActionChoice equal 'work on dam' [[
    featCall global.IU logString 'Beaver worked on the dam'
    prop global.workedOnDamCount add 1

    ifProp global.damSize lessThan 10 [[
      featCall global.IU logString 'Dam ⬆'
      prop global.damSize add 1

      // when the damSize first hits 1, update our system summary to show the dam
      ifProp global.damSize equal 1 [[
        // update the summary to show that we have a dam
        prop global.systemSummaryLevel setTo 2
      ]]

      // Whenever the dam gets bigger, we have more slow water behind it
      featCall global.IU logString 'Dam ⬆ --> Slow Water ⬆'
      prop global.slowWaterAmount add 1

      // when there is more slow water, we might get more water plants
      ifProp global.slowWaterAmount greaterThan 3 [[
        featCall global.IU logString 'Slow Water ⬆ --> Water Plants ⬆ (if there is enough)'
        prop global.numberWaterPlants add 1

        // update the summary to show that we have plants now
        ifProp global.numberWaterPlants equal 1 [[
          prop global.systemSummaryLevel setTo 3
        ]]

        ifProp global.numberWaterPlants greaterThan 3 [[
          ifProp global.pollutionCleaned lessThanOrEqual 10 [[
            featCall global.IU logString 'Water Plants ⬆ --> Pollution Cleaned ⬆ (if enough)'
            prop global.pollutionCleaned add 1
          ]]
        ]]
      ]]

      // when there is more slow water, we might get more fish appearing
      ifProp global.slowWaterAmount greaterThan 4 [[
        featCall global.IU logString 'Slow Water ⬆ --> Fish ⬆ (if there is enough)'
        prop global.numberFish add 1
        
        featCall global.IU logString 'Fish ⬆ --> Happy Fishers ⬆'
        prop global.happyFishers add 1

        // update the summary to show that we have a fish now
        ifProp global.numberFish equal 1 [[
          prop global.systemSummaryLevel setTo 4
        ]]
      ]]

      // when there is enough water, the beavers can also build the lodge
      ifProp global.slowWaterAmount greaterThan 5 [[
        featCall global.IU logString 'Slow Water ⬆ --> Lodge is an option)'
        prop global.canBuildLodge setTo true
      ]]

      // When the dam is big enough it can help filter pollution
      ifProp global.damSize greaterThan 5 [[
        ifProp global.pollutionCleaned lessThanOrEqual 10 [[
          featCall global.IU logString 'Dam ⬆ --> Pollution Cleaned ⬆'
          prop global.pollutionCleaned add 1
        ]]
      ]]
    ]]
  ]]

  ifProp global.playerActionChoice equal 'work on lodge' [[
    featCall global.IU logString 'Beaver worked on the lodge'
    prop global.workedOnLodgeCount add 1

    ifProp global.lodgeSize lessThan 10 [[
      featCall global.IU logString 'Lodge Size ⬆'
      prop global.lodgeSize add 1

      ifProp global.chanceBeaversHurt greaterThan 0 [[
        featCall global.IU logString 'Lodge Size ⬆ --> Chance Beavers Hurt ⬇'
        prop global.chanceBeaversHurt sub 1
        prop global.systemSummaryLevel setTo 5
      ]]
    ]]


  ]]

  ifProp global.playerActionChoice equal 'play' [[
    featCall global.IU logString 'Beaver played'
    prop global.playedCount add 1

    ifProp global.beaverFun lessThanOrEqual 10 [[
      featCall global.IU logString 'Play ⬆ --> Beaver Fun ⬆'
      prop global.beaverFun add 1
    ]]
  ]]

  ifProp global.playerActionChoice equal 'eat and store food' [[
    featCall global.IU logString 'Beaver ate and stored some food for winter'
    prop global.ateAndStoredCount add 1

    ifProp global.beaversReadyForWinter lessThanOrEqual 10 [[
      featCall global.IU logString 'Stored Food ⬆ --> Beaver Ready For Winter ⬆'
      prop global.beaversReadyForWinter add 1
    ]]
  ]]

]]

// setup the basic properties for the flow actions
featCall global.IU setupFunction 'initFlowActions' [[
  featCall global.Population charactersForEach FlowAction [[
    featCall FlowAction.IU callFunction 'initActionDisplay'
  ]]
]]

// tell all the flow actions to update their display based on
// the current col and most recent choice (if any)
featCall global.IU setupFunction 'updateFlowActions' [[
  featCall global.Population charactersForEach FlowAction [[
    featCall FlowAction.IU callFunction 'updateActionDisplay'
  ]]
]]

# PROGRAM UPDATE

onEvent START [[
  featCall global.IU logString '--------------------------'
  featCall global.IU logString 'Starting model run'
]]`
    },
    {
      "name": "FlowDirector",
      "scriptText": `# BLUEPRINT FlowDirector
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Population
addFeature Costume
addFeature Physics
addFeature Touches

featProp FlowDirector.Costume.costumeName setTo 'WL_beaver.png'
featProp FlowDirector.Costume.scale setTo 0.15

featCall FlowDirector.Touches monitor 'FlowAction' c2b
featCall FlowDirector.Touches monitor 'Start' c2b

addProp tempNum number 0
addProp needFlip boolean false
addProp arrowCostumeName string ''

addProp touchTimer number 0

# PROGRAM UPDATE

when FlowDirector centertouches Start [[

  every 0.1 runAtStart [[
    featProp FlowDirector.Costume.glow setTo 1
    prop FlowDirector.touchTimer add 1
    ifProp FlowDirector.touchTimer equal 10 [[
      // re-set the global properties so that we can display what is going on in this set of choices
      prop global.col setTo 0
      prop global.row setTo 0
      prop global.playerActionChoice setTo ''
      prop global.timeCount add 1

      featCall global.IU logString '--------------------------'
      exprPush {{ 'ROUND ' + global.getProp('timeCount').value + ' Beaver selecting a set of actions' }}
      featPropPop global.IU.logStringText
      featCall global.IU logProperty

      featCall FlowDirector.Population charactersForEach Arrow [[
        prop Arrow.visible setTo false
        // Set this to the middle (update if we move the arrows)
        prop Arrow.y setTo -60
      ]]

      // we are starting a new run, so clear things out and get us ready
      featCall global.IU callFunction 'initFlowActions'
      featCall global.IU callFunction 'updateFlowActions'
    ]]
  ]]
]]

when FlowDirector centerlasttouches Start [[
  prop FlowDirector.touchTimer setTo 0
  featProp FlowDirector.Costume.glow setTo 0
]]

when FlowDirector centertouches FlowAction [[
  every 0.1 runAtStart [[
    // ignore if we have been locked
    ifProp FlowAction.locked equal false [[

      // the not chosen yet actions are all the ones to the right of the current row, so ignore if we are one of those
      ifProp FlowAction.actionChoice notEqual 'not chosen yet' [[

        featProp FlowDirector.Costume.glow setTo 1
        prop FlowDirector.touchTimer add 1

        ifProp FlowDirector.touchTimer equal 10 [[

          // mark this FlowAction selected
          prop FlowAction.selected setTo true

          // before we set the new context, use the old one to draw an arrow
          // if this is the first col, draw the arrow from the start (treat as row 2)
          ifProp global.col equal 0 [[
            prop global.row setTo 2
            // this should be the middle / where start is
            prop global.lastY setTo -60
          ]]

          propPush global.row
          propPush FlowAction.row
          stackSub
          propPop FlowDirector.tempNum

          // check if we need to flip it, and if so mul -1 to get abs
          prop FlowDirector.needFlip setTo true

          ifProp FlowDirector.tempNum lessThan 0 [[
            prop FlowDirector.needFlip setTo false
            prop FlowDirector.tempNum mul -1
          ]]

          // check scale of difference to shift arrow up or down
          prop global.rowDiffIsBig setTo false

          // have 3 existing arrows and then scale, rotate, and shift up or down
          // to scale, select different artowork that is longer

          // if rows are same, use short, straight
          ifProp FlowDirector.tempNum equal 0 [[
            prop FlowDirector.arrowCostumeName setTo 'WL_arrow_short.png'
          ]]

          // if rows are gap of 1, use medium angled (flip horiztonal if needed)
          ifProp FlowDirector.tempNum equal 1 [[
            prop FlowDirector.arrowCostumeName setTo 'WL_arrow_medium.png'
          ]]

          // if rows are gap of 2, use long angled, (flip horiztonal if needed)
          ifProp FlowDirector.tempNum equal 2 [[
            prop global.rowDiffIsBig setTo true
            prop FlowDirector.arrowCostumeName setTo 'WL_arrow_long.png'
          ]]

          // pass variables up to global so we can use them in the next call
          propPush FlowDirector.arrowCostumeName
          propPop global.tempString
          propPush FlowDirector.needFlip
          propPop global.tempBool
          propPush FlowAction.y
          propPop global.newY

          featCall FlowDirector.Population charactersForEach Arrow [[
            propPush global.col
            propPush Arrow.col
            stackSub
            propPop global.tempNum

            // if they are the same col and thus this is the right arrow
            ifProp global.tempNum equal 0 [[
              // set the costume name based on distance (this is set above)
              propPush global.tempString
              featPropPop Arrow.Costume.costumeName

              // shift up or down if needed
              // to be in-between the last and current action
              propPush global.lastY
              propPush global.newY
              stackSub
              propPop global.tempNum

              propPush global.newY
              propPop Arrow.y

              ifProp global.tempNum greaterThan 0 [[
                prop Arrow.y sub 100
                ifProp global.rowDiffIsBig equal true [[
                  prop Arrow.y sub 100
                ]]

              ]]
              ifProp global.tempNum lessThan 0 [[
                prop Arrow.y add 100
                ifProp global.rowDiffIsBig equal true [[
                  prop Arrow.y add 100
                ]]
              ]]

              // flip it based on direction if up or down (this is set above)
              propPush global.tempBool
              featPropPop Arrow.Costume.flipY

              // make it visible
              prop Arrow.visible setTo true

              // update the last y to be where the action was
              propPush global.newY
              propPop global.lastY
            ]]
          ]]

          // set the global context to be this col and row so we know what was selected
          // this helps in iterating through the FlowActions to update them (see updateFlowActions)
          propPush FlowAction.col
          propPop global.col
          propPush FlowAction.row
          propPop global.row

          // record this as the playerActionChoice so we know whats what
          propPush FlowAction.actionChoice
          propPop global.playerActionChoice

          // have global update our variables based on what we just chose
          featCall global.IU callFunction 'updateVariables'

          // update all of the flowActions
          featCall global.IU callFunction 'updateFlowActions'

        ]]
      ]]
    ]]
  ]]
]]

when FlowDirector centerlasttouches FlowAction [[
  prop FlowDirector.touchTimer setTo 0
  featProp FlowDirector.Costume.glow setTo 0
]]`
    },
    {
      "name": "FlowAction",
      "scriptText": `# BLUEPRINT FlowAction
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Physics
addFeature Touches
addFeature Costume
addFeature IU

featProp FlowAction.Costume.costumeName setTo 'WL_seq_blank.png'
featProp FlowAction.Costume.scale setTo 0.4
prop FlowAction.alpha setTo 0.3

// where is this in the grid
addProp row number 0
addProp col number 0

// is this item locked (the column was selected) and was it the one chosen?
addProp locked boolean false
addProp selected boolean false

// All the choices of actions (not all are displayed in each column)
addProp actionChoice string ''
prop FlowAction.actionChoice addOption 'not chosen yet' 'not chosen yet'
prop FlowAction.actionChoice addOption 'collect materials' 'collect materials'
prop FlowAction.actionChoice addOption 'work on dam' 'work on dam'
prop FlowAction.actionChoice addOption 'work on lodge' 'work on lodge'
prop FlowAction.actionChoice addOption 'play' 'play'
prop FlowAction.actionChoice addOption 'eat and store food' 'eat and store food'
prop FlowAction.actionChoice setToOption 'not chosen yet'

addProp tempNum number 0

// This function sets up the initial displays when we get to start (so they are all blank)
featCall FlowAction.IU setupFunction 'initActionDisplay' [[
  prop FlowAction.locked setTo false
  prop FlowAction.selected setTo false
  prop FlowAction.alpha setTo 0.3
  prop FlowAction.actionChoice setToOption 'not chosen yet'
  featProp FlowAction.Costume.costumeName setTo 'WL_seq_blank.png'
]]

// Each time we make a new action selection, update all of the actions to the new situation
featCall FlowAction.IU setupFunction 'updateActionDisplay' [[
  // do some quick math so we know the relative difference between our current action and the current col
  // 0 means same col, 1 means this is directly to the right, 2 means further
  propPush global.col
  propPush FlowAction.col
  stackSub
  propPop FlowAction.tempNum

  // if we are the current col, lock
  ifProp FlowAction.tempNum equal 0 [[
    // lock this row
    prop FlowAction.locked setTo true
    // if you arent the selected one, then fade
    ifProp FlowAction.selected equal false [[
      prop FlowAction.alpha setTo 0.3
    ]]
  ]]

  // if we are the next valid set of choices, set up the options
  ifProp FlowAction.tempNum equal 1 [[
    prop FlowAction.alpha setTo 1

    // 🔎 WHAT Happens when we setup the actions? 
    // 🔎 Arrange them based on what the last choice was ... see below

    // This is the first column because the prior was empty, so display initial options
    ifProp global.playerActionChoice equal '' [[
      ifProp FlowAction.row equal 1 [[
        prop FlowAction.actionChoice setToOption 'collect materials'
      ]]
      ifProp FlowAction.row equal 2 [[
        prop FlowAction.actionChoice setToOption 'eat and store food'
      ]]
      ifProp FlowAction.row equal 3 [[
        prop FlowAction.actionChoice setToOption 'play'
      ]]
    ]]

    // The last choice was \"collect materials\" so now the beaver can ... 
    ifProp global.playerActionChoice equal 'collect materials' [[
      ifProp FlowAction.row equal 1 [[
        prop FlowAction.actionChoice setToOption 'work on dam'
      ]]
      ifProp FlowAction.row equal 2 [[
        prop FlowAction.actionChoice setToOption 'eat and store food'
      ]]
      ifProp FlowAction.row equal 3 [[
        prop FlowAction.actionChoice setToOption 'play'
      ]]
    ]]

    // The last choice was \"play\" so now the beaver can ... 
    ifProp global.playerActionChoice equal 'play' [[
      ifProp FlowAction.row equal 1 [[
        prop FlowAction.actionChoice setToOption 'eat and store food'
      ]]
      ifProp FlowAction.row equal 2 [[
        prop FlowAction.actionChoice setToOption 'work on dam'
      ]]
      ifProp FlowAction.row equal 3 [[
        prop FlowAction.actionChoice setToOption 'play'
      ]]
    ]]

    // The last choice was \"play\" so now the beaver can ... 
    ifProp global.playerActionChoice equal 'eat and store food' [[
      ifProp FlowAction.row equal 1 [[
        prop FlowAction.actionChoice setToOption 'collect materials'
      ]]
      ifProp FlowAction.row equal 2 [[
        prop FlowAction.actionChoice setToOption 'eat and store food'
      ]]
      ifProp FlowAction.row equal 3 [[
        prop FlowAction.actionChoice setToOption 'play'
      ]]
    ]]

    // The last choice was \"work on dam\" so now the beaver can ... 
    // Note that you can't work on the lodge until the water is deep enough
    ifProp global.playerActionChoice equal 'work on dam' [[
      ifProp FlowAction.row equal 1 [[
        prop FlowAction.actionChoice setToOption 'eat and store food'
      ]]
      ifProp FlowAction.row equal 2 [[
        // Note that the \"canBuildLodge\" variable is set in global based on how deep the water is.
        ifProp global.canBuildLodge equal true [[
          prop FlowAction.actionChoice setToOption 'work on lodge'
        ]]
        ifProp global.canBuildLodge equal false [[
          prop FlowAction.actionChoice setToOption 'work on lodge'
          prop FlowAction.locked setTo true
          prop FlowAction.alpha setTo 0.3
        ]]
      ]]
      ifProp FlowAction.row equal 3 [[
        prop FlowAction.actionChoice setToOption 'work on dam'
      ]]
    ]]

    // The last choice was \"work on lodge\" so now the beaver can ... 
    ifProp global.playerActionChoice equal 'work on lodge' [[
      ifProp FlowAction.row equal 1 [[
        prop FlowAction.actionChoice setToOption 'eat and store food'
      ]]
      ifProp FlowAction.row equal 2 [[
        prop FlowAction.actionChoice setToOption 'work on dam'
      ]]
      ifProp FlowAction.row equal 3 [[
        prop FlowAction.actionChoice setToOption 'work on lodge'
      ]]
    ]]

  ]]

  // update the art based on the current selection
  ifProp FlowAction.actionChoice equalToOption 'not chosen yet' [[
    featProp FlowAction.Costume.costumeName setTo 'WL_seq_blank.png'
  ]]
  ifProp FlowAction.actionChoice equalToOption 'collect materials' [[
    featProp FlowAction.Costume.costumeName setTo 'WL_seq_collect.png'
  ]]
  ifProp FlowAction.actionChoice equalToOption 'work on dam' [[
    featProp FlowAction.Costume.costumeName setTo 'WL_seq_dam.png'
  ]]
  ifProp FlowAction.actionChoice equalToOption 'work on lodge' [[
    featProp FlowAction.Costume.costumeName setTo 'WL_seq_lodge.png'
  ]]
  ifProp FlowAction.actionChoice equalToOption 'play' [[
    featProp FlowAction.Costume.costumeName setTo 'WL_seq_play.png'
  ]]
  ifProp FlowAction.actionChoice equalToOption 'eat and store food' [[
    featProp FlowAction.Costume.costumeName setTo 'WL_seq_eat.png'
  ]]
]]

# PROGRAM UPDATE`
    },
    {
      "name": "Teacher",
      "scriptText": `# BLUEPRINT Teacher
# TAG isCharControllable false
# TAG isPozyxControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp Teacher.Costume.costumeName setTo 'GEN_onexone.json'
prop Teacher.visible setTo false

# PROGRAM UPDATE`
    },
    {
      "name": "Unused",
      "scriptText": `# BLUEPRINT Unused
# TAG isCharControllable false
# TAG isPozyxControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp Unused.Costume.costumeName setTo 'GEN_onexone.json'
prop Unused.visible setTo false

# PROGRAM UPDATE`
    },
    {
      "name": "Start",
      "scriptText": `# BLUEPRINT Start
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Physics
addFeature Costume
featProp Start.Costume.costumeName setTo 'KB_marker_home.png'
featProp Start.Costume.scale setTo 0.4
# PROGRAM UPDATE

`
    },
    {
      "name": "Arrow",
      "scriptText": `# BLUEPRINT Arrow
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp Arrow.Costume.costumeName setTo 'WL_arrow_short.png'
featProp Arrow.Costume.scale setTo 0.5
prop Arrow.visible setTo false

addProp col number 0

# PROGRAM UPDATE`
    },
    {
      "name": "EcosystemSummary",
      "scriptText": `# BLUEPRINT EcosystemSummary
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Graphing

featProp EcosystemSummary.Costume.costumeName setTo 'WL_ecosystem_status_1.png'
featProp EcosystemSummary.Costume.scale setTo 0.5

// levels are 1-4 to match the picture
// these are set in global when specific things happen
addProp systemSummaryLevel number 1

# PROGRAM UPDATE

every 0.5 runAtStart [[
  propPush global.systemSummaryLevel
  propPop EcosystemSummary.systemSummaryLevel

  // set the art and meter color to show how we are doing
  ifProp EcosystemSummary.systemSummaryLevel equal 1 [[
    featProp EcosystemSummary.Costume.costumeName setTo 'WL_ecosystem_status_1.png'
  ]]
  ifProp EcosystemSummary.systemSummaryLevel equal 2 [[
    featProp EcosystemSummary.Costume.costumeName setTo 'WL_ecosystem_status_2.png'
  ]]
  ifProp EcosystemSummary.systemSummaryLevel equal 3 [[
    featProp EcosystemSummary.Costume.costumeName setTo 'WL_ecosystem_status_3.png'
  ]]
  ifProp EcosystemSummary.systemSummaryLevel equal 4 [[
    featProp EcosystemSummary.Costume.costumeName setTo 'WL_ecosystem_status_4.png'
  ]]
  ifProp EcosystemSummary.systemSummaryLevel equal 5 [[
    featProp EcosystemSummary.Costume.costumeName setTo 'WL_ecosystem_status_5.png'
  ]]
]]`
    },
    {
      "name": "Timer",
      "scriptText": `# BLUEPRINT Timer
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// 🔎 WHAT DOES THIS CHARACTER DO?
// 🔎 This is a timer character so that we can see how much time has passed in our model
// 🔎 We can use that time to think about how long the ecosystem survives if we want

# PROGRAM INIT

addFeature Graphing
addFeature Costume

// Hide the actual art since we just want the text to displaay
featProp Timer.Costume.costumeName setTo 'GEN_onexone.json'
featProp Timer.Costume.scale setTo 1

// A property to track the time
addProp time number 0

// set the initial label and then update it below during update
exprPush {{ 'Time: ' + Timer.getProp('time').value + ' ' + global.getProp('timeUnit').value }}
featPropPop Timer.Graphing.text

# PROGRAM UPDATE
// every second, add one to the time property and display the new time in the format \"Time: #\"\"
every 1 runAtStart [[
  propPush global.timeCount
  propPop Timer.time

  exprPush {{ 'Time: ' + Timer.getProp('time').value + ' ' + global.getProp('timeUnit').value }}
  featPropPop Timer.Graphing.text
]]`
    },
    {
      "name": "SlowWaterMeter",
      "scriptText": `# BLUEPRINT SlowWaterMeter
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Graphing
featProp SlowWaterMeter.Costume.costumeName setTo 'GEN_square.json'
featCall SlowWaterMeter.Costume setColorize 0 118 198
featProp SlowWaterMeter.Costume.scale setTo 0.2
featProp SlowWaterMeter.Graphing.wordWrapWidth setTo 90

addProp slowWaterAmount number 0
prop SlowWaterMeter.slowWaterAmount setMin 0
prop SlowWaterMeter.slowWaterAmount setMax 10

// to know if we changed our number
addProp oldAmount number 0

featProp SlowWaterMeter.Graphing.meterProp setTo 'slowWaterAmount'

# PROGRAM UPDATE
every 0.1 runAtStart [[
  // set the local amount based on the global property
  propPush global.slowWaterAmount
  propPop SlowWaterMeter.slowWaterAmount
  
  // if the amount changed, glow to help draw attention to it
  // and then update the oldAmount so that we can check it next time
  ifExpr {{SlowWaterMeter.getProp('oldAmount').value != SlowWaterMeter.getProp('slowWaterAmount').value}} [[
    featProp SlowWaterMeter.Costume.glow setTo 1
    propPush SlowWaterMeter.slowWaterAmount
    propPop SlowWaterMeter.oldAmount
  ]]
]]
`
    },
    {
      "name": "WaterPlantMeter",
      "scriptText": `# BLUEPRINT WaterPlantMeter
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Graphing
featProp WaterPlantMeter.Costume.costumeName setTo 'WL_Waterplantgrowth.png'
featProp WaterPlantMeter.Costume.scale setTo 0.15
featProp WaterPlantMeter.Graphing.wordWrapWidth setTo 100

addProp numberWaterPlants number 0
prop WaterPlantMeter.numberWaterPlants setMin 0
prop WaterPlantMeter.numberWaterPlants setMax 10

featProp WaterPlantMeter.Graphing.meterProp setTo 'numberWaterPlants'

// to know if we changed our number
addProp oldAmount number 0

# PROGRAM UPDATE
every 0.1 runAtStart [[
  // set the local amount based on the global property
  propPush global.numberWaterPlants
  propPop WaterPlantMeter.numberWaterPlants
  
  // if the amount changed, glow to help draw attention to it
  // and then update the oldAmount so that we can check it next time
  ifExpr {{WaterPlantMeter.getProp('oldAmount').value != WaterPlantMeter.getProp('numberWaterPlants').value}} [[
    featProp WaterPlantMeter.Costume.glow setTo 1
    propPush WaterPlantMeter.numberWaterPlants
    propPop WaterPlantMeter.oldAmount
  ]]
]]
`
    },
    {
      "name": "FishMeter",
      "scriptText": `# BLUEPRINT FishMeter
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Graphing
featProp FishMeter.Costume.costumeName setTo 'WL_FishGrowth.png'
featProp FishMeter.Costume.scale setTo 0.15

addProp numberFish number 0
prop FishMeter.numberFish setMin 0
prop FishMeter.numberFish setMax 10

featProp FishMeter.Graphing.meterProp setTo 'numberFish'

// to know if we changed our number
addProp oldAmount number 0

# PROGRAM UPDATE
every 0.1 runAtStart [[
  // set the local amount based on the global property
  propPush global.numberFish
  propPop FishMeter.numberFish
  
  // if the amount changed, glow to help draw attention to it
  // and then update the oldAmount so that we can check it next time
  ifExpr {{FishMeter.getProp('oldAmount').value != FishMeter.getProp('numberFish').value}} [[
    featProp FishMeter.Costume.glow setTo 1
    propPush FishMeter.numberFish
    propPop FishMeter.oldAmount
  ]]
]]
`
    },
    {
      "name": "PollutionCleanedMeter",
      "scriptText": `# BLUEPRINT PollutionCleanedMeter
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Graphing
featProp PollutionCleanedMeter.Costume.costumeName setTo 'WL_pollution_cleaning.png'
featProp PollutionCleanedMeter.Costume.scale setTo 0.15

addProp pollutionCleaned number 0
prop PollutionCleanedMeter.pollutionCleaned setMin 0
prop PollutionCleanedMeter.pollutionCleaned setMax 10

featProp PollutionCleanedMeter.Graphing.meterProp setTo 'pollutionCleaned'

// to know if we changed our number
addProp oldAmount number 0

# PROGRAM UPDATE
every 0.1 runAtStart [[
  // set the local amount based on the global property
  propPush global.pollutionCleaned
  propPop PollutionCleanedMeter.pollutionCleaned
  
  // if the amount changed, glow to help draw attention to it
  // and then update the oldAmount so that we can check it next time
  ifExpr {{PollutionCleanedMeter.getProp('oldAmount').value != PollutionCleanedMeter.getProp('pollutionCleaned').value}} [[
    featProp PollutionCleanedMeter.Costume.glow setTo 1
    propPush PollutionCleanedMeter.pollutionCleaned
    propPop PollutionCleanedMeter.oldAmount
  ]]
]]
`
    },
    {
      "name": "ChanceHurtMeter",
      "scriptText": `# BLUEPRINT ChanceHurtMeter
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Graphing
featProp ChanceHurtMeter.Costume.costumeName setTo 'WL_Chance beaver hurt.png'
featProp ChanceHurtMeter.Costume.scale setTo 0.15

addProp chanceBeaversHurt number 0
prop ChanceHurtMeter.chanceBeaversHurt setMin 0
prop ChanceHurtMeter.chanceBeaversHurt setMax 10

featProp ChanceHurtMeter.Graphing.meterProp setTo 'chanceBeaversHurt'

// to know if we changed our number
addProp oldAmount number 10

# PROGRAM UPDATE
every 0.1 runAtStart [[
  // set the local amount based on the global property
  propPush global.chanceBeaversHurt
  propPop ChanceHurtMeter.chanceBeaversHurt
  
  // if the amount changed, glow to help draw attention to it
  // and then update the oldAmount so that we can check it next time
  ifExpr {{ChanceHurtMeter.getProp('oldAmount').value != ChanceHurtMeter.getProp('chanceBeaversHurt').value}} [[
    featProp ChanceHurtMeter.Costume.glow setTo 1
    propPush ChanceHurtMeter.chanceBeaversHurt
    propPop ChanceHurtMeter.oldAmount
  ]]
]]
`
    },
    {
      "name": "BeaverFunMeter",
      "scriptText": `# BLUEPRINT BeaverFunMeter
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Graphing
featProp BeaverFunMeter.Costume.costumeName setTo 'WL_beaver_fun.png'
featProp BeaverFunMeter.Costume.scale setTo 0.15

addProp beaverFun number 0
prop BeaverFunMeter.beaverFun setMin 0
prop BeaverFunMeter.beaverFun setMax 10

featProp BeaverFunMeter.Graphing.meterProp setTo 'beaverFun'


// to know if we changed our number
addProp oldAmount number 0

# PROGRAM UPDATE
every 0.1 runAtStart [[
  // set the local amount based on the global property
  propPush global.beaverFun
  propPop BeaverFunMeter.beaverFun
  
  // if the amount changed, glow to help draw attention to it
  // and then update the oldAmount so that we can check it next time
  ifExpr {{BeaverFunMeter.getProp('oldAmount').value != BeaverFunMeter.getProp('beaverFun').value}} [[
    featProp BeaverFunMeter.Costume.glow setTo 1
    propPush BeaverFunMeter.beaverFun
    propPop BeaverFunMeter.oldAmount
  ]]
]]

`
    },
    {
      "name": "BeaversReadyForWinterMeter",
      "scriptText": `# BLUEPRINT BeaversReadyForWinterMeter
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Graphing
featProp BeaversReadyForWinterMeter.Costume.costumeName setTo 'WL_beaver_winter.png'
featProp BeaversReadyForWinterMeter.Costume.scale setTo 0.15

addProp beaversReadyForWinter number 0
prop BeaversReadyForWinterMeter.beaversReadyForWinter setMin 0
prop BeaversReadyForWinterMeter.beaversReadyForWinter setMax 10

featProp BeaversReadyForWinterMeter.Graphing.meterProp setTo 'beaversReadyForWinter'

// to know if we changed our number
addProp oldAmount number 0

# PROGRAM UPDATE
every 0.1 runAtStart [[
  // set the local amount based on the global property
  propPush global.beaversReadyForWinter
  propPop BeaversReadyForWinterMeter.beaversReadyForWinter
  
  // if the amount changed, glow to help draw attention to it
  // and then update the oldAmount so that we can check it next time
  ifExpr {{BeaversReadyForWinterMeter.getProp('oldAmount').value != BeaversReadyForWinterMeter.getProp('beaversReadyForWinter').value}} [[
    featProp BeaversReadyForWinterMeter.Costume.glow setTo 1
    propPush BeaversReadyForWinterMeter.beaversReadyForWinter
    propPop BeaversReadyForWinterMeter.oldAmount
  ]]
]]
`
    },
    {
      "name": "PropertyMeter",
      "scriptText": `# BLUEPRINT PropertyMeter
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Graphing
featProp PropertyMeter.Graphing.isLargeGraphic setTo true
featProp PropertyMeter.Costume.costumeName setTo 'GEN_onexone.json'

addProp propertyName string ''

addProp currentValue number 0
prop PropertyMeter.currentValue setMin 0
prop PropertyMeter.currentValue setMax 10

featProp PropertyMeter.Graphing.meterProp setTo 'currentValue'

// ✏️ CHANGE What property this meter will keep track of by changing the next line
// ✏️ Options include: damSize, lodgeSize, collectedMaterialsCount, workedOnDamCount
// ✏️ workedOnLodgeCount, playedCount, slowWaterAmount, numberFish, happyFishers, numberWaterPlants
// ✏️ pollutionCleaned, chanceBeaversHurt, beaverFun, beaversReadyForWinter
// ✏️ collectedMaterialsCount, workedOnDamCount, workedOnLodgeCount, playedCount, ateAndStoredCount
prop PropertyMeter.propertyName setTo 'damSize'

addProp oldAmount number 0

# PROGRAM UPDATE
every 1 runAtStart [[

  propPush PropertyMeter.propertyName
  featPropPop PropertyMeter.Graphing.text

  ifExpr {{PropertyMeter.getProp('oldAmount').value != global.getProp(PropertyMeter.getProp('propertyName').value).value}} [[
    exprPush {{ global.getProp(PropertyMeter.getProp('propertyName').value).value }}
    propPop PropertyMeter.currentValue
    featProp PropertyMeter.Costume.glow setTo 1
  ]]
 

]]`
    },
    {
      "name": "PropertyGraph",
      "scriptText": `# BLUEPRINT PropertyGraph
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Graphing
featProp PropertyGraph.Costume.costumeName setTo 'GEN_onexone.json'
featProp PropertyGraph.Graphing.isLargeGraphic setTo true
featProp PropertyGraph.Graphing.graphFrequency setTo 10
featProp PropertyGraph.Graphing.graphMinY setTo 0
featProp PropertyGraph.Graphing.graphMaxY setTo 10


addProp propertyName string ''

addProp currentValue number 0
prop PropertyGraph.currentValue setMin 0
prop PropertyGraph.currentValue setMax 10

featProp PropertyGraph.Graphing.graphProp setTo 'currentValue'

// ✏️ CHANGE What property this graph will keep track of by changing the next line
// ✏️ Options include: damSize, lodgeSize, collectedMaterialsCount, workedOnDamCount
// ✏️ workedOnLodgeCount, playedCount, slowWaterAmount, numberFish, happyFishers, numberWaterPlants
// ✏️ pollutionCleaned, chanceBeaversHurt, beaverFun, beaversReadyForWinter
// ✏️ collectedMaterialsCount, workedOnDamCount, workedOnLodgeCount, playedCount, ateAndStoredCount
// ✏️ NOTE: the instance can override this so look there
prop PropertyGraph.propertyName setTo 'damSize'

addProp oldAmount number 0

# PROGRAM UPDATE
every 1 runAtStart [[

  propPush PropertyGraph.propertyName
  featPropPop PropertyGraph.Graphing.text

  ifExpr {{PropertyGraph.getProp('oldAmount').value != global.getProp(PropertyGraph.getProp('propertyName').value).value}} [[
    exprPush {{ global.getProp(PropertyGraph.getProp('propertyName').value).value }}
    propPop PropertyGraph.currentValue
  ]]
]]`
    },
    {
      "name": "GrassBackground",
      "scriptText": `# BLUEPRINT GrassBackground
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp GrassBackground.Costume.costumeName setTo 'WL_background_Grass.png'
featProp GrassBackground.Costume.scale setTo 1.6
prop GrassBackground.zIndex setTo -999
# PROGRAM UPDATE
`
    },
    {
      "name": "TimeBackground",
      "scriptText": `# BLUEPRINT TimeBackground
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp TimeBackground.Costume.costumeName setTo 'GEN_square.json'
featCall TimeBackground.Costume setColorize 255 140 0
featProp TimeBackground.Costume.scale setTo 0.5
prop TimeBackground.zIndex setTo -200

# PROGRAM UPDATE
`
    }
  ],
  "instances": [
    {
      "id": "0",
      "label": "FlowAction 1 1",
      "bpid": "FlowAction",
      "initScript": `prop x setTo -190
prop y setTo -270
prop FlowAction.col setTo 1
prop FlowAction.row setTo 1`
    },
    {
      "id": "1",
      "label": "FlowAction 1 2",
      "bpid": "FlowAction",
      "initScript": `prop x setTo -190
prop y setTo -60
prop FlowAction.col setTo 1
prop FlowAction.row setTo 2`
    },
    {
      "id": "2",
      "label": "FlowAction 1 3",
      "bpid": "FlowAction",
      "initScript": `prop x setTo -190
prop y setTo 160
prop FlowAction.col setTo 1
prop FlowAction.row setTo 3`
    },
    {
      "id": "3",
      "label": "FlowAction 2 1",
      "bpid": "FlowAction",
      "initScript": `prop x setTo 50
prop y setTo -270
prop FlowAction.col setTo 2
prop FlowAction.row setTo 1`
    },
    {
      "id": "4",
      "label": "FlowAction 2 2",
      "bpid": "FlowAction",
      "initScript": `prop x setTo 50
prop y setTo -60
prop FlowAction.col setTo 2
prop FlowAction.row setTo 2`
    },
    {
      "id": "5",
      "label": "FlowAction 2 3",
      "bpid": "FlowAction",
      "initScript": `prop x setTo 50
prop y setTo 160
prop FlowAction.col setTo 2
prop FlowAction.row setTo 3`
    },
    {
      "id": "6",
      "label": "FlowAction 3 1",
      "bpid": "FlowAction",
      "initScript": `prop x setTo 290
prop y setTo -270
prop FlowAction.col setTo 3
prop FlowAction.row setTo 1`
    },
    {
      "id": "7",
      "label": "FlowAction 3 2",
      "bpid": "FlowAction",
      "initScript": `prop x setTo 290
prop y setTo -60
prop FlowAction.col setTo 3
prop FlowAction.row setTo 2`
    },
    {
      "id": "8",
      "label": "FlowAction 3 3",
      "bpid": "FlowAction",
      "initScript": `prop x setTo 290
prop y setTo 160
prop FlowAction.col setTo 3
prop FlowAction.row setTo 3`
    },
    {
      "id": "9",
      "label": "Start",
      "bpid": "Start",
      "initScript": `prop x setTo -387.43
prop y setTo -60`
    },
    {
      "id": "11",
      "label": "Arrow 1",
      "bpid": "Arrow",
      "initScript": `prop x setTo -307.23
prop y setTo -60
prop Arrow.col setTo 0
`
    },
    {
      "id": "12",
      "label": "Arrow 2",
      "bpid": "Arrow",
      "initScript": `prop x setTo -65.9
prop y setTo -60
prop Arrow.col setTo 1`
    },
    {
      "id": "13",
      "label": "Arrow 3",
      "bpid": "Arrow",
      "initScript": `prop x setTo 174.29
prop y setTo -60
prop Arrow.col setTo 2`
    },
    {
      "id": "14",
      "label": "Ecosystem Summary",
      "bpid": "EcosystemSummary",
      "initScript": `prop EcosystemSummary.x setTo 533.35
prop EcosystemSummary.y setTo -183.87`
    },
    {
      "id": "15",
      "label": "Timer",
      "bpid": "Timer",
      "initScript": `prop Timer.x setTo 335.60
prop Timer.y setTo -402.07`
    },
    {
      "id": "16",
      "label": "Slow Water",
      "bpid": "SlowWaterMeter",
      "initScript": `prop SlowWaterMeter.x setTo -347.87
prop SlowWaterMeter.y setTo 260`
    },
    {
      "id": "17",
      "label": "Water Plants",
      "bpid": "WaterPlantMeter",
      "initScript": `prop WaterPlantMeter.x setTo -230
prop WaterPlantMeter.y setTo 260`
    },
    {
      "id": "18",
      "label": "Fish",
      "bpid": "FishMeter",
      "initScript": `prop FishMeter.x setTo -121.32
prop FishMeter.y setTo 260`
    },
    {
      "id": "19",
      "label": "Pollution Cleaned",
      "bpid": "PollutionCleanedMeter",
      "initScript": `prop PollutionCleanedMeter.x setTo -0.03
prop PollutionCleanedMeter.y setTo 260`
    },
    {
      "id": "20",
      "label": "Chance Beavers Hurt",
      "bpid": "ChanceHurtMeter",
      "initScript": `prop ChanceHurtMeter.x setTo 131.22
prop ChanceHurtMeter.y setTo 260`
    },
    {
      "id": "21",
      "label": "Beaver Fun",
      "bpid": "BeaverFunMeter",
      "initScript": `prop BeaverFunMeter.x setTo 248.8
prop BeaverFunMeter.y setTo 260`
    },
    {
      "id": "22",
      "label": "Ready For Winter",
      "bpid": "BeaversReadyForWinterMeter",
      "initScript": `prop BeaversReadyForWinterMeter.x setTo 356.85
prop BeaversReadyForWinterMeter.y setTo 260`
    },
    {
      "id": "23",
      "label": "Property Meter",
      "bpid": "PropertyMeter",
      "initScript": `prop PropertyMeter.x setTo 533.35
prop PropertyMeter.y setTo 302.73

// ✏️ CHANGE What property this meter will keep track of by changing the next line
// ✏️ Options include: damSize, lodgeSize, collectedMaterialsCount, workedOnDamCount
// ✏️ workedOnLodgeCount, playedCount, slowWaterAmount, numberFish, happyFishers, numberWaterPlants
// ✏️ pollutionCleaned, chanceBeaversHurt, beaverFun, beaversReadyForWinter
// ✏️ collectedMaterialsCount, workedOnDamCount, workedOnLodgeCount, playedCount, ateAndStoredCount
prop PropertyMeter.propertyName setTo 'workedOnDamCount'`
    },
    {
      "id": "24",
      "label": "Property Graph",
      "bpid": "PropertyGraph",
      "initScript": `prop PropertyGraph.x setTo 533.35 
prop PropertyGraph.y setTo 145.39

// ✏️ CHANGE What property this graph will keep track of by changing the next line
// ✏️ Options include: damSize, lodgeSize, collectedMaterialsCount, workedOnDamCount
// ✏️ workedOnLodgeCount, playedCount, slowWaterAmount, numberFish, happyFishers, numberWaterPlants
// ✏️ pollutionCleaned, chanceBeaversHurt, beaverFun, beaversReadyForWinter
// ✏️ collectedMaterialsCount, workedOnDamCount, workedOnLodgeCount, playedCount, ateAndStoredCount
prop PropertyGraph.propertyName setTo 'happyFishers'`
    },
    {
      "id": "25",
      "label": "Grass Background",
      "bpid": "GrassBackground",
      "initScript": `prop GrassBackground.x setTo -2.20
prop GrassBackground.y setTo -12.11`
    },
    {
      "id": "26",
      "label": "Timer BG",
      "bpid": "TimeBackground",
      "initScript": `prop TimeBackground.x setTo 335
prop TimeBackground.y setTo -424.78`
    }
  ]
}