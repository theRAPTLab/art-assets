{
  "id": "unity-food-web_Sarah",
  "label": "UnityFood Web",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 3289600,
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [],
  "blueprints": [
    {
      "name": "Snake",
      "scriptText": `# BLUEPRINT Snake
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Snake.Costume.costumeName setTo '15.png'

// add other features
addFeature Physics
addFeature Touches

featProp Snake.Costume.scale setTo 0.1

featProp Snake.Movement.movementType setTo 'wander'
featProp Snake.Movement.compassDirection setTo 'S'
featProp Snake.Movement.distance setTo 3
featProp Snake.Movement.targetY setMax 0.7

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Snake.Touches monitor 'Mouse' b2b
featCall Snake.Touches monitor 'Beetle' b2b
featCall Snake.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Snake.energyLevel setMax 100
prop Snake.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Snake lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Snake.Graphing.meterProp setTo 'energyLevel'

featProp Snake.Graphing.meterColor setTo 65280

# PROGRAM EVENT
when Snake touches Mouse [[
  every 1 [[
    ifExpr {{ Snake.getProp('alive').value == true &&  Mouse.getProp('alive').value == true }} [[
      featProp Snake.Costume.glow setTo 1
      prop Mouse.alive setTo false
      prop Mouse.alpha setTo 0.3
      prop Snake.energyLevel add 10
      prop Mouse.energyLevel setTo 0
    ]]
  ]]

  when Snake touches Beetle [[
    every 1 [[
      ifExpr {{ Snake.getProp('alive').value == true &&  Beetle.getProp('alive').value == true }} [[
        featProp Snake.Costume.glow setTo 1
        prop Beetle.alive setTo false
        prop Beetle.alpha setTo 0.3
        prop Snake.energyLevel add 10
        prop Beetle.energyLevel setTo 0
      ]]
    ]]
  ]]

  when Snake touches Reincarnator [[
    ifExpr {{ Snake.getProp('alive').value == false }} [[
      featProp Snake.Costume.glow setTo 1
      prop Snake.alive setTo true
      prop Snake.alpha setTo 1
      prop Snake.energyLevel setTo 50
    ]]
  ]]

]]

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time
every 1 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Snake.getProp('energyLevel').value - Snake.getProp('energyUse').value }}
  propPop Snake.energyLevel

  // this code sets the color of the energy bar based on how hungry the Snake is
  // sated
  ifExpr {{ Snake.getProp('energyLevel').value > 50 }} [[
    featProp Snake.Costume.currentFrame setTo 0
    // Green
    featProp Snake.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Snake.getProp('energyLevel').value < 50 }} [[
    featProp Snake.Costume.currentFrame setTo 1
    // Orange
    featProp Snake.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Snake.getProp('energyLevel').value < 20 }} [[
    featProp Snake.Costume.currentFrame setTo 1
    // Red
    featProp Snake.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Snake.getProp('energyLevel').value < 1 }} [[
    featProp Snake.Costume.currentFrame setTo 2
    prop Snake.alpha setTo 0.3
    prop Snake.alive setTo false
    featProp Snake.Movement.movementType setTo 'stop'
  ]]

  // set meter to mirror energyLevel
  featProp Snake.Graphing.meterProp setTo 'energyLevel'

]]`
    },
    {
      "name": "Reincarnator",
      "scriptText": `# BLUEPRINT Reincarnator
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics

featProp Reincarnator.Costume.costumeName setTo 'square.json'

featProp agent.Costume.scale setTo 0.4
# PROGRAM UPDATE
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]`
    },
    {
      "name": "Background",
      "scriptText": `# BLUEPRINT Background
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp Background.Costume.costumeName setTo 'AQ_background_aquatic.png'
featProp Background.Costume.size setTo 800
propPush global.alphaSettingForAll
propPop Background.alpha
# PROGRAM UPDATE
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]`
    },
    {
      "name": "Snail",
      "scriptText": `# BLUEPRINT Snail
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume

// set the costume
featProp Snail.Costume.costumeName setTo '19.png'

// add other features
addFeature Physics
addFeature Touches

featProp agent.Costume.scale setTo 0.1

featProp Snail.Movement.movementType setTo 'wander'
featProp Snail.Movement.compassDirection setTo 'W'
featProp Snail.Movement.distance setTo 1.5
featProp Snail.Movement.targetY setMax 0.7

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Snail.Touches monitor 'VeggieGarden' b2b
featCall Snail.Touches monitor 'Clover' b2b
featCall Snail.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Snail.energyLevel setMax 100
prop Snail.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Snail lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Snail.Graphing.meterProp setTo 'energyLevel'

featProp Snail.Graphing.meterColor setTo 65280

# PROGRAM EVENT
every 1 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Snail.getProp('energyLevel').value - Snail.getProp('energyUse').value }}
  propPop Snail.energyLevel

  // this code sets the color of the energy bar based on how hungry the Snail is
  // sated
  ifExpr {{ Snail.getProp('energyLevel').value > 50 }} [[
    featProp Snail.Costume.currentFrame setTo 0
    // Green
    featProp Snail.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Snail.getProp('energyLevel').value < 50 }} [[
    featProp Snail.Costume.currentFrame setTo 1
    // Orange
    featProp Snail.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Snail.getProp('energyLevel').value < 20 }} [[
    featProp Snail.Costume.currentFrame setTo 1
    // Red
    featProp Snail.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Snail.getProp('energyLevel').value < 1 }} [[
    featProp Snail.Costume.currentFrame setTo 2
    prop Snail.alpha setTo 0.3
    prop Snail.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Snail.Graphing.meterProp setTo 'energyLevel'

]]
when Snail touches VeggieGarden [[
  every 1 [[
    ifExpr {{ Snail.getProp('alive').value == true &&  VeggieGarden.getProp('alive').value == true }} [[
      featProp Snail.Costume.glow setTo 1
      prop Snail.energyLevel add 10
      prop VeggieGarden.energyLevel sub 10
    ]]
  ]]

  when Snail touches Clover [[
    every 1 [[
      ifExpr {{ Snail.getProp('alive').value == true &&  Clover.getProp('alive').value == true }} [[
        featProp Snail.Costume.glow setTo 1
        prop Snail.energyLevel add 10
        prop Clover.energyLevel sub 10
      ]]
    ]]
  ]]

  when Snail touches Reincarnator [[
    ifExpr {{ Snail.getProp('alive').value == false }} [[
      featProp Snail.Costume.glow setTo 1
      prop Snail.alive setTo true
      prop Snail.alpha setTo 1
    ]]
  ]]

]]

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time`
    },
    {
      "name": "Caterpillar",
      "scriptText": `# BLUEPRINT Caterpillar
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume

// set the costume
featProp Caterpillar.Costume.costumeName setTo '20.png'

// add other features
addFeature Physics
addFeature Touches

featProp agent.Costume.scale setTo 0.1

featProp Caterpillar.Movement.movementType setTo 'wander'
featProp Caterpillar.Movement.compassDirection setTo 'W'
featProp Caterpillar.Movement.distance setTo 2
featProp Caterpillar.Movement.targetY setMax 0.7

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Caterpillar.Touches monitor 'VeggieGarden' b2b
featCall Caterpillar.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Caterpillar.energyLevel setMax 100
prop Caterpillar.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Caterpillar lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Caterpillar.Graphing.meterProp setTo 'energyLevel'

featProp Caterpillar.Graphing.meterColor setTo 65280

# PROGRAM EVENT
every 1 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Caterpillar.getProp('energyLevel').value - Caterpillar.getProp('energyUse').value }}
  propPop Caterpillar.energyLevel

  // this code sets the color of the energy bar based on how hungry the Caterpillar is
  // sated
  ifExpr {{ Caterpillar.getProp('energyLevel').value > 50 }} [[
    featProp Caterpillar.Costume.currentFrame setTo 0
    // Green
    featProp Caterpillar.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Caterpillar.getProp('energyLevel').value < 50 }} [[
    featProp Caterpillar.Costume.currentFrame setTo 1
    // Orange
    featProp Caterpillar.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Caterpillar.getProp('energyLevel').value < 20 }} [[
    featProp Caterpillar.Costume.currentFrame setTo 1
    // Red
    featProp Caterpillar.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Caterpillar.getProp('energyLevel').value < 1 }} [[
    featProp Caterpillar.Costume.currentFrame setTo 2
    prop Caterpillar.alpha setTo 0.3
    featProp Caterpillar.Movement.movementType setTo 'string'
  ]]

  // set meter to mirror energyLevel
  featProp Caterpillar.Graphing.meterProp setTo 'energyLevel'

]]
when Caterpillar touches VeggieGarden [[
  every 1 [[
    ifExpr {{ Caterpillar.getProp('alive').value == true &&  VeggieGarden.getProp('alive').value == true }} [[
      featProp Caterpillar.Costume.glow setTo 1
      prop Caterpillar.energyLevel add 10
      prop VeggieGarden.energyLevel sub 10
    ]]
  ]]


  when Caterpillar touches Reincarnator [[
    ifExpr {{ Caterpillar.getProp('alive').value == false }} [[
      featProp Caterpillar.Costume.glow setTo 1
      prop Caterpillar.alive setTo true
      prop Caterpillar.alpha setTo 1
      prop Caterpillar.energyLevel setTo 50
    ]]
  ]]

]]

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time`
    },
    {
      "name": "Robin",
      "scriptText": `# BLUEPRINT Robin
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
// add the Caterpillar we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Robin.Costume.costumeName setTo '13.png'

// add other features
addFeature Physics
addFeature Touches

featProp Robin.Costume.scale setTo 0.1

featProp Robin.Movement.movementType setTo 'wander'
featProp Robin.Movement.compassDirection setTo 'W'
featProp Robin.Movement.distance setTo 3
featProp Robin.Movement.targetY setMax 0.7

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Robin.Touches monitor 'Caterpillar' b2b
featCall Robin.Touches monitor 'Snail' b2b
featCall Robin.Touches monitor 'Beetle' b2b
featCall Robin.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Robin.energyLevel setMax 100
prop Robin.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Robin lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Robin.Graphing.meterProp setTo 'energyLevel'

featProp Robin.Graphing.meterColor setTo 65280

# PROGRAM EVENT
when Robin touches Caterpillar [[
  every 1 [[
    ifExpr {{ Robin.getProp('alive').value == true &&  Caterpillar.getProp('alive').value == true }} [[
      featProp Robin.Costume.glow setTo 1
      prop Caterpillar.alive setTo false
      prop Caterpillar.alpha setTo 0.3
      prop Robin.energyLevel add 10
      prop Caterpillar.energyLevel setTo 0
    ]]
  ]]

  when Robin touches Snail [[
    every 1 [[
      ifExpr {{ Robin.getProp('alive').value == true &&  Snail.getProp('alive').value == true }} [[
        featProp Robin.Costume.glow setTo 1
        prop Snail.alive setTo false
        prop Snail.alpha setTo 0.3
        prop Robin.energyLevel add 10
        prop Snail.energyLevel setTo 0
      ]]
    ]]
  ]]

  when Robin touches Beetle [[
    every 1 [[
      ifExpr {{ Robin.getProp('alive').value == true &&  Beetle.getProp('alive').value == true }} [[
        featProp Robin.Costume.glow setTo 1
        prop Beetle.alive setTo false
        prop Beetle.alpha setTo 0.3
        prop Robin.energyLevel add 10
        prop Beetle.energyLevel setTo 0
      ]]
    ]]
  ]]

  when Robin touches Reincarnator [[
    every 1 [[
      ifExpr {{ Robin.getProp('alive').value == false }} [[
        featProp Robin.Costume.glow setTo 1
        prop Robin.alive setTo true
        prop Robin.alpha setTo 1
        prop Robin.energyLevel setTo 50
      ]]
    ]]
  ]]

]]

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time
every 1 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Robin.getProp('energyLevel').value - Robin.getProp('energyUse').value }}
  propPop Robin.energyLevel

  // this code sets the color of the energy bar based on how hungry the Robin is
  // sated
  ifExpr {{ Robin.getProp('energyLevel').value > 50 }} [[
    featProp Robin.Costume.currentFrame setTo 0
    // Green
    featProp Robin.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Robin.getProp('energyLevel').value < 50 }} [[
    featProp Robin.Costume.currentFrame setTo 1
    // Orange
    featProp Robin.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Robin.getProp('energyLevel').value < 20 }} [[
    featProp Robin.Costume.currentFrame setTo 1
    // Red
    featProp Robin.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Robin.getProp('energyLevel').value < 1 }} [[
    featProp Robin.Costume.currentFrame setTo 2
    prop Robin.alpha setTo 0.3
    prop Robin.alive setTo false
    featProp Robin.Movement.movementType setTo 'stop'
  ]]

  // set meter to mirror energyLevel
  featProp Robin.Graphing.meterProp setTo 'energyLevel'

]]`
    },
    {
      "name": "Hawk",
      "scriptText": `# BLUEPRINT Hawk
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume

// set the costume
featProp Hawk.Costume.costumeName setTo '17.png'

// add other features
addFeature Physics
addFeature Touches

featProp Hawk.Costume.scale setTo 0.1

featProp Hawk.Movement.compassDirection setTo 'west'
featProp Hawk.Movement.movementType setTo 'wander'
featProp Hawk.Movement.distance setTo 5
featCall Hawk.Movement setRandomDirection

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Hawk.Touches monitor 'Snake' b2b
featCall Hawk.Touches monitor 'Robin' b2b
featCall Hawk.Touches monitor 'Mouse' b2b
featCall Hawk.Touches monitor 'Gopher' b2b
featCall Hawk.Touches monitor 'Rabbit' b2b
featCall Hawk.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Hawk.energyLevel setMax 100
prop Hawk.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Hawk lose energy faster (or slower)
addProp energyUse Number 2

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Hawk.Graphing.meterProp setTo 'energyLevel'

featProp Hawk.Graphing.meterColor setTo 65280

# PROGRAM EVENT

when Hawk touches Snake [[
  every 1 [[
    ifExpr {{ Hawk.getProp('alive').value == true &&  Snake.getProp('alive').value == true }} [[
      featProp Hawk.Costume.glow setTo 1
      prop Snake.alive setTo false
      prop Snake.alpha setTo 0.3
      prop Hawk.energyLevel add 10
      prop Snake.energyLevel setTo 0
    ]]
  ]]

  when Hawk touches Robin [[
    every 1 [[
      ifExpr {{ Hawk.getProp('alive').value == true &&  Robin.getProp('alive').value == true }} [[
        featProp Hawk.Costume.glow setTo 1
        prop Robin.alive setTo false
        prop Robin.alpha setTo 0.3
        prop Hawk.energyLevel add 10
        prop Robin.energyLevel setTo 0
      ]]
    ]]
  ]]

  when Hawk touches Mouse [[
    every 1 [[
      ifExpr {{ Hawk.getProp('alive').value == true &&  Mouse.getProp('alive').value == true }} [[
        featProp Hawk.Costume.glow setTo 1
        prop Mouse.alive setTo false
        prop Mouse.alpha setTo 0.3
        prop Hawk.energyLevel add 10
        prop Mouse.energyLevel setTo 0
      ]]
    ]]
  ]]

  when Hawk touches Gopher [[
    every 1 [[
      ifExpr {{ Hawk.getProp('alive').value == true &&  Gopher.getProp('alive').value == true }} [[
        featProp Hawk.Costume.glow setTo 1
        prop Gopher.alive setTo false
        prop Gopher.alpha setTo 0.3
        prop Hawk.energyLevel add 10
        prop Gopher.energyLevel setTo 0
      ]]
    ]]
  ]]

  when Hawk touches Rabbit [[
    every 1 [[
      ifExpr {{ Hawk.getProp('alive').value == true &&  Rabbit.getProp('alive').value == true }} [[
        featProp Hawk.Costume.glow setTo 1
        prop Rabbit.alive setTo false
        prop Rabbit.alpha setTo 0.3
        prop Hawk.energyLevel add 10
        prop Rabbit.energyLevel setTo 0
      ]]
    ]]
  ]]

  when Hawk touches Reincarnator [[
    ifExpr {{ Hawk.getProp('alive').value == false }} [[
      featProp Hawk.Costume.glow setTo 1
      prop Hawk.alive setTo true
      prop Hawk.alpha setTo 1
    ]]
  ]]

]]

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time
every 1 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Hawk.getProp('energyLevel').value - Hawk.getProp('energyUse').value }}
  propPop Hawk.energyLevel

  // this code sets the color of the energy bar based on how hungry the Hawk is
  // sated
  ifExpr {{ Hawk.getProp('energyLevel').value > 50 }} [[
    featProp Hawk.Costume.currentFrame setTo 0
    // Green
    featProp Hawk.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Hawk.getProp('energyLevel').value < 50 }} [[
    featProp Hawk.Costume.currentFrame setTo 1
    // Orange
    featProp Hawk.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Hawk.getProp('energyLevel').value < 20 }} [[
    featProp Hawk.Costume.currentFrame setTo 1
    // Red
    featProp Hawk.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Hawk.getProp('energyLevel').value < 1 }} [[
    featProp Hawk.Costume.currentFrame setTo 2
    prop Hawk.alpha setTo 0.3
    prop Hawk.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Hawk.Graphing.meterProp setTo 'energyLevel'

]]`
    },
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature Population
prop global.visible setTo false
addProp alphaSettingForAll number 0.5

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Pesticide",
      "scriptText": `# BLUEPRINT Pesticide
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Pesticide.Costume.costumeName setTo 'pesticide.png'

// add other features
addFeature Physics
addFeature Touches

featProp Pesticide.Costume.scale setTo 0.15

featProp Pesticide.Movement.compassDirection setTo 'west'
featProp Pesticide.Movement.movementType setTo 'wander'
featProp Pesticide.Movement.distance setTo 5
featCall Pesticide.Movement setRandomDirection

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Pesticide.Touches monitor 'Hawk' b2b
featCall Pesticide.Touches monitor 'Snake' b2b
featCall Pesticide.Touches monitor 'Robin' b2b
featCall Pesticide.Touches monitor 'Mouse' b2b
featCall Pesticide.Touches monitor 'Gopher' b2b
featCall Pesticide.Touches monitor 'Rabbit' b2b
featCall Pesticide.Touches monitor 'Snail' b2b
featCall Pesticide.Touches monitor 'Caterpillar' b2b
featCall Pesticide.Touches monitor 'Beetle' b2b
featCall Pesticide.Touches monitor 'Snake' b2b
featCall Pesticide.Touches monitor 'Weeds' b2b
featCall Pesticide.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 100
prop Pesticide.energyLevel setMax 100
prop Pesticide.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Pesticide lose energy faster (or slower)
addProp energyUse Number 0

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Pesticide.Graphing.meterProp setTo 'energyLevel'

featProp Pesticide.Graphing.meterColor setTo 65280

# PROGRAM EVENT

when Pesticide touches Snake [[
  every 1 [[
    ifExpr {{ Pesticide.getProp('alive').value == true &&  Snake.getProp('alive').value == true }} [[
      featProp Pesticide.Costume.glow setTo 1
      prop Snake.energyUse setTo 20
      prop Pesticide.energyLevel sub 10

    ]]
  ]]

  when Pesticide touches Robin [[
    every 1 [[
      ifExpr {{ Pesticide.getProp('alive').value == true &&  Robin.getProp('alive').value == true }} [[
        featProp Pesticide.Costume.glow setTo 1
        prop Pesticide.energyLevel sub 10
        prop Robin.energyUse setTo 20
      ]]
    ]]
  ]]

  when Pesticide touches Mouse [[
    every 1 [[
      ifExpr {{ Pesticide.getProp('alive').value == true &&  Mouse.getProp('alive').value == true }} [[
        featProp Pesticide.Costume.glow setTo 1
        prop Pesticide.energyLevel sub 10
        prop Mouse.energyUse setTo 20
      ]]
    ]]
  ]]

  when Pesticide touches Gopher [[
    every 1 [[
      ifExpr {{ Pesticide.getProp('alive').value == true &&  Gopher.getProp('alive').value == true }} [[
        featProp Pesticide.Costume.glow setTo 1
        prop Pesticide.energyLevel sub 10
        prop Gopher.energyUse setTo 20
      ]]
    ]]
  ]]

  when Pesticide touches Rabbit [[
    every 1 [[
      ifExpr {{ Pesticide.getProp('alive').value == true &&  Rabbit.getProp('alive').value == true }} [[
        featProp Pesticide.Costume.glow setTo 1
        prop Pesticide.energyLevel sub 10
        prop Rabbit.energyUse setTo 20
      ]]
    ]]
  ]]

  when Pesticide touches Hawk [[
    every 1 [[
      ifExpr {{ Pesticide.getProp('alive').value == true &&  Hawk.getProp('alive').value == true }} [[
        featProp Pesticide.Costume.glow setTo 1
        prop Pesticide.energyLevel sub 10
        prop Hawk.energyUse setTo 20
      ]]
    ]]
  ]]

  when Pesticide touches Snail [[
    every 1 [[
      ifExpr {{ Pesticide.getProp('alive').value == true &&  Snail.getProp('alive').value == true }} [[
        featProp Pesticide.Costume.glow setTo 1
        prop Pesticide.energyLevel sub 10
        prop Snail.energyUse setTo 20
      ]]
    ]]
  ]]

  when Pesticide touches Caterpillar [[
    every 1 [[
      ifExpr {{ Pesticide.getProp('alive').value == true &&  Caterpillar.getProp('alive').value == true }} [[
        featProp Pesticide.Costume.glow setTo 1
        prop Pesticide.energyLevel sub 10
        prop Caterpillar.energyUse setTo 20
      ]]
    ]]
  ]]

  when Pesticide touches Beetle [[
    every 1 [[
      ifExpr {{ Pesticide.getProp('alive').value == true &&  Beetle.getProp('alive').value == true }} [[
        featProp Pesticide.Costume.glow setTo 1
        prop Pesticide.energyLevel sub 10
        prop Beetle.energyUse setTo 20
      ]]
    ]]
  ]]

  when Pesticide touches Weeds [[
    every 1 [[
      ifExpr {{ Pesticide.getProp('alive').value == true &&  Weeds.getProp('alive').value == true }} [[
        featProp Pesticide.Costume.glow setTo 1
        prop Pesticide.energyLevel sub 10
        prop Weeds.energyUse setTo 20
      ]]
    ]]
  ]]

  when Pesticide touches Reincarnator [[
    ifExpr {{ Pesticide.getProp('alive').value == false }} [[
      featProp Pesticide.Costume.glow setTo 1
      prop Pesticide.alive setTo true
      prop Pesticide.alpha setTo 1
    ]]
  ]]

]]

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time
every 1 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Pesticide.getProp('energyLevel').value - Pesticide.getProp('energyUse').value }}
  propPop Pesticide.energyLevel

  // this code sets the color of the energy bar based on how hungry the Pesticide is
  // sated
  ifExpr {{ Pesticide.getProp('energyLevel').value > 50 }} [[
    featProp Pesticide.Costume.currentFrame setTo 0
    // Green
    featProp Pesticide.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Pesticide.getProp('energyLevel').value < 50 }} [[
    featProp Pesticide.Costume.currentFrame setTo 1
    // Orange
    featProp Pesticide.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Pesticide.getProp('energyLevel').value < 20 }} [[
    featProp Pesticide.Costume.currentFrame setTo 1
    // Red
    featProp Pesticide.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Pesticide.getProp('energyLevel').value < 1 }} [[
    featProp Pesticide.Costume.currentFrame setTo 2
    prop Pesticide.alpha setTo 0.3
    prop Pesticide.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Pesticide.Graphing.meterProp setTo 'energyLevel'

]]`
    },
    {
      "name": "Timer",
      "scriptText": `# BLUEPRINT Timer
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature Graphing
addFeature Costume
featProp Timer.Costume.costumeName setTo 'GEN_onexone.json'
addProp time number 0
prop Timer.zIndex setTo 500

featProp Timer.Graphing.text setTo 'Time: 0'

# PROGRAM UPDATE
every 1 runAtStart [[
  prop Timer.time add 1
  exprPush {{ 'Time: ' + agent.getProp('time').value }}
  featPropPop Timer.Graphing.text
]]`
    },
    {
      "name": "Turlugafish",
      "scriptText": `# BLUEPRINT Turlugafish
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable true

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Turlugafish.Costume.costumeName setTo '13.png'

// add other features
addFeature Physics
addFeature Touches

featProp agent.Costume.scale setTo 0.1

featProp Turlugafish.Movement.movementType setTo 'wander'
featProp Turlugafish.Movement.compassDirection setTo 'W'
featProp Turlugafish.Movement.distance setTo 4
featProp Turlugafish.Movement.targetY setMax 0.7

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Turlugafish.Touches monitor 'VeggieGarden' b2b
featCall Turlugafish.Touches monitor 'Clover' b2b
featCall Turlugafish.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Turlugafish.energyLevel setMax 100
prop Turlugafish.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Turlugafish lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Turlugafish.Graphing.meterProp setTo 'energyLevel'

featProp Turlugafish.Graphing.meterColor setTo 65280

# PROGRAM EVENT
every 1 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Turlugafish.getProp('energyLevel').value - Turlugafish.getProp('energyUse').value }}
  propPop Turlugafish.energyLevel

  // this code sets the color of the energy bar based on how hungry the Turlugafish is
  // sated
  ifExpr {{ Turlugafish.getProp('energyLevel').value > 50 }} [[
    featProp Turlugafish.Costume.currentFrame setTo 0
    // Green
    featProp Turlugafish.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Turlugafish.getProp('energyLevel').value < 50 }} [[
    featProp Turlugafish.Costume.currentFrame setTo 1
    // Orange
    featProp Turlugafish.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Turlugafish.getProp('energyLevel').value < 20 }} [[
    featProp Turlugafish.Costume.currentFrame setTo 1
    // Red
    featProp Turlugafish.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Turlugafish.getProp('energyLevel').value < 1 }} [[
    featProp Turlugafish.Costume.currentFrame setTo 2
    prop Turlugafish.alpha setTo 0.3
    featProp Turlugafish.Movement.movementType setTo 'stop'
  ]]

  // set meter to mirror energyLevel
  featProp Turlugafish.Graphing.meterProp setTo 'energyLevel'

]]
when Turlugafish touches VeggieGarden [[
  every 1 [[
    ifExpr {{ Turlugafish.getProp('alive').value == true &&  VeggieGarden.getProp('alive').value == true }} [[
      featProp Turlugafish.Costume.glow setTo 1
      prop Turlugafish.energyLevel add 10
      prop VeggieGarden.energyLevel sub 10
    ]]
  ]]

  when Turlugafish touches Clover [[
    every 1 runAtStart [[
      ifExpr {{ Turlugafish.getProp('alive').value == true &&  Clover.getProp('alive').value == true }} [[
        featProp Turlugafish.Costume.glow setTo 1
        prop Turlugafish.energyLevel add 10
        prop Clover.energyLevel sub 10
      ]]
    ]]
  ]]

  when Turlugafish touches Reincarnator [[
    ifExpr {{ Turlugafish.getProp('alive').value == false }} [[
      featProp Turlugafish.Costume.glow setTo 1
      prop Turlugafish.alive setTo true
      prop Turlugafish.alpha setTo 1
      prop Turlugafish.energyLevel setTo 50
    ]]
  ]]

]]


# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first timeTurlugafish`
    },
    {
      "name": "Shurp",
      "scriptText": `# BLUEPRINT Shurp
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable true

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Shurp.Costume.costumeName setTo '14.png'

// add other features
addFeature Physics
addFeature Touches

featProp agent.Costume.scale setTo 0.1

featProp Shurp.Movement.movementType setTo 'wander'
featProp Shurp.Movement.compassDirection setTo 'W'
featProp Shurp.Movement.distance setTo 4
featProp Shurp.Movement.targetY setMax 0.7

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Shurp.Touches monitor 'VeggieGarden' b2b
featCall Shurp.Touches monitor 'Clover' b2b
featCall Shurp.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Shurp.energyLevel setMax 100
prop Shurp.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Shurp lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Shurp.Graphing.meterProp setTo 'energyLevel'

featProp Shurp.Graphing.meterColor setTo 65280
# PROGRAM EVENT
every 1 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Shurp.getProp('energyLevel').value - Shurp.getProp('energyUse').value }}
  propPop Shurp.energyLevel

  // this code sets the color of the energy bar based on how hungry the Shurp is
  // sated
  ifExpr {{ Shurp.getProp('energyLevel').value > 50 }} [[
    featProp Shurp.Costume.currentFrame setTo 0
    // Green
    featProp Shurp.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Shurp.getProp('energyLevel').value < 50 }} [[
    featProp Shurp.Costume.currentFrame setTo 1
    // Orange
    featProp Shurp.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Shurp.getProp('energyLevel').value < 20 }} [[
    featProp Shurp.Costume.currentFrame setTo 1
    // Red
    featProp Shurp.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Shurp.getProp('energyLevel').value < 1 }} [[
    featProp Shurp.Costume.currentFrame setTo 2
    prop Shurp.alpha setTo 0.3
    featProp Shurp.Movement.movementType setTo 'stop'
  ]]

  // set meter to mirror energyLevel
  featProp Shurp.Graphing.meterProp setTo 'energyLevel'

]]
when Shurp touches VeggieGarden [[
  every 1 [[
    ifExpr {{ Shurp.getProp('alive').value == true &&  VeggieGarden.getProp('alive').value == true }} [[
      featProp Shurp.Costume.glow setTo 1
      prop Shurp.energyLevel add 10
      prop VeggieGarden.energyLevel sub 10
    ]]
  ]]

  when Shurp touches Clover [[
    every 1 runAtStart [[
      ifExpr {{ Shurp.getProp('alive').value == true &&  Clover.getProp('alive').value == true }} [[
        featProp Shurp.Costume.glow setTo 1
        prop Shurp.energyLevel add 10
        prop Clover.energyLevel sub 10
      ]]
    ]]
  ]]

  when Shurp touches Reincarnator [[
    ifExpr {{ Shurp.getProp('alive').value == false }} [[
      featProp Shurp.Costume.glow setTo 1
      prop Shurp.alive setTo true
      prop Shurp.alpha setTo 1
      prop Shurp.energyLevel setTo 50
    ]]
  ]]

]]

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time`
    },
    {
      "name": "ThreeBottom",
      "scriptText": `# BLUEPRINT ThreeBottom
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume

// set the costume
featProp ThreeBottom.Costume.costumeName setTo '18.png'

// add other features
addFeature Physics
addFeature Touches

featProp ThreeBottom.Costume.scale setTo 0.1

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall ThreeBottom.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 3/4 way
addProp energyLevel number 75
prop ThreeBottom.energyLevel setMax 100
prop ThreeBottom.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make ThreeBottom lose energy faster (or slower)
addProp energyUse number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp ThreeBottom.Graphing.meterProp setTo 'energyLevel'

featProp ThreeBottom.Graphing.meterColor setTo 65280

# PROGRAM EVENT


every 1 runAtStart [[

  // decrease energy each tick, using the energyUse varable to determine how much
  ifExpr {{ ThreeBottom.getProp('energyLevel').value > 0 }} [[
    exprPush {{ ThreeBottom.getProp('energyLevel').value - ThreeBottom.getProp('energyUse').value }}
    propPop ThreeBottom.energyLevel
  ]]

  // this code sets the color of the energy bar based on how hungry the ThreeBottom is
  // set ThreeBottom energy meter color
  // doing great
  ifExpr {{ ThreeBottom.getProp('energyLevel').value > 60 }} [[
    // Green
    featProp ThreeBottom.Graphing.meterColor setTo 65280
  ]]
  // needs some energy
  ifExpr {{ ThreeBottom.getProp('energyLevel').value < 60 }} [[
    // Orange
    featProp ThreeBottom.Graphing.meterColor setTo 16737792
  ]]
  // in trouble
  ifExpr {{ ThreeBottom.getProp('energyLevel').value < 30 }} [[
    // Red
    featProp ThreeBottom.Graphing.meterColor setTo 16711680
    // dead
    ifExpr {{ ThreeBottom.getProp('energyLevel').value < 1 }} [[
      featProp ThreeBottom.Costume.currentFrame setTo 2
      prop ThreeBottom.alpha setTo 0.3
      prop ThreeBottom.alive setTo false
    ]]

    // avoid getting too small
    exprPush {{ 0.3 }}
    featPropPop ThreeBottom.Costume.scale

  ]]
]]
every 25 [[
  ifProp ThreeBottom.energyLevel lessThan 1 [[
    featProp ThreeBottom.Costume.glow setTo 1
    prop ThreeBottom.alpha setTo 1
    prop ThreeBottom.energyLevel setTo 55
    prop ThreeBottom.alive setTo true
  ]]
]]


# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time`
    },
    {
      "name": "BelugaMan",
      "scriptText": `# BLUEPRINT BelugaMan
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT

addFeature Movement
addFeature Costume

// set the costume
featProp BelugaMan.Costume.costumeName setTo '21.png'

// add other features
addFeature Physics
addFeature Touches

featProp agent.Costume.scale setTo 0.1

featProp BelugaMan.Movement.compassDirection setTo 'north'
featProp BelugaMan.Movement.movementType setTo 'wander'
featProp BelugaMan.Movement.distance setTo 3
featProp BelugaMan.Movement.targetY setMax 0.7

addProp alive Boolean true


// make sure we track interactions with the other creatures
featCall BelugaMan.Touches monitor 'BillyFish' b2b
featCall BelugaMan.Touches monitor 'DorkADon' b2b
featCall BelugaMan.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop BelugaMan.energyLevel setMax 100
prop BelugaMan.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make BelugaMan lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp BelugaMan.Graphing.meterProp setTo 'energyLevel'

featProp BelugaMan.Graphing.meterColor setTo 65280

# PROGRAM EVENT
every 1 runAtStart [[
  when BelugaMan touches Reincarnator [[
    ifExpr {{ BelugaMan.getProp('alive').value == false }} [[
      featProp BelugaMan.Costume.glow setTo 1
      prop BelugaMan.alive setTo true
      prop BelugaMan.alpha setTo 1
      prop BelugaMan.energyLevel setTo 50
    ]]
  ]]
]]

when BelugaMan touches BillyFish [[
  every 1 [[
    ifExpr {{ BelugaMan.getProp('alive').value == true &&  BillyFish.getProp('alive').value == true }} [[
      featProp BelugaMan.Costume.glow setTo 1
      prop BelugaMan.energyLevel add 10
      prop BillyFish.alive setTo false
      prop BillyFish.alpha setTo 0.3
      prop BillyFish.energyLevel setTo 0
    ]]
  ]]
]]

when BelugaMan touches DorkADon [[
  every 1 [[
    ifExpr {{ BelugaMan.getProp('alive').value == true &&  DorkADon.getProp('alive').value == true }} [[
      featProp BelugaMan.Costume.glow setTo 1
      prop DorkADon.alive setTo false
      prop DorkADon.alpha setTo 0.3
      prop BelugaMan.energyLevel add 10
      prop DorkADon.energyLevel setTo 0
    ]]
  ]]
]]




# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time
every 1 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ BelugaMan.getProp('energyLevel').value - BelugaMan.getProp('energyUse').value }}
  propPop BelugaMan.energyLevel

  // this code sets the color of the energy bar based on how hungry the BelugaMan is
  // sated
  ifExpr {{ BelugaMan.getProp('energyLevel').value > 50 }} [[
    featProp BelugaMan.Costume.currentFrame setTo 0
    // Green
    featProp BelugaMan.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ BelugaMan.getProp('energyLevel').value < 50 }} [[
    featProp BelugaMan.Costume.currentFrame setTo 1
    // Orange
    featProp BelugaMan.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ BelugaMan.getProp('energyLevel').value < 20 }} [[
    featProp BelugaMan.Costume.currentFrame setTo 1
    // Red
    featProp BelugaMan.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ BelugaMan.getProp('energyLevel').value < 1 }} [[
    featProp BelugaMan.Costume.currentFrame setTo 2
    prop BelugaMan.alpha setTo 0.3
    prop BelugaMan.alive setTo false
    featProp BelugaMan.Movement.movementType setTo 'stop'
  ]]

  // set meter to mirror energyLevel
  featProp BelugaMan.Graphing.meterProp setTo 'energyLevel'

]]`
    }
  ],
  "instances": [
    {
      "id": "13",
      "label": "Background13",
      "bpid": "Background",
      "initScript": `prop x setTo -0.99
prop y setTo -3.57`
    },
    {
      "id": "79",
      "label": "Timer79",
      "bpid": "Timer",
      "initScript": `prop x setTo -360.57
prop y setTo -398.91`
    },
    {
      "id": "99",
      "label": "Background99",
      "bpid": "Background",
      "initScript": `prop x setTo -14
prop y setTo -5`
    }
  ]
}