{
  "id": "aquatic_energy",
  "label": "Ecosystems 2: Aquatic Energy",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 11393254,
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false,
    "defaultCharacter": "Fish"

  },
  "rounds": [],
  "blueprints": [
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body


// 🔎 WHAT DOES THIS MODEL DO?
// 🔎 This model involves learners repreesenting the energy flow in an aquatic ecosystem
// 🔎 Each student controls an EnergyRepresentation character, which is a circle indicating
// 🔎 initially that they should look around, and then later what kind of energy they have picked up.
// 🔎 Students should move around to see what kind of energy they get and how it moves between specific character types.
// 🔎 Note: Fish and Algae use energy over time, so you'll need to move quickly to keep them alive! 

// 🔎 WHAT does this script do?
// This is the script that runs when the model is setup

# PROGRAM INIT

// we don't need to see this character, we just use it to keep track of things
prop global.visible setTo false

// Add features
addFeature Population

// =============================================================
// Add any code for global properties here (e,g. addProp)

// 🔎 This property lets us track energy that is lost as heat.
// 🔎 When characters convert energy to matter, or consume energy by digesting food, some of it is lost as heat
// 🔎 and this property helps us track that so that we can graph it if we want.
addProp energyReleasedAsHeat number 0


// Counters to be used in the HealthMeter Character
// We set them up and update them here to make it 
// easier to edit that character
addProp fishCount number 0
addProp algaeCount number 0
addProp predatorCount number 0
addProp allOrganismsCount number 0
addProp averageFishEnergy number 0
addProp averageAlgaeEnergy number 0
addProp averagePredatorEnergy number 0
addProp averageConsumerEnergy number 0
addProp averageProducerEnergy number 0
addProp averageEnergyAllOrganisms number 0

// =============================================================

# PROGRAM UPDATE

every 1 runAtStart [[
  // 🔎 WHAT DOES THIS SCRIPT DO?
  // 🔎 This secript sets up all of the different variables we might want to use 
  // 🔎 inside of the health meter including several average energy levels. 

  // grab the Fish average energy and count
  featCall global.Population countCharacterProp 'Fish' 'energyLevel'
  featPropPush global.Population.avg
  propPop global.averageFishEnergy
  featPropPush global.Population.count
  propPop global.fishCount

  // grab the Algae average eenergy  and count
  featCall global.Population countCharacterProp 'Algae' 'energyLevel'
  featPropPush global.Population.avg
  propPop global.averageAlgaeEnergy
  featPropPush global.Population.count
  propPop global.algaeCount

  // grab the Predator average eenergy  and count
  featCall global.Population countCharacterProp 'Predator' 'energyLevel'
  featPropPush global.Population.avg
  propPop global.averagePredatorEnergy
  featPropPush global.Population.count
  propPop global.predatorCount

  // add the producers and divide by the number of producers
  // ignore divide step since only 1 type (Algae)
  propPush global.averageAlgaeEnergy
  propPop global.averageProducerEnergy

  // calculate the big averages ...
  exprPush {{ (global.getProp('averageFishEnergy').value *  global.getProp('fishCount').value  +  global.getProp('averagePredatorEnergy').value *  global.getProp('predatorCount').value) / (global.getProp('fishCount').value  +  global.getProp('predatorCount').value) }}
  propPop global.averageConsumerEnergy

  exprPush {{ (global.getProp('fishCount').value + global.getProp('predatorCount').value + global.getProp('algaeCount').value) }}
  propPop global.allOrganismsCount

  exprPush {{ ( ((global.getProp('averageConsumerEnergy').value * (global.getProp('fishCount').value + global.getProp('predatorCount').value)) + ( global.getProp('averageProducerEnergy').value * global.getProp('algaeCount').value) )) / global.getProp('allOrganismsCount').value }}
  propPop global.averageEnergyAllOrganisms


]]`
    },
    {
      "name": "Sun",
      "scriptText": `# BLUEPRINT Sun
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body


// 🔎 WHAT DOES THIS CHARACTER DO?
// 🔎 The sun is one of the characters that produces energy
// 🔎 Since it is a perpetual source of energy and doesn't do anything but sit here, it is relatively
// 🔎 simple, and just needs the properties for the EnergyRepresentation characters to read
// 🔎 so that they can carry the energy to other characters 

# PROGRAM INIT

// Add features
addFeature Costume
addFeature Physics

// set the artworrk for the sun, color it, and then set its size
featProp Sun.Costume.costumeName setTo 'GEN_sun-corner.png'
//featCall Sun.Costume setColorize 255 215 0
featProp Sun.Costume.scale setTo 1.3

// This makess sure the sun is behind everything else
prop Sun.zIndex setTo 0

// types to use for energy transfer. The types are source, producer, consumer (we might add more later)
// these are referenced by EnergyRepresentation
addProp energyType string 'source'

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Fish",
      "scriptText": `# BLUEPRINT Fish
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body


// 🔎 WHAT DOES THIS CHARACTER DO?
// 🔎 The fish are consumers that eat the producers (Algae) and digest them to get energy
// 🔎 and to grow / make matter

// 🔎 WHAT DO THESE MEAN?
// 🔎 producer: an organism that converts energy from the sun into matter (e.g.. plants)
// 🔎 consumer: an organism that eats producers or consuumers.
// 🔎 The matter that consumers eat is converted to energy through digestion

# PROGRAM INIT
// 🔎 WHAT DOES THIS SCRIPT DO?
// 🔎 The fish is one of the characters that takes / produces energy
// 🔎 Note that it mostly just stores properties that the EnergyRepresentation will check / change
// 🔎 The other main functionality (under update) is that it will update its meter color depending on
// 🔎 how much energy it has

// Setup features
addFeature Costume
addFeature Physics

// Load the fish image and re-size it
featProp Fish.Costume.costumeName setTo 'AQ_fish.png'
featProp Fish.Costume.scale setTo 0.4

// types to use for energy transfer. The types are source, producer, consumer (we might add more later)
// these are referenced by EnergyRepresentation
addProp energyType string 'consumer'

// setup to track energy and begin at 1/2 way
addProp energyLevel number 50
prop Fish.energyLevel setMax 100
prop Fish.energyLevel setMin 0

// ✏️ LETS CHANGE THIS!
// ✏️ to make Fish lose energy faster (or slower)
addProp energyUse number 1

// use a meter to depict the current energy, and color it green
addFeature Graphing
featProp Fish.Graphing.meterProp setTo 'energyLevel'
featProp Fish.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 1 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Fish.getProp('energyLevel').value - Fish.getProp('energyUse').value }}
  propPop Fish.energyLevel

  // this code sets the color of the energy bar based on how hungry the fish is

  // The fish is doing well
  ifProp Fish.energyLevel greaterThan 50 [[
    featProp Fish.Costume.costumeName setTo 'AQ_fish.png'
    // Green
    featProp Fish.Graphing.meterColor setTo 65280
  ]]
  // The fish is hungry
  ifProp Fish.energyLevel lessThan 50 [[
    featProp Fish.Costume.costumeName setTo 'AQ_fish_hungry.png'
    // Orange
    featProp Fish.Graphing.meterColor setTo 16737792
  ]]
  // The fish is starvinig
  ifProp Fish.energyLevel lessThan 20 [[
    featProp Fish.Costume.costumeName setTo 'AQ_fish_hungry.png'
    // Red
    featProp Fish.Graphing.meterColor setTo 16711680
  ]]
  // The fish is dead
  ifProp Fish.energyLevel equal 0 [[
    featProp Fish.Costume.currentFrame setTo 2
    prop Fish.alpha setTo 0.3
    prop Fish.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Fish.Graphing.meterProp setTo 'energyLevel'

]]`
    },
    {
      "name": "Algae",
      "scriptText": `# BLUEPRINT Algae
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false


// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body


// 🔎 WHAT DOES THIS CHARACTER DO?
// 🔎 The algae is one of the characters that takes / produces energy
// 🔎 Note that it mostly just stores properties that the EnergyRepresentation will check / change
// 🔎 The other main functionality (under update) is that it will update its meter color depending on
// 🔎 how much energy it has

// 🔎 WHAT DO THESE MEAN?
// 🔎 producer: an organism that converts energy from the sun into matter (e.g.. plants)
// 🔎 consumer: an organism that eats producers or consuumers.
// 🔎 The matter that consumers eat is converted to energy through digestion.


# PROGRAM INIT

// Setup the features
addFeature Costume
addFeature Physics

// Set the artowrk and scale it
featProp Algae.Costume.costumeName setTo 'AQ_algae.png'
featProp Algae.Costume.scale setTo 0.2

// types to use for energy transfer. The types are source, producer, consumer (we might add more later)
// these are referenced by EnergyRepresentation
addProp energyType string 'producer'

// setup to track energy and begin at 1/2 way
addProp energyLevel number 50
prop Algae.energyLevel setMax 100
prop Algae.energyLevel setMin 0

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Algae.Graphing.meterProp setTo 'energyLevel'
// Green = 0x00FF00
featProp Algae.Graphing.meterColor setTo 65280

# PROGRAM UPDATE
every 1 runAtStart [[

  // ✏️ LETS CHANGE THIS!
  // ✏️ The algae use energy to survive, so decrease energy each second
  prop Algae.energyLevel sub 1

  // re-size the algae based on its energy level so that
  // if it has lots of energy it grows nice and big, and low energy
  // either from being eaten or just using it all up means it is shrinking and
  // will die if it hits 0
  ifProp Algae.energyLevel notEqual 0 [[
    exprPush {{ (Algae.getProp('energyLevel').value / 100)* 0.2 }}
    featPropPop Algae.Costume.scale
  ]]

  // this scripts sets the color of the energy bar next to the algae based on how it is doing
  // in terms of the amount of energy it has
  ifProp Algae.energyLevel greaterThanOrEqual 60 [[
    // Doing great - Green
    featProp Algae.Graphing.meterColor setTo 65280
  ]]
  ifProp Algae.energyLevel lessThan 60 [[
    // needs some energy - Orange
    featProp Algae.Graphing.meterColor setTo 16737792
  ]]
  ifProp Algae.energyLevel lessThan 30 [[
    // in trouble - Red
    featProp Algae.Graphing.meterColor setTo 16711680

  ]]
]]`
    },
    {
      "name": "Sky",
      "scriptText": `# BLUEPRINT Sky
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body


// 🔎 WHAT DOES THIS CHARACTER DO?
// 🔎 this character doesn't do anyhting - it is just art for the background

# PROGRAM INIT

addFeature Costume
featProp Sky.Costume.costumeName setTo 'GEN_square.json'
featCall Sky.Costume setColorize 53 81 92

addFeature Physics
featProp Sky.Costume.width setTo 800 
featProp Sky.Costume.height setTo 200 

// make sure this is always way in the back behind all 
// of the other characters
prop Sky.zIndex setTo -100
`
    },
    {
      "name": "EnergyRepresentation",
      "scriptText": `# BLUEPRINT EnergyRepresentation
# TAG isCharControllable true
# TAG isPozyxControllable true
# TAG isPTrackControllable false

// 🔎 WHAT DOES THIS CHARACTER DO?
// 🔎 This is the charracter that students control in this model.
// 🔎 it shows different types of energy to help students show how energy flows between
// 🔎 the different characters in this ecosystem.

// 🔎 When this representation  touches each possible energy source you will see what that source is doing to get energy.
// 🔎 If you brought in the right kind of enerrgy for the character you are touching, the character will glow
// 🔎 so that you know it is gaining some energy
// 🔎 NOTE: all of the energy amounts are made up numbers to give you an idea how things work

// Run this to setup the character
# PROGRAM INIT

// Add features
addFeature Costume
addFeature Physics
addFeature Touches

// Start off looking like a magnifying lense so we know that you need to go look at the other characters.
// Later this will change to different types of energy as the students move over the other characters.
featProp EnergyRepresentation.Costume.costumeName setTo 'AQ_energy_empty.png'
featProp EnergyRepresentation.Costume.scale setTo 0.5
prop EnergyRepresentation.alpha setTo 0.8

// Setup energy properties
addProp energyLevel number 0
prop EnergyRepresentation.energyLevel setMax 100
prop EnergyRepresentation.energyLevel setMin 0

// Setup energy type so that we know what we can give it to
// start with none beause we have not picked up energy yet.
addProp energyType string 'none'

// Setup the touch moniitoring so that we check when the
// EnergyRepresentation characters touch the Sun, Algae, or Fish
// The scripts for when they do touch are within Update (e.g., when EnergyRepresentation touches Sun etc.)
featCall EnergyRepresentation.Touches monitor 'Sun' b2b
featCall EnergyRepresentation.Touches monitor 'Algae' b2b
featCall EnergyRepresentation.Touches monitor 'Fish' b2b

// Run this secript constantly while the model is running
# PROGRAM UPDATE

// 🔎 ================================================================
// 🔎 WHAT DOES THE REPRESENTATION DO WHEN INTERACTING WITH THE SUN
// 🔎 ================================================================

when EnergyRepresentation firstTouches Sun [[
  // The sun is a near-infinite source of energy
  // so change the art to be sun, and set the type to source
  // also we always re-set energy to be sun when we go there
  featProp EnergyRepresentation.Costume.costumeName setTo 'AQ_energy_sun.png'
  prop EnergyRepresentation.energyType setTo 'source'

  // set the energy amount to 100 because lots of energy arrives on earth
  // from the sun even if a lot of it is not used by organisms (except to warm them up)
  prop EnergyRepresentation.energyLevel setTo 100
]]

// 🔎 ================================================================
// 🔎 WHAT DOES THE REPRESENTATION DO WHEN INTERACTING WITH THE ALGAE
// 🔎 ================================================================

when EnergyRepresentation firstTouches Algae [[

  // if we aren't already carrying producer energy
  // change the representation to let us know that the algae is using energy from the sun
  // to make food that it uses as a source of energy to live and grow, so we show
  // sun energy converting to algae energy
  ifProp EnergyRepresentation.energyType notEqual 'producer' [[
    featProp EnergyRepresentation.Costume.costumeName setTo 'AQ_energy_sun_algae.png'
  ]]

  // if you have energy from the sun, then give some energy to the algae, but not all of it because some
  // is released into the environment as heat or lost in other ways
  ifProp EnergyRepresentation.energyType equal 'source' [[

    // ✏️ LETS CHANGE THIS to alter how much energy the algae gets from the sun
    // 🔎 Remove the energy from the representation since we are giving it to the Algae
    prop EnergyRepresentation.energyLevel setTo 0
    // 🔎 Set how much the algae now has (note that the meter started with 100, so 50 means that some is lost to heat)
    prop Algae.energyLevel add 50

    // 🔎 WHAT DOES THIS DO?
    // 🔎 We are losing 50 of the hundred as heat, so put that in the global
    // 🔎 All biological processes for using and converting energy are imperfect and lose some energy in the process.
    // 🔎 Add the lost energy to the global chaaracter so that we can keep track of it and even graph it if we want to.
    prop global.energyReleasedAsHeat add 50

    // have the algae glow so that we know it is getting some energy
    featProp Algae.Costume.glow setTo 1
  ]]

  // if we aren't already carrying producer energy
  // note that we are representing the use of energy,
  // whether we got new energy from the sun or not
  // because plants always need some energy to live
  ifProp EnergyRepresentation.energyType notEqual 'producer' [[
    prop EnergyRepresentation.energyType setTo 'usingSun'
  ]]
]]

when EnergyRepresentation lastTouches Algae [[

  // Only do things if you are not already carrying producer energy otherwise
  // assume you should just take it somewhere else
  ifProp EnergyRepresentation.energyType notEqual 'producer' [[

    // If we didn't have enough energy, then just set to none and show that we are empty
    // so that we know we need to go find some
    ifProp Algae.energyLevel lessThan 25 [[
      prop EnergyRepresentation.energyType setTo 'none'
      featProp EnergyRepresentation.Costume.costumeName setTo 'AQ_energy_empty.png'
    ]]

    // Otherwise, if the algae has at least 25 energy, then carry 25 away with you
    // if not, then the algae is too small to eat,  so revert to none and look for more energy
    ifProp Algae.energyLevel greaterThan 25 [[

      // The algae loses some energy because we pretend the fish is eating it
      // and we carry it out to give to a fish
      prop Algae.energyLevel sub 25
      prop EnergyRepresentation.energyLevel add 25

      // we are now carrying algae energy (energy from a producer)
      featProp EnergyRepresentation.Costume.costumeName setTo 'AQ_energy_algae.png'
      prop EnergyRepresentation.energyType setTo 'producer'

    ]]
  ]]
]]

// 🔎 ================================================================
// 🔎 WHAT DOES THE REPRESENTATION DO WHEN INTERACTING WITH THE FISH
// 🔎 ================================================================

when EnergyRepresentation firstTouches Fish [[

  // change the representation to let us know that the fish is using energy that it has
  // gained by digesting the algae that it ate
  featProp EnergyRepresentation.Costume.costumeName setTo 'AQ_energy_algae_fish.png'

  // If you are carrying energy from algae (from eating it) then let's add some of that to the fish
  ifProp EnergyRepresentation.energyType equal 'producer' [[

    // 🔎 WHAT DOES THIS DO?
    // 🔎 We need to give the bubble's energy to the algae

    // ✏️ LETS CHANGE THIS
    // ✏️ How much energy does the 🔘 bubble 🔘 have now?
    prop EnergyRepresentation.energyLevel setTo 0

    // ✏️ LETS CHANGE THIS
    // ✏️ How much energy does the 🐠 fish 🐠 get?
    prop Fish.energyLevel add 10


    // ✏️ LETS CHANGE THIS
    // ✏️ How much energy gets lost to 💥 HEAT 💥?
    prop global.energyReleasedAsHeat add 15

    // the fish glows
    featProp Fish.Costume.glow setTo 1

  ]]
  prop EnergyRepresentation.energyType setTo 'usingAlgae'

]]

when EnergyRepresentation lastTouches Fish [[

  // There is nothing to do with Fish energy, so just re-set this to show
  // that we need to look for energy again
  prop EnergyRepresentation.energyType setTo 'none'
  featProp EnergyRepresentation.Costume.costumeName setTo 'AQ_energy_empty.png'
]]`
    },
    {
      "name": "Timer",
      "scriptText": `# BLUEPRINT Timer
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body


// 🔎 WHAT DOES THIS CHARACTER DO?
// 🔎 This is a timer character so that we can see how much time has passed in our model
// 🔎 We can use that time to think about how long the ecosystem survives if we want

# PROGRAM INIT

// Setup features
addFeature Graphing
addFeature Costume

// Hide the actual art since we just want the text to displaay
featProp Timer.Costume.costumeName setTo 'GEN_onexone.json'
featProp Timer.Costume.scale setTo 1

// A property to track the time
addProp time number 0

// set the initial label and then update it below during update
featProp Timer.Graphing.text setTo 'Time: 0'

# PROGRAM UPDATE
// every second, add one to the time property and display the new time in the format \"Time: #\"\"
every 1 runAtStart [[
  prop Timer.time add 1
  exprPush {{ 'Time: ' + Timer.getProp('time').value }}
  featPropPop Timer.Graphing.text
]]`
    },
    {
      "name": "GraphLostEnergy",
      "scriptText": `# BLUEPRINT GraphLostEnergy
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body


// 🔎 WHAT DOES THIS CHARACTER DO?
// 🔎 This is a graph of energy lost to heat from all charaacters
// 🔎 since there are lots of characters, rather than sume them up one type
// 🔎 at a time, use a global variabe to track that excess heat

# PROGRAM INIT

// setup the features
addFeature Costume
addFeature Graphing
addFeature Population

// hide the actual art since we just want the text to displaay
featProp GraphLostEnergy.Costume.costumeName setTo 'GEN_onexone.json'

// we want the graph to show up big
featProp GraphLostEnergy.Graphing.isLargeGraphic setTo true


// using a generic name so that it is easier to change later
addProp lostEnergy number 0
prop GraphLostEnergy.lostEnergy setMax 1000
prop GraphLostEnergy.lostEnergy setMin 0

// Graph the lostEnergy, and update if that property does
featProp GraphLostEnergy.Graphing.graphProp setTo 'lostEnergy'

// Set the graph label
featProp GraphLostEnergy.Graphing.text setTo 'Lost Energy As Heat'

// Set the graph to have a range of 0-1000
featProp GraphLostEnergy.Graphing.graphMinY setTo 0
featProp GraphLostEnergy.Graphing.graphMaxY setTo 1000


# PROGRAM UPDATE

// Once every second or so ...
onEvent Tick [[

  // update thee lost energy property by checking the global
  // energyReleasedAsHeat that we are tracking within the global character
  propPush global.energyReleasedAsHeat
  propPop GraphLostEnergy.lostEnergy
]]`
    },
    {
      "name": "GraphEnergyInEcosystem",
      "scriptText": `# BLUEPRINT GraphEnergyInEcosystem
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body


# PROGRAM DEFINE
// hide the actual art since we just want the text to displaay
addFeature Costume
featProp GraphEnergyInEcosystem.Costume.costumeName setTo 'GEN_onexone.json'
featProp GraphEnergyInEcosystem.Costume.scale setTo 1

addFeature Graphing
addFeature Population
featProp GraphEnergyInEcosystem.Graphing.isLargeGraphic setTo true

// using a generic name so that it is easier to change later
addProp totalEnergy number 0
prop GraphEnergyInEcosystem.totalEnergy setMax 1000
prop GraphEnergyInEcosystem.totalEnergy setMin 0

// to store the current values of algae and fish separately
// I could just add them up below, but this way we can see them in the inspector
addProp totalAlgaeEnergy number 0
addProp totalFishEnergy number 0

// Graph the total energy property and change if it changes
featProp GraphEnergyInEcosystem.Graphing.graphProp setTo 'totalEnergy'

// Set the graph label
featProp GraphEnergyInEcosystem.Graphing.text setTo 'Energy in Ecosystem'

// Set the graph to have a range of 0-1000
featProp GraphEnergyInEcosystem.Graphing.graphMinY setTo 0
featProp GraphEnergyInEcosystem.Graphing.graphMaxY setTo 1000

# PROGRAM UPDATE

onEvent Tick [[

  // count up the algae energy
  featCall GraphEnergyInEcosystem.Population countCharacterProp 'Algae' 'energyLevel'
  exprPush {{ GraphEnergyInEcosystem.getFeatProp('Population', 'sum').value }}
  propPop GraphEnergyInEcosystem.totalAlgaeEnergy

  // count up the fish enerrgy
  featCall GraphEnergyInEcosystem.Population countCharacterProp 'Fish' 'energyLevel'
  exprPush {{ GraphEnergyInEcosystem.getFeatProp('Population', 'sum').value }}
  propPop GraphEnergyInEcosystem.totalFishEnergy

  // graph the sum of the fish and algae energy
  exprPush {{ GraphEnergyInEcosystem.getProp('totalAlgaeEnergy').value + GraphEnergyInEcosystem.getProp('totalFishEnergy').value }}
  propPop GraphEnergyInEcosystem.totalEnergy
]]

// required directive
# PROGRAM INIT`
    },
    {
      "name": "Background",
      "scriptText": `# BLUEPRINT Background LOAD
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body


// required directive
# PROGRAM INIT
addFeature Costume
featProp Background.Costume.costumeName setTo 'AQ_background_aquatic.png'
featProp Background.Costume.height setTo 600
featProp Background.Costume.width setTo 800

prop Background.zIndex setTo -999


// required directive
# PROGRAM UPDATE
`
    },
    {
      "name": "HealthMeter",
      "scriptText": `# BLUEPRINT HealthMeter
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body


// 🔎 WHAT DOES THIS CHARACTER DO?
// 🔎 This is a meter to show the health of the entire ecosystem
// 🔎 Initialy it only shows fish health, but we want to explore changing this

# PROGRAM INIT
addFeature Population
addFeature Graphing
addFeature Costume

// setup a healthLevel that we will use to make the meter show a level
addProp healthLevel number 100
prop HealthMeter.healthLevel setMin 0
prop HealthMeter.healthLevel setMax 100

// ✏️ LETS CHANGE THIS the meter label
// Set the text under the meter to label it
featProp HealthMeter.Graphing.text setTo 'Ecosystem Health'

// Make costume an invisible dot so we only see the meter
featProp HealthMeter.Costume.costumeName setTo 'GEN_onexone.json'

// Show meter on start, and make it big
featProp HealthMeter.Graphing.isLargeGraphic setTo true
featProp HealthMeter.Graphing.meterColor setTo 65280

// Set the meter to reflect the health level so that it will update
// whenever the health does
featProp HealthMeter.Graphing.meterProp setTo 'healthLevel'


# PROGRAM UPDATE

onEvent Tick [[
  // This script below is where you can decide what the current health meter shows

  // 🔎 QUESTION what does it mean to say an ecoyststem is healthy?
  // 🔎 Nathan thinks that the fish are the most imporatant thing in the pond
  // 🔎 So, we set the system health to the averageFishEnergy, but you can change that to match what you uwant
  // ✏️ LETS CHANGE THIS what the meter displays
  // ✏️ What property do we want to use?
  propPush global.averageFishEnergy

  // put our variable into the healthLevel
  propPop HealthMeter.healthLevel

  // ✏️ LETS CHANGE THIS section to change what color the meter is at different healthLevels
  ifProp HealthMeter.healthLevel greaterThanOrEqual 50 [[
    // set the meter to green
    featProp HealthMeter.Graphing.meterColor setTo 65280
  ]]
  ifProp HealthMeter.healthLevel lessThan 50 [[
    // set the meter to orange
    featProp HealthMeter.Graphing.meterColor setTo 16737792
  ]]
  ifProp HealthMeter.healthLevel lessThan 20 [[
    // set the meter to red
    featProp HealthMeter.Graphing.meterColor setTo 16711680
  ]]

]]`
    },
    {
      "name": "TextLabel",
      "scriptText": `# BLUEPRINT TextLabel
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body


// 🔎 WHAT DOES THIS CHARACTER DO?
// 🔎 This is just a text label for use in the key or somewhere else to display information

# PROGRAM INIT
addFeature Graphing
addFeature Costume

// invisible since we just want the text to show up
featProp TextLabel.Costume.costumeName setTo 'GEN_onexone.json'

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "ColorChip",
      "scriptText": `# BLUEPRINT ColorChip
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body


// 🔎 WHAT DOES THIS CHARACTER DO?
// 🔎 This is just a color square for use in the KEY. See the instance for where the size and color are set
// 🔎 (e.g., go to map setup)

# PROGRAM INIT
addFeature Costume
featProp ColorChip.Costume.costumeName setTo 'GEN_square.json'

addFeature Physics

// this is required by GEM-STEP in case we need to udpate this ecery second
# PROGRAM UPDATE`
    }
  ],
  "instances": [
    {
      "id": "0",
      "label": "Sunbeam",
      "bpid": "Sun",
      "initScript": `prop x setTo -259.64
prop y setTo -317.83`
    },
    {
      "id": "1",
      "label": "Fish 1",
      "bpid": "Fish",
      "initScript": `prop x setTo -299.23
prop y setTo 124.37`
    },
    {
      "id": "2",
      "label": "Algae 1",
      "bpid": "Algae",
      "initScript": `prop x setTo -283.79
prop y setTo -117.92`
    },
    {
      "id": "3",
      "label": "Algae 2",
      "bpid": "Algae",
      "initScript": `prop x setTo -129.82
prop y setTo -60.70`
    },
    {
      "id": "4",
      "label": "Fish 2",
      "bpid": "Fish",
      "initScript": `prop x setTo -122.81
prop y setTo 250.82`
    },
    {
      "id": "5",
      "label": "Timer",
      "bpid": "Timer",
      "initScript": `prop x setTo 348.54
prop y setTo -406.41`
    },
    {
      "id": "6",
      "label": "TimerChip",
      "bpid": "ColorChip",
      "initScript": `prop x setTo 350.35
prop y setTo -385.69
featCall Costume setColorize 0 0 0
prop zIndex setTo -100
featProp agent.Costume.width setTo 100
featProp agent.Costume.height setTo 30
`
    },
    {
      "id": "9",
      "label": "Algae 3",
      "bpid": "Algae",
      "initScript": `prop x setTo 29.78
prop y setTo -152.41`
    },
    {
      "id": "10",
      "label": "Algae 4",
      "bpid": "Algae",
      "initScript": `prop x setTo 164.50
prop y setTo -66.30`
    },
    {
      "id": "11",
      "label": "Algae 5",
      "bpid": "Algae",
      "initScript": `prop x setTo 333.33
prop y setTo -168.57`
    },
    {
      "id": "12",
      "label": "Fish 3",
      "bpid": "Fish",
      "initScript": `prop x setTo 42.78
prop y setTo 101.28`
    },
    {
      "id": "13",
      "label": "Fish 4",
      "bpid": "Fish",
      "initScript": `prop x setTo 181.64
prop y setTo 258.47`
    },
    {
      "id": "14",
      "label": "Fish 5",
      "bpid": "Fish",
      "initScript": `prop x setTo 314.29
prop y setTo 102.49`
    },
    {
      "id": "15",
      "label": "Background Image",
      "bpid": "Background",
      "initScript": `prop x setTo 0
prop y setTo  100`
    },
    {
      "id": "16",
      "label": "GraphLostEnergy16",
      "bpid": "GraphLostEnergy",
      "initScript": `prop x setTo 514.01
prop y setTo 312.31`
    },
    {
      "id": "17",
      "label": "GraphEnergyInEcosystem17",
      "bpid": "GraphEnergyInEcosystem",
      "initScript": `prop x setTo 514.23
prop y setTo 135.96`
    }
  ]
}