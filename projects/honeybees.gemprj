{
  "id": "honeybees",
  "label": "Bees and Pollination",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 0,
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [],
  "ecaTypes": [
    {
      "label": "Megan",
      "name": "Knowledge_Pollination",
      "initialMessage": "How did you do?"
    },
    {
      "label": "Selene",
      "name": "Knowledge_FoodJustice",
      "initialMessage": "What did you notice?"
    }
  ],
  "blueprints": [
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body

# PROGRAM INIT

// add features
addFeature Population

// add props
addProp hiveIDPassing number 1

// use this global in the bee dance watching
addProp flowerXPassing number 0
addProp flowerYPassing number 0

// for updating the hive counts to display 
addProp dancingBeesCounter number 0
addProp watchingBeesCounter number 0

// to create flowers of a specific type 
addProp baseTypePassing string ''

// hide this
prop global.visible setTo false

# PROGRAM UPDATE`
    },
    {
      "name": "Bee",
      "scriptText": `# BLUEPRINT Bee
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
useFeature Costume
useFeature Physics
useFeature Movement
useFeature Touches
useFeature Graphing
useFeature Population

featProp Bee.Costume.costumeName setTo 'HB_bee.png' 
featProp Bee.Costume.scale setTo 0.3
featProp Bee.Movement.useAutoOrientation setTo true

featCall Bee.Touches monitor Flower c2b
featCall Bee.Touches monitor Hive c2b

addProp nectarAmount number 0
prop Bee.nectarAmount setMax 20
prop Bee.nectarAmount setMin 0

// this tracks the hive the bee belongs to. If it is 0, we assume kids control the bee and it can go anywhere. 
// if it is a number, we assume code created the bee, and it will only go to its home hive 
addProp hiveID number 0

// where is our hive located?
addProp hiveX number 0
addProp hiveY number 0

// remember if we are pollinating this color or not (might be redundant if we use the ID cleverly?)
addProp pollinateRed boolean false
addProp pollinateYellow boolean false
addProp pollinateBlue boolean false
addProp pollinateSquash boolean false
addProp pollinateWaterMelon  boolean false
addProp pollinatePumpkin boolean false

// what was the last flower of a given color that we visited so that we don't self-pollinate
// future iterations might use a separate variable for self-pollination
addProp redID number 0
addProp blueID number 0
addProp yellowID number 0
addProp squashID number 0
addProp watermelonID number 0
addProp pumpkinID number 0

// temp variables so that we can dynamically access the stuff above?
addProp pollinatedColor boolean false
addProp pollinatedID number 0

featProp Bee.Graphing.meterProp setTo 'nectarAmount'

addProp beeID number 1

// setup some variables to remember a flower we visited and its location
addProp visitedX number 0
addProp visitedY number 0
addProp visitedQuality number 0
addProp visitedAmount number 0

// to keep track of how long we've been dancing if in fancing mode
addProp dancingCounter number 0
addProp watchingCounter number 0

// speed of flight
addProp beeSpeed number 3
prop Bee.beeSpeed setTo 10

// mode to determine what AI bees do
// if the mode is set to user, which is the default, assume the AI shouldn't do anything because it is controlled
// via pozyx or ptrack. so we need to set the mode to something else if spawned by a hive
// NOTE: to start some AI bees in the hive, change the hive property aiBeeCount and it will spawn them automatically
// all modes
  // user: controlled by a user, so no AI 
  // user-dancing: controlled by user, but hanging in the hive
  // forage: get the nectar it knows about
  // scouting: look for a new flower
  // danceing: dance so other bees know about nectar
  // watching: watch for dance, then likely switch to forwage or scout 
  // collecting: while grabbing the nectar at a flower
  // returning: we should head back to the hive

  addProp mode string 'user'

  // give it the next available ID, in order 
featCall Bee.Population getActiveCharactersCount 'Bee'
featPropPush Bee.Population.count
propPop Bee.beeID
prop Bee.beeID add 1

  ifExpr {{ agent.getProp('mode').value != 'user'}} [[
    exprPush {{ 'Bee ' + (agent.getProp('beeID').value) }}
    featPropPop Bee.Graphing.text
  ]]

# PROGRAM UPDATE 

  onEvent Tick [[
      // if this is AI and set to start, start moving
      ifExpr {{ agent.getProp('mode').value == 'start' }} [[  
       
        prop Bee.mode setTo 'scouting'
        // This was the old pre-conversion call?
        //featCall Bee.Movement setMovementType 'edgeToEdge' 5 0 180
        featCall Bee.Movement setRandomDirection
        exprPush {{ Bee.getProp('beeSpeed').value }}
        featPropPop Bee.Movement.distance
        featProp Bee.Movement.bounceAngle setTo 180
        featProp Bee.Movement.movementType setTo 'edgeToEdge'
      ]]
    ]]

  // see if the bee is looking for a flower that doesn't exist 

  every 1 runAtStart [[
      // if we are searching for a flower and it is gone, start scouting instead so we aren't stuck
      // TODO - not yet working, as the issue is that it is not quite the exact spot, just really close 
      // not sure the best way to test this 
      ifExpr {{ Bee.getProp('mode').value == 'foraging' }} [[
        //ifExpr {{ Bee.getProp('visitedX').value == Bee.getProp('x').value && Bee.getProp('visitedY').value == Bee.getProp('y').value}} [[
        // if we stopped moving ...
        ifExpr {{Bee.getFeatProp('Movement', 'isMoving').value == false}} [[
          
          // go back to the hive to re-set the key variables and the search etc.
          prop Bee.mode setTo 'returning'

          // also clear out our memory since nothing to see here
          prop Bee.visitedX setTo 0
          prop Bee.visitedY setTo 0
          prop Bee.visitedAmount setTo 0
          prop Bee.visitedQuality setTo 0

          // set the x and y of the hive, then go there
          exprPush {{Bee.getProp('hiveX').value}}
          featPropPop Bee.Movement targetX

          exprPush {{Bee.getProp('hiveY').value}}
          featPropPop Bee.Movement targetY
        
          // TODO: CONVERT ... go to 5 
          featProp Bee.Movement.movementType setTo 'goLocation' 
          exprPush {{ Bee.getProp('beeSpeed').value }}
          featPropPop Bee.Movement distance

        ]]
      ]]
  ]]

//HIVE INTERACTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

when Bee centerFirstTouches Hive [[
  // TODO: we could have some code to ignore the hive if it is the wrong hive, but that might get complicaated
  // it's likely enough that the won't direct their and stay?

  ifExpr {{ Bee.getProp('mode').value == 'scouting' }} [[ 
    // if we found our way back here and haven't found anyhting yet, try watching first, but shorter than usual
    prop Bee.mode setTo 'watching'
    prop Bee.watchingCounter setTo 2
    
    featProp Bee.Movement.movementType setTo 'static'
  ]]

  ifExpr {{ Bee.getProp('mode').value != 'user' }} [[
    prop Bee.visible setTo false
  ]]

]]

when Bee centerLastTouches Hive [[
  prop Bee.visible setTo true

  // clear out any visited flower memory unless we are foraging in which case, that's our target
  ifExpr {{Bee.getProp('mode').value != 'foraging'}} [[
    prop Bee.visitedX setTo 0
    prop Bee.visitedY setTo 0
    prop Bee.visitedAmount setTo 0
    prop Bee.visitedQuality setTo 0
  ]]


  // if the user was also dancing, have them stop when they leave
  ifExpr {{Bee.getProp('mode').value == 'user-dancing'}} [[
      prop Bee.mode setTo 'user'
    ]]
]]

when Bee centerTouches Hive [[
  every 1 runAtStart [[
    // only drop off if you have some and it is your hive 
    ifExpr {{ Bee.getProp('nectarAmount').value > 0 && Bee.getProp('hiveID').value == Hive.getProp('hiveID').value }} [[
      featProp Bee.Costume.glow setTo 2
      prop Bee.nectarAmount sub 5
      prop Hive.nectarAmount add 5 
    ]] 
      
    // if it's the user, and they have decent nectar, have them dance too (note that user bees belong to all hives - handle where they can go socially for now)
    ifExpr {{Bee.getProp('mode').value == 'user'}} [[
      ifExpr {{ Bee.getProp('visitedAmount').value >= 40 && Bee.getProp('visitedQuality').value >= 3}} [[
        prop Bee.mode setTo 'user-dancing'
      ]]
    ]]

    // if you re returning and this is your hive ... 
    ifExpr {{ Bee.getProp('mode').value == 'returning' && Bee.getProp('hiveID').value == Hive.getProp('hiveID').value }} [[ 

      featProp Bee.Movement.movementType setTo 'static'

        // if we are done depositing nectar figure out what's next
        ifExpr {{ Bee.getProp('nectarAmount').value == 0 }} [[

          // if it was a good flower with decent nectar that we visited
          ifExpr {{ Bee.getProp('visitedQuality').value >= 3}} [[
           
            // if it was enough nectar for others, dance 
            ifExpr {{ Bee.getProp('visitedAmount').value >= 40 }} [[
              prop Bee.mode setTo 'dancing'

              // start the dancingCounter 
              prop Bee.dancingCounter setTo 5
              
            ]]
            // if it was just enough for me
             ifExpr {{ Bee.getProp('visitedAmount').value <= 40 }} [[
               prop Bee.mode setTo 'foraging'
               // note, handle foraging below to avoid redundancy

            ]]

            // there wasn't much nectar left, so desspite it being decent quality, let's watch 
            ifExpr {{ Bee.getProp('visitedAmount').value < 20  }} [[
              prop Bee.mode setTo 'watching'
              prop Bee.watchingCounter setTo 5

          ]]
          // not worth dancing, so watch
        ]]
          // end, it was decent quality nectar
          // if it was NOT decent quality nectar, also start the qatching
         ifExpr {{ Bee.getProp('visitedQuality').value < 3 && Bee.getProp('mode') != 'watching'}} [[
              prop Bee.mode setTo 'watching'
              prop Bee.watchingCounter setTo 5
         ]]
      ]]
      // bee out of nectar
    ]]
    // --- returning

    ifExpr {{ Bee.getProp('mode').value == 'dancing' }} [[

        prop Bee.dancingCounter sub 1
        
        ifExpr {{ Bee.getProp('dancingCounter').value == 0 }} [[

          prop Bee.mode setTo 'foraging'
          // note, handle foraging below to avoid redundancy
        ]]
    ]] 
    // --- dancing

    ifExpr {{ Bee.getProp('mode').value == 'watching' }} [[ 
        
        // set to 0 so we can check if they got changed 
        prop global.flowerXPassing setTo 0
        prop global.flowerYPassing setTo 0

        featCall Population charactersForEach Bee [[
          
          ifExpr {{ agent.getProp('mode').value == 'dancing' || agent.getProp('mode').value == 'user-dancing' }} [[ 
              
              exprPush {{ agent.getProp('visitedX').value }}
              propPop global.flowerXPassing

              exprPush {{ agent.getProp('visitedY').value }}
              propPop global.flowerYPassing
          ]]
        ]]

        // if someone was dancing, have our watcher go there, if not keep watching in case someone appears
        ifExpr {{ global.getProp('flowerXPassing').value != 0 }} [[
          exprPush {{ global.getProp('flowerXPassing').value }}
          propPop Bee.visitedX
          exprPush {{ global.getProp('flowerYPassing').value }}
          propPop Bee.visitedY
          prop Bee.mode setTo 'foraging'
        ]]

        // watchingCounter if we are still watching and hit 0 on the counter  
        ifExpr {{ Bee.getProp('mode').value == 'watching' && Bee.getProp('watchingCounter').value == 0 }} [[
          // use start because it will switch to scout on the tick and keep that code all in one spot
          prop Bee.mode setTo 'start'
        ]]

        prop watchingCounter sub 1
    ]] 
    // --- watching

    // do this last so we can set it above and then handle it here 
    ifExpr {{ Bee.getProp('mode').value == 'foraging' }} [[

      // setTarget and head to it              
      // set the x and y of the hive, then go there
      exprPush {{Bee.getProp('visitedX').value}}
      featPropPop Movement targetX

      exprPush {{Bee.getProp('visitedY').value}}
      featPropPop Movement targetY
    
      featProp Bee.Movement.movementType setTo 'goLocation' 5
      exprPush {{ Bee.getProp('beeSpeed').value }}
      featPropPop Bee.Movement.distance
    ]]

  ]]
  // every 1
]]

// FLOWER INTERACTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//nectar exchange
when Bee centerTouches Flower [[
  every 1 runAtStart [[

   // ------------------------------------------------------------------------
   // AI or NOT AI, if you are not full and there is some food left, take some 
   ifExpr {{ Bee.getProp('nectarAmount').value < 20 }} [[
      ifExpr {{ Flower.getProp('nectarAmount').value >= 5 }} [[ 
        featProp Bee.Costume.glow setTo 2
        prop Bee.nectarAmount add 5
        prop Flower.nectarAmount sub 5
        ]]
        // >5 nectar
      ]]
      // ifExpr {{ Bee.getProp('nectarAmount').value < 20 }}

    // ------------------------------------------------------------------------
    // if you ARE AI (not user controlled)
    ifExpr {{ Bee.getProp('mode').value == 'collecting' }} [[ 
      // maxed out, switch to returning
      ifExpr {{ Bee.getProp('nectarAmount').value == 20 }} [[
        prop Bee.mode setTo 'returning'
      ]]

      // if the flower is running low, and you are middle / high, returning
      ifExpr {{ Flower.getProp('nectarAmount').value <= 5 && Bee.getProp('nectarAmount').value > 10 }} [[
        prop Bee.mode setTo 'returning'
      ]]

      // if the flowe is running low and you are low, switch to scouting
       ifExpr {{ Flower.getProp('nectarAmount').value <= 5 && Bee.getProp('nectarAmount').value <= 10 }} [[
        prop Bee.mode setTo 'returning'
      ]]

    ]]
    // if 'collecting'

    // do returning separately so that we fall through and only need to write that code once 
    ifExpr {{ Bee.getProp('mode').value == 'returning' }} [[
        // set the x and y of the hive, then go there
        exprPush {{Bee.getProp('hiveX').value}}
        featPropPop Bee.Movement targetX

        exprPush {{Bee.getProp('hiveY').value}}
        featPropPop Bee.Movement targetY
       
        // TODO: CONVERTY
        // featCall Bee.Movement.movementType setTo 'goLocation' 5
        exprPush {{ Bee.getProp('beeSpeed').value }}
        featPropPop Bee.Movement distance
    ]]
  ]]
]]

//setting pollination-related properties for next Flower
when Bee centerLastTouches Flower [[
  featProp Bee.Costume.glow setTo 0
  
  ifExpr {{ Flower.getProp('baseType').value == 'blue'}} [[
    prop Bee.pollinateBlue setTo true
  ]]
  ifExpr {{ Flower.getProp('baseType').value == 'red'}} [[
    prop Bee.pollinateRed setTo true
  ]]
  ifExpr {{ Flower.getProp('baseType').value == 'yellow'}} [[
  prop Bee.pollinateYellow setTo true
  ]]
  ifExpr {{ Flower.getProp('baseType').value == 'squash'}} [[
  prop Bee.pollinateSquash setTo true
  ]]
  ifExpr {{ Flower.getProp('baseType').value == 'pumpkin'}} [[
  prop Bee.pollinatePumpkin setTo true
  ]]
  ifExpr {{ Flower.getProp('baseType').value == 'watermelon'}} [[
    prop Bee.pollinateWaterMelon  setTo true

  ]]



  // always set this ... that way you can always pollinate a different flower from this one and have to keep moving
  // for now, only if it is generation 1 so that we don't see baby flowers triggering new generations
  ifExpr {{ Flower.getProp('generation').value == 1 }} [[
        
    ifExpr {{ Flower.getProp('baseType').value == 'blue'}} [[
        exprPush {{ Flower.getProp('flowerID').value }}
        propPop Bee.blueID
    ]]
    ifExpr {{ Flower.getProp('baseType').value == 'red'}} [[
        exprPush {{ Flower.getProp('flowerID').value }}
        propPop Bee.redID
    ]]
    ifExpr {{ Flower.getProp('baseType').value == 'yellow'}} [[
        exprPush {{ Flower.getProp('flowerID').value }}
        propPop Bee.yellowID
    ]]
    ifExpr {{ Flower.getProp('baseType').value == 'squash'}} [[
        exprPush {{ Flower.getProp('flowerID').value }}
        propPop Bee.squashID
    ]]
    ifExpr {{ Flower.getProp('baseType').value == 'pumpkin'}} [[
        exprPush {{ Flower.getProp('flowerID').value }}
        propPop Bee.pumpkinID
    ]]
    ifExpr {{ Flower.getProp('baseType').value == 'watermelon'}} [[
        exprPush {{ Flower.getProp('flowerID').value }}
        propPop Bee.watermelonID
    ]]
  ]]

  // if rehide is set, and this is the last visitor, hide it
  prop Flower.currentVisitorCount sub 1
  ifExpr {{Flower.getProp('currentVisitorCount').value == 0 && Flower.getProp('rehideAfterVisit').value == true}} [[
    prop Flower.visible setTo false
  ]]

  // if the bee is still collecting, switch to returning and it'll re-orient in the hive 
  ifExpr {{ Bee.getProp('mode').value == 'collecting'}} [[
    prop Bee.mode setTo 'returning'
    
    exprPush {{Bee.getProp('hiveX').value}}
    featPropPop Bee.Movement targetX

    exprPush {{Bee.getProp('hiveY').value}}
    featPropPop Bee.Movement targetY
    
    // TODO: CONVERTY go to 5
    featProp Movement setMovementType 'goLocation'
    exprPush {{ Bee.getProp('beeSpeed').value }}
    featPropPop Bee.Movement distance 
  ]]

]]

when Bee centerFirstTouches Flower [[
//TODO: add a queueTarget call and hop over to the middle of the flower?

// if we were forgaging, we xan now forget the flower location since we are here, and then update
// based on the visit
 ifExpr {{Bee.getProp('mode').value == 'foraging'}} [[
    prop Bee.visitedX setTo 0
    prop Bee.visitedY setTo 0
    prop Bee.visitedAmount setTo 0
    prop Bee.visitedQuality setTo 0
  ]]

  // track how many bees are at the flower so that we can re-hide (if that is set) upon leaving
  prop Flower.currentVisitorCount add 1
  prop Flower.visible setTo true

  // TODO: add the hearts to the name now that we know what the quality might be
  ifExpr{{ Flower.getProp('nectarQuality').value == 1}} [[
    exprPush {{ Flower.getProp('nameBase').value + ' ' + '❤️' }}
    featPropPop  Flower.Graphing text
  ]]
  ifExpr{{ Flower.getProp('nectarQuality').value == 2}} [[
    exprPush {{ Flower.getProp('nameBase').value + ' ' + '❤️❤️' }}
    featPropPop  Flower.Graphing text
  ]]
  ifExpr{{ Flower.getProp('nectarQuality').value == 3}} [[
    exprPush {{ Flower.getProp('nameBase').value + ' ' + '❤️❤️❤️' }}
    featPropPop  Flower.Graphing text
  ]]


    // if you are AI, found a flower, so pause to get the nectar if it has quality  of medium or higher (3-5)
    ifExpr {{ Bee.getProp('mode').value == 'scouting' || Bee.getProp('mode').value == 'foraging' ||  Bee.getProp('mode').value == 'user' }} [[ 
      ifExpr {{ Flower.getProp('nectarQuality').value >= 2}} [[

        // we are using user above for the values below, so this makes sure we only change non-user bees' mode
        ifExpr {{ Bee.getProp('mode').value != 'user'}} [[
          featProp Bee.Movement.movementType setTo 'static'
          prop Bee.mode setTo 'collecting'
        ]]
        
        // remember this location and other info so we can dance and / or come back later 
        // we only remember the last one, but assume we wouldn't move on if we didn't need it
        exprPush {{ Flower.getProp('x').value }}
        propPop Bee.visitedX 
        exprPush {{ Flower.getProp('y').value }}
        propPop Bee.visitedY
        exprPush {{Flower.getProp('nectarQuality').value }}
        propPop Bee.visitedQuality
        exprPush {{Flower.getProp('nectarAmount').value }}
        propPop Bee.visitedAmount
      ]]
    ]]


    // setup the type of flower before we create new ones due to pollination

    ifExpr {{ Flower.getProp('baseType').value == 'blue'}} [[
      exprPush {{ Bee.getProp('pollinateBlue').value }}
      propPop Bee.pollinatedColor
      exprPush {{ Bee.getProp('blueID').value }}
      propPop Bee.pollinatedID
    ]]
    ifExpr {{ Flower.getProp('baseType').value == 'red'}} [[
      exprPush {{ Bee.getProp('pollinateRed').value }}
      propPop Bee.pollinatedColor
      exprPush {{ Bee.getProp('redID').value }}
      propPop Bee.pollinatedID
    ]]
    ifExpr {{ Flower.getProp('baseType').value == 'yellow'}} [[
      exprPush {{ Bee.getProp('pollinateYellow').value }}
      propPop Bee.pollinatedColor
      exprPush {{ Bee.getProp('yellowID').value }}
      propPop Bee.pollinatedID
    ]]
    ifExpr {{ Flower.getProp('baseType').value == 'squash'}} [[
      exprPush {{ Bee.getProp('pollinateSquash').value }}
      propPop Bee.pollinatedColor
      exprPush {{ Bee.getProp('squashID').value }}
      propPop Bee.pollinatedID
    ]]
    ifExpr {{ Flower.getProp('baseType').value == 'pumpkin'}} [[
      exprPush {{ Bee.getProp('pollinatePumpkin').value }}
      propPop Bee.pollinatedColor
      exprPush {{ Bee.getProp('pumpkinID').value }}
      propPop Bee.pollinatedID
    ]]
    ifExpr {{ Flower.getProp('baseType').value == 'watermelon'}} [[
      exprPush {{ Bee.getProp('pollinateWaterMelon').value }}
      propPop Bee.pollinatedColor
      exprPush {{ Bee.getProp('watermelonID').value }}
      propPop Bee.pollinatedID
    ]]

    // grab some pollen whether you stop or not, since you checked it out ... 
    ifExpr {{ Flower.getProp('spawnNewFlowers').value == true && Bee.getProp('pollinatedColor').value == true }} [[ 

      exprPush {{ Flower.getProp('baseType').value }}
      propPop global.baseTypePassing

      ifExpr {{ Flower.getProp('generation').value == 1 &&  Bee.getProp('pollinatedID').value != Flower.getProp('flowerID').value }} [[ 
      
      //POLLINATION IS HAPPENING HERE (for growth/costume logic)
      prop Flower.pollenAmount add 1
      
        featCall Population createCharacter Flower [[
        prop x addRndInt -50 50
        prop y addRndInt -50 50
        prop nectarAmount setTo 50
        featProp Flower.Costume.scale setTo 0.25
        prop generation setTo 2 
        exprPush {{global.getProp('baseTypePassing').value}} 
        propPop baseType
      ]] 
    ]] 
  ]]
]]

`
    },
    {
      "name": "Hive",
      "scriptText": `# BLUEPRINT Hive
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
useFeature Costume
useFeature Physics


featProp Hive.Costume.costumeName setTo 'HB_hiveNatural.png'

featCall Physics init

addProp hiveType string 'natural'
ifExpr {{ agent.getProp('hiveType').value == 'commercial'}} [[
  featProp Hive.Costume.costumeName setTo  'HB_hiveCommercial.png' 
]]
ifExpr {{ agent.getProp('hiveType').value == 'natural'}} [[
  featProp Hive.Costume.costumeName setTo  'HB_hiveNatural.png' 
]]

featProp Hive.Costume.scale setTo 0.5


useFeature Touches
featCall Touches monitor Bee c2b

// track hiveID in case we have more than one
addProp hiveID number 0

// number of AI bees to generate on runAtStart
addProp aiBeeCount number 8
// set it separately so it'll appear in map editor - remove if that feature is fixed
prop aiBeeCount setTo 8

// temp variable for use in creating AI bees
addProp aiBeeCountTemp number 0

useFeature Population

featCall Hive.Population getActiveCharactersCount 'Hive'
featPropPush Hive.Population.count
propPop Hive.hiveID
prop Hive.hiveID add 1

// TODO: we can switch this to a population calculation to make this cleaner if we need
// keep track of how many bees are dancing and watching
addProp dancingBeesCounter number 0
addProp watchingBeesCounter number 0

addProp nectarAmount number 0
prop nectarAmount setMax 10000
prop nectarAmount setMin 0

addProp nectarQuality number 2
prop nectarQuality setMax 3
prop nectarQuality setMin 1

useFeature Graphing
exprPush {{'Nectar: 0'}}
featPropPop Graphing text
featProp Hive.Graphing.meterProp setTo 'nectarAmount'


addProp doOnce boolean true

addProp tempNectarDisplay number 0
prop tempNectarDisplay setTo 0

# PROGRAM UPDATE

every 0.1 [[
  
  exprPush {{agent.getProp('nectarAmount').value / 5}} 
  propPop agent.tempNectarDisplay
  
  exprPush {{'Nectar: ' + agent.getProp('tempNectarDisplay').value}}
  featPropPop Graphing text 
  
  // update our name to reflect the number of dancing and watching bees
  // first we need to calculate them, though
  
ifExpr {{ agent.getProp('doOnce').value == true }} [[
    ifExpr {{ agent.getProp('hiveType').value == 'commercial'}} [[
    featProp Hive.Costume.costumeName setTo 'HB_hiveCommercial.png' 

]]
ifExpr {{ agent.getProp('hiveType').value == 'natural'}} [[
  featProp Hive.Costume.costumeName setTo 'HB_hiveNatural.png' 

]]
prop doOnce setTo false
  ]]
   
\t prop global.dancingBeesCounter setTo 0
 \t prop global.watchingBeesCounter setTo 0

  exprPush {{agent.getProp('hiveID').value}}
  propPop global.hiveIDPassing

  featCall Population charactersForEach Bee [[

    // TODO: setup the user hive to change to whatever the current hive is when you visit it or else this number will be off      

    // if the bee is either a user bee or from this hive
    ifExpr {{ agent.getProp('hiveID').value == global.getProp('hiveIDPassing').value }} [[
     
      // increment if we found a dancing bee
      ifExpr {{ agent.getProp('mode').value == 'dancing' || agent.getProp('mode').value == 'user-dancing' }} [[ 
        prop global.dancingBeesCounter add 1
      ]]

      // increment if we found a watching bee
      ifExpr {{ agent.getProp('mode').value == 'watching' }} [[
        prop global.watchingBeesCounter add 1
      ]]
    ]]
  ]]

 // exprPush {{'Hive [D:' + global.getProp('dancingBeesCounter').value + '; W:' + global.getProp('watchingBeesCounter').value +']'}}
 // featPropPop Graphing text 
]]

every 0.5 runAtStart [[

  // Create ai bees if the count is > 0, and set the number to existing bees + however many this hive should get otherwise other bees already 
  // in the system will much with the count
 
 ifExpr {{ agent.getProp('aiBeeCountTemp').value == 0}} [[
    exprPush{{ agent.callFeatMethod('Population', 'getActiveCharactersCount', 'Bee') + agent.getProp('aiBeeCount').value }}
    propPop aiBeeCountTemp
  ]]

  ifExpr {{ agent.getProp('aiBeeCountTemp').value >  agent.callFeatMethod('Population', 'getActiveCharactersCount', 'Bee') }} [[ 

  // send this hiveID to the global variable so we can grab it inside of createCharacter  
  exprPush {{ agent.getProp('hiveID').value }}
  propPop global.hiveIDPassing

  featCall Population createCharacter Bee [[
        
      // grab the hiveID we passed in, and set it to this bee's hiveID so we can check stuff later
      exprPush {{global.getProp('hiveIDPassing').value}}
      propPop hiveID  

      // set the hiveX and hiveY so we can go back to it later
      // though we may need to update it in case the hive is move
      exprPush {{ agent.x }}
      propPop hiveX
      exprPush {{ agent.y }}
      propPop hiveY

      // set to start mode so it'll switch to scouting (this is because a start event isn't called)
      prop mode setTo 'start'
    ]]
  ]]
]]

`
    },
    {
      "name": "Flower",
      "scriptText": `# BLUEPRINT Flower
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
useFeature Costume
// TODO: change the costume feature to do this via a property

// setup a short name so that we can use to set all the other things
// options are blue, red, yellow, squash, pumpkin, and watermelon
addProp baseType string 'blue'
prop baseType setTo 'blue'

// setup the name and image info
addProp nameBase string 'Plant'
prop nameBase setTo 'Blue Flower'

addProp costumeName string 'blue'
prop costumeName setTo ''

// spawnNewFlowers
// this determines whether new flowers get made
addProp spawnNewFlowers boolean true
prop spawnNewFlowers setTo true

// set all the defaults for name, etc.
ifExpr {{ agent.getProp('baseType').value == 'blue' }} [[
  featProp Flower.Costume.costumeName setTo 'HB_blueFlower.png'
  prop costumeName setTo 'blue'

]]
ifExpr {{ agent.getProp('baseType').value == 'red' }} [[
  featProp Flower.Costume.costumeName setTo 'HB_redFlower.png'
  prop costumeName setTo 'red'

]]
ifExpr {{ agent.getProp('baseType').value == 'yellow.png' }} [[
  featProp Flower.Costume.costumeName setTo 'HB_yellowFlower.png'
  prop costumeName setTo 'yellow'

]]
ifExpr {{ agent.getProp('baseType').value == 'squash' }} [[
  featProp Flower.Costume.costumeName setTo 'HB_squashSprout.png'
  prop costumeName setTo 'squashSprout'

]]
ifExpr {{ agent.getProp('baseType').value == 'pumpkin' }} [[
  featProp Flower.Costume.costumeName setTo 'HB_pumpkinSprout.png'
  prop costumeName setTo 'pumpkinSprout'

]]
ifExpr {{ agent.getProp('baseType').value == 'watermelon' }} [[
  featProp Flower.Costume.costumeName setTo 'HB_watermelonSprout.png'
  prop costumeName setTo 'watermelonSprout'

]]

// CHANGE THIS TO MAKE INVISIBLE AT START
// start invisible?
prop visible setTo true

// once it has been discovered, should we re-hide a flower once we fly away from it
addProp rehideAfterVisit boolean false
prop rehideAfterVisit setTo false

// to make sure we re-hide only if no one is here anymore
addProp currentVisitorCount number 0

useFeature Physics
featCall Physics init
featProp Flower.Costume.scale setTo 0.5

useFeature Touches
featCall Touches monitor Bee c2b

addProp nectarAmount number 100
prop nectarAmount setMax 100
prop nectarAmount setMin 0

addProp nectarQuality number 0
prop nectarQuality setMax 0
prop nectarQuality setMin 0

addProp pollenAmount number 0
prop pollenAmount setMax 2
prop pollenAmount setMin 0
prop pollenAmount setTo 0

addProp generation number 1

useFeature Population

addProp flowerID number 0

// set the id to the current count of agents so that it keeps incrementing
featCall Flower.Population getActiveCharactersCount 'Flower'
featPropPush Flower.Population.count
propPop Flower.flowerID
prop Flower.flowerID add 1

useFeature Graphing
exprPush {{ agent.getProp('nameBase').value }}
featPropPop Graphing text
featProp Flower.Graphing.meterProp setTo 'nectarAmount'

addProp doOnce boolean true

# PROGRAM UPDATE
every 1 runAtStart [[

  // START OF DOONCE
  ifExpr {{ Flower.getProp('doOnce').value == true }} [[
    prop doOnce setTo false
    // TODO is there a better way to do this timing-wise?
    // use placeholder art?  Or if they are invisible to start it doesn't really matter ...

    // change the costume
    // for now, set names, etc., to match
    // long-term, do we want that here or in the stage setup?
    ifExpr {{ agent.getProp('baseType').value == 'blue' }} [[
      featProp Flower.Costume.costumeName setTo 'HB_blueFlower.png'
      prop nameBase setTo 'Blue Flower'
      prop costumeName setTo 'blue'

    ]]
    ifExpr {{ agent.getProp('baseType').value == 'red' }} [[
      featProp Flower.Costume.costumeName setTo 'HB_redFlower.png'
      prop nameBase setTo 'Red Flower'
      prop costumeName setTo 'red'

    ]]
    ifExpr {{ agent.getProp('baseType').value == 'yellow' }} [[
      featProp Flower.Costume.costumeName setTo 'HB_yellowFlower.png'
      prop nameBase setTo 'Yellow Flower'
      prop costumeName setTo 'yellow'

    ]]
    ifExpr {{ agent.getProp('baseType').value == 'squash' }} [[
      featProp Flower.Costume.costumeName setTo 'HB_squashSprout.png'
      prop nameBase setTo 'Squash'
      prop costumeName setTo 'squashSprout'
    ]]
    ifExpr {{ agent.getProp('baseType').value == 'pumpkin' }} [[
      featProp Flower.Costume.costumeName setTo 'HB_pumpkinSprout.png'
      prop nameBase setTo 'Pumpkin'
      prop costumeName setTo 'pumpkinSprout'

    ]]
    ifExpr {{ agent.getProp('baseType').value == 'watermelon' }} [[
      featProp Flower.Costume.costumeName setTo 'HB_watermelonSprout.png'
      prop nameBase setTo 'Watermelon'
      prop costumeName setTo 'watermelonSprout'
    ]]

    // make the name match
    exprPush {{ agent.getProp('nameBase').value }}
    featPropPop Graphing text
  ]]
  // END OF DOONCE

  // START OF POLLEN COSTUMES
  ifExpr {{ agent.getProp('baseType').value == 'red' && agent.getProp('pollenAmount').value > 0 }} [[
    featProp Flower.Costume.costumeName setTo 'HB_redPollen.png'
  ]]
  ifExpr {{ agent.getProp('baseType').value == 'blue' && agent.getProp('pollenAmount').value > 0 }} [[
    featProp Flower.Costume.costumeName setTo 'HB_bluePollen.png'
  ]]
  ifExpr {{ agent.getProp('baseType').value == 'yellow' && agent.getProp('pollenAmount').value > 0 }} [[
    featProp Flower.Costume.costumeName setTo 'HB_yellowPollen.png'
  ]]
  ifExpr {{ agent.getProp('baseType').value == 'watermelon' && agent.getProp('pollenAmount').value == 1 }} [[
    featProp Flower.Costume.costumeName setTo 'HB_watermelonSproutPollen.png'
  ]]
  ifExpr {{ agent.getProp('baseType').value == 'squash' && agent.getProp('pollenAmount').value == 1 }} [[
    featProp Flower.Costume.costumeName setTo 'HB_squashSproutPollen.png'
  ]]
  ifExpr {{ agent.getProp('baseType').value == 'pumpkin' && agent.getProp('pollenAmount').value == 1 }} [[
    featProp Flower.Costume.costumeName setTo 'HB_pumpkinSproutPollen.png'
  ]]
  // END OF POLLEN COSTUMES
  // START OF VEGGIE GROWTH COSTUMES
  ifExpr {{ agent.getProp('baseType').value == 'watermelon' && agent.getProp('pollenAmount').value > 1 }} [[
    featProp Flower.Costume.costumeName setTo 'HB_watermelonVeggie.png'
  ]]
  ifExpr {{ agent.getProp('baseType').value == 'squash' && agent.getProp('pollenAmount').value > 1 }} [[
    featProp Flower.Costume.costumeName setTo 'HB_squashVeggie.png'
  ]]
  ifExpr {{ agent.getProp('baseType').value == 'pumpkin' && agent.getProp('pollenAmount').value > 1 }} [[
    featProp Flower.Costume.costumeName setTo 'HB_pumpkinVeggie.png'
  ]]
  // END OF VEGGIE GROWTH COSTUMES
]]`
    },
    {
      "name": "Timer",
      "scriptText": `# BLUEPRINT Timer
# PROGRAM INIT
useFeature Graphing
useFeature Costume
featProp Timer.Costume.costumeName setTo 'GEN_onexone.json' 0
addProp time number 0

featProp Graphing text setTo 'Time: 0'

prop x setTo 445
prop y setTo -256

      # PROGRAM UPDATE
  every 1 runAtStart [[
  prop time add 1
  exprPush {{ 'Time: ' + agent.getProp('time').value }}
  featPropPop Graphing text
]]`
    },
    {
      "name": "Background",
      "scriptText": `# BLUEPRINT Background
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM INIT
useFeature Costume
featProp Background.Costume.costumeName setTo 'HB_background (filter).png' 0
// TODO: CONVERT
featProp Background.Costume.scale setTo 0.8

# PROGRAM UPDATE`
    }
  ],
  "instances": [
    {
      "id": "0",
      "label": "Background",
      "bpid": "Background",
      "initScript": `prop x setTo 3.3
prop y setTo 0.12`
    },
    {
      "id": "2",
      "label": "Timer",
      "bpid": "Timer",
      "initScript": `prop x setTo 356.96
prop y setTo -396.19`
    },
    {
      "id": "8",
      "label": "Hive",
      "bpid": "Hive",
      "initScript": `prop hiveType setTo 'natural'
prop x setTo -135.39
prop y setTo 272.46
prop scale setTo 2
prop hiveID setTo 0
// set the below to a number to
// create AI Bees
prop aiBeeCount setTo 0
`
    },
    {
      "id": "9",
      "label": "squash2",
      "bpid": "Flower",
      "initScript": `prop baseType setTo 'squash'
      featProp Graphing text setTo 'Squash'
      featProp Flower.Costume.costumeName setTo 'HB_squashSprout.png'
prop x setTo -539.35
prop y setTo -61.33`
    },
    {
      "id": "10",
      "label": "watermelon1",
      "bpid": "Flower",
      "initScript": `prop baseType setTo 'watermelon'
      featProp Graphing text setTo 'Watermelon'
      featProp Flower.Costume.costumeName setTo 'HB_watermelonSprout.png'
prop x setTo -543.31
prop y setTo 262.13`
    },
    {
      "id": "11",
      "label": "squash1",
      "bpid": "Flower",
      "initScript": `prop baseType setTo 'squash'
      featProp Graphing text setTo 'Squash'
      featProp Flower.Costume.costumeName setTo 'HB_squashSprout.png'
prop x setTo -539.67
prop y setTo -60.84`
    },
    {
      "id": "12",
      "label": "pumpkin2",
      "bpid": "Flower",
      "initScript": `prop baseType setTo 'pumpkin'
      featProp Graphing text setTo 'Pumpkin'
      featProp Flower.Costume.costumeName setTo 'HB_pumpkinSprout.png'
prop x setTo 311.2
prop y setTo 290.55`
    },
    {
      "id": "13",
      "label": "pumpkin1",
      "bpid": "Flower",
      "initScript": `prop baseType setTo 'pumpkin'
      featProp Graphing text setTo 'Pumpkin'
      featProp Flower.Costume.costumeName setTo 'HB_pumpkinSprout.png'
prop x setTo -537.88
prop y setTo -231.72`
    },
    {
      "id": "14",
      "label": "watermelon2",
      "bpid": "Flower",
      "initScript": `prop baseType setTo 'watermelon'
      featProp Graphing text setTo 'Watermelon'
      featProp Flower.Costume.costumeName setTo 'HB_watermelonSprout.png'
prop x setTo -274.94
prop y setTo 153.57`
    },
    {
      "id": "15",
      "label": "squash4",
      "bpid": "Flower",
      "initScript": `prop baseType setTo 'squash'
      featProp Graphing text setTo 'Squash'
      featProp Flower.Costume.costumeName setTo 'HB_squashSprout.png'
prop x setTo -537.93
prop y setTo -60.20`
    },
    {
      "id": "16",
      "label": "watermelon4",
      "bpid": "Flower",
      "initScript": `prop baseType setTo 'watermelon'
      featProp Graphing text setTo 'Watermelon'
      featProp Flower.Costume.costumeName setTo 'HB_watermelonSprout.png'
prop x setTo -544.29
prop y setTo 262.17`
    },
    {
      "id": "18",
      "label": "squash3",
      "bpid": "Flower",
      "initScript": `prop baseType setTo 'squash'
featProp Graphing text setTo 'Squash'
featProp Flower.Costume.costumeName setTo 'HB_squashSprout.png'
prop x setTo -64.4
prop y setTo -59.42`
    },
    {
      "id": "17",
      "label": "pumpkin4",
      "bpid": "Flower",
      "initScript": `prop baseType setTo 'pumpkin'
      featProp Graphing text setTo 'Pumpkin'
      featProp Flower.Costume.costumeName setTo 'HB_pumpkinSprout.png'
prop x setTo 308.05
prop y setTo 69.56`
    },
    {
      "id": "19",
      "label": "pumpkin3",
      "bpid": "Flower",
      "initScript": `prop baseType setTo 'pumpkin'
      featProp Graphing text setTo 'Pumpkin'
      featProp Flower.Costume.costumeName setTo 'HB_pumpkinSprout.png'
prop x setTo 113.9
prop y setTo -36.17`
    },
    {
      "id": "20",
      "label": "watermelon3",
      "bpid": "Flower",
      "initScript": `prop baseType setTo 'watermelon'
      featProp Graphing text setTo 'Watermelon'
      featProp Flower.Costume.costumeName setTo 'HB_watermelonSprout.png'
prop x setTo -282.5
prop y setTo 41.34`
    },
    {
      "id": "21",
      "label": "blue1",
      "bpid": "Flower",
      "initScript": `prop baseType setTo blue
      featProp Graphing text setTo 'Blue Flower'
prop x setTo -539.99
prop y setTo 107.34`
    },
    {
      "id": "22",
      "label": "red1",
      "bpid": "Flower",
      "initScript": `prop x setTo 106.62
prop y setTo 143.83
prop baseType setTo 'red'
featProp Flower.Costume.costumeName setTo 'HB_redFlower.png'
featProp Graphing text setTo 'Red Flower'

`
    },
    {
      "id": "23",
      "label": "blue2",
      "bpid": "Flower",
      "initScript": `prop baseType setTo blue
      featProp Graphing text setTo 'Blue Flower'
prop x setTo -535.70
prop y setTo 105.90`
    },
    {
      "id": "24",
      "label": "Flower24",
      "bpid": "Flower",
      "initScript": `prop x setTo 318.38
prop y setTo -153.5
prop baseType setTo blue
featProp Graphing text setTo 'Blue Flower'`
    },
    {
      "id": "25",
      "label": "Flower25",
      "bpid": "Flower",
      "initScript": `prop x setTo -538.08
prop y setTo 107.10
prop baseType setTo blue
featProp Graphing text setTo 'Blue Flower'`
    },
    {
      "id": "26",
      "label": "Flower26",
      "bpid": "Flower",
      "initScript": `prop x setTo -287.97
prop y setTo -128.16
prop baseType setTo 'yellow'
featProp Graphing text setTo 'Yellow Flower'
featProp Flower.Costume.costumeName setTo 'HB_yellowFlower.png'

`
    },
    {
      "id": "27",
      "label": "Flower27",
      "bpid": "Flower",
      "initScript": `prop x setTo 83.66
prop y setTo -161.79
prop baseType setTo blue
featProp Graphing text setTo 'Blue Flower'`
    }
  ]
}