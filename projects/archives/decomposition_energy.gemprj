{
  "id": "decomposition_energy",
  "label": "Decomposition Energy",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": "0x00bfff",
    "roundsCanLoop": true
  },
  "rounds": [],
  "blueprints": [
    {
      "id": "Sun",
      "label": "Sun",
      "scriptText": `# BLUEPRINT Sun
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'circle.json' 0
featCall Costume setColorize 255 215 0
prop zIndex setTo 0

useFeature Physics
featProp Physics scale setTo 0.6

// types to use for energy transfer: source, producer, consumer, decomposer, waste, soil (we might add more later or improve the last few labels)
addProp eType String 'source'

useFeature Global

  ifExpr{{ agent.callFeatMethod('Global', 'getGlobalProp', 'energyReleasedAsHeat') == undefined }} [[
      featCall Global addGlobalProp energyReleasedAsHeat Number 0
  ]]

`
    },
    {
      "id": "Bunny",
      "label": "Bunny",
      "scriptText": `# BLUEPRINT Bunny
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'bunnies.json' 1
featProp Costume flipX setTo true


useFeature Physics
featProp Physics scale setTo 0.2

// types to use for energy transfer: source, producer, consumer (we might add more later)
addProp eType String 'consumer'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop energyLevel setMax 100
prop energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Bunny lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
useFeature AgentWidgets
featProp AgentWidgets meterProp setTo energyLevel

featProp AgentWidgets meterColor setTo 65280

# PROGRAM UPDATE
  every 2 runAtStart [[

  // energyLevel goes down every 2 seconds
  exprPush {{ agent.getProp('energyLevel').value - agent.getProp('energyUse').value}}
  propPop agent.energyLevel

  // this code sets the color of the energy bar based on how hungry the Bunny is
  // sated
  ifExpr {{ agent.getProp('energyLevel').value > 50 }} [[
    // featCall Costume setPose 0
    // Green
    featProp AgentWidgets meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ agent.getProp('energyLevel').value < 50 }} [[
    // featCall Costume setPose 1
    // Orange
    featProp AgentWidgets meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ agent.getProp('energyLevel').value < 20 }} [[
    // featCall Costume setPose 1
    // Red
    featProp AgentWidgets meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ agent.getProp('energyLevel').value < 1 }} [[
    // featCall Costume setPose 2
    // featCall Movement setMovementType 'float'
    prop agent.alpha setTo 0.3
    prop agent.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featCall AgentWidgets bindMeterTo energyLevel

]]
`
    },
    {
      "id": "Worm",
      "label": "Worm",
      "scriptText": `# BLUEPRINT Worm
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'worm.json' 1

useFeature Physics
featProp Physics scale setTo 0.2

// types to use for energy transfer: source, producer, consumer, decomposer, waste, soil (we might add more later or improve the last few labels)
addProp eType String 'decomposer'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop energyLevel setMax 100
prop energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Worm lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
useFeature AgentWidgets
featProp AgentWidgets meterProp setTo energyLevel

featProp AgentWidgets meterColor setTo 65280

# PROGRAM UPDATE
  every 2 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ agent.getProp('energyLevel').value - agent.getProp('energyUse').value}}
  propPop agent.energyLevel

  // this code sets the color of the energy bar based on how hungry the Worm  is
  // sated
  ifExpr {{ agent.getProp('energyLevel').value > 50 }} [[
    // featCall Costume setPose 0
    // Green
    featProp AgentWidgets meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ agent.getProp('energyLevel').value < 50 }} [[
    // featCall Costume setPose 1
    // Orange
    featProp AgentWidgets meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ agent.getProp('energyLevel').value < 20 }} [[
    // featCall Costume setPose 1
    // Red
    featProp AgentWidgets meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ agent.getProp('energyLevel').value < 1 }} [[
    // featCall Costume setPose 2
    // featCall Movement setMovementType 'float'
    prop agent.alpha setTo 0.3
    prop agent.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featCall AgentWidgets bindMeterTo energyLevel

]]

`
    },
    {
      "id": "Waste",
      "label": "Waste",
      "scriptText": `# BLUEPRINT Waste
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'organic_matter.json' 0

useFeature Physics
featProp Physics scale setTo 1

// types to use for energy transfer: source, producer, consumer, decomposer, waste, soil (we might add more later or improve the last few labels)
addProp eType String 'waste'

// setup to track nutrients and begin at 1/2 way
addProp matterLevel Number 50
prop matterLevel setMax 100
prop matterLevel setMin 0

// use a widget to depict the current nutrients
useFeature AgentWidgets
featProp AgentWidgets meterProp setTo matterLevel

// set the waste to be purple because it has nutrients, not energy
featProp AgentWidgets meterColor setTo 5783616

`
    },
    {
      "id": "Plant",
      "label": "Plant",
      "scriptText": `# BLUEPRINT Plant
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'plants.json' 0

useFeature Physics

// types to use for energy transfer: source, producer, consumer (we might add more later)
addProp eType String 'producer'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop energyLevel setMax 100
prop energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Plant lose energy faster (or slower)
addProp energyUse Number 1

// setup so that we can tweak the size more dynamically, and plant by plant
addProp minimumScale Number 0

// STUDENTS_MAY_CHANGE - set a different minimum size for the plants  (used to be 0.25)
prop minimumScale setTo 0
prop minimumScale setMax 1.0
prop minimumScale setMin -0.5

addProp nutrients Number 8

// STUDENTS_MAY_CHANGE - sete a different starting eneregy level, max or min?  A higher max will allow a lot more time before the plant looks bad
prop nutrients setTo 8
prop nutrients setMax 10
prop nutrients setMin 0

addProp matter Number 50

// STUDENTS_MAY_CHANGE - sete a different range or starting point of matter
prop matter setTo 50
prop matter setMax 100
prop matter setMin 0

// use a widget to depict the current energy, and color it green (maybe change later)
useFeature AgentWidgets
featProp AgentWidgets meterProp setTo energyLevel
// Green = 0x00FF00
featProp AgentWidgets meterColor setTo 65280
featCall AgentWidgets setMeterPosition 'inside-left'

useFeature Touches

// we need to touch the soil to know the nutrients
featCall Touches monitor Soil b2b

# PROGRAM INIT
  // set size based on matter (assume matter max of 100) and that we waver between 80-100%
  exprPush {{ agent.getProp('minimumScale').value + agent.getProp('matter').value / 100 }}
  featPropPop Physics scale

# PROGRAM UPDATE
 
  when Plant touches Soil [[
    every 1 [[
      ifExpr {{ Soil.getProp('nutrients').value > 0 }} [[
        prop Soil.nutrients sub 1
        prop Plant.nutrients add 1
      ]]
    ]]
  ]]

  every 1 runAtStart [[

    // decrease energy each tick, using the energyUse varable to determine how much
    ifExpr {{ agent.getProp('energyLevel').value > 0 }} [[
    exprPush {{ agent.getProp('energyLevel').value - agent.getProp('energyUse').value}}
    propPop agent.energyLevel
    
    // mirror the energy with the matter since we are running off that (this makes it easier to maybe split eventually)
    exprPush {{ agent.getProp('energyLevel').value}}
    propPop agent.matter

    // re-scale the plant based on the energy level
    exprPush {{ agent.getProp('minimumScale').value + agent.getProp('matter').value / 100 }}
    featPropPop Physics scale

    ]]

    // change how it looks to reflect it's health level (meter below)
    // is it healthy?  Use some nutrients and then set color
    prop nutrients sub 1
    ifExpr {{ agent.getProp('nutrients').value > 6 }} [[
      // healthy
      featCall Costume setCostume 'plants.json' 0
    ]]
    ifExpr {{ agent.getProp('nutrients').value < 6 }} [[
      // ok, but not great
      featCall Costume setCostume 'plants.json' 1
    ]]
    ifExpr {{ agent.getProp('nutrients').value < 2 }} [[
      // not doing well at all, so lets also lose some matter
      featCall Costume setCostume 'plants.json' 2
      prop matter sub 1
    ]]

    // set plant energy meter color
    // doing great
    ifExpr {{ agent.getProp('energyLevel').value > 60 }} [[
      // Green
      featProp AgentWidgets meterColor setTo 65280
    ]]
    // needs some energy
    ifExpr {{ agent.getProp('energyLevel').value < 60 }} [[
      // Orange
      featProp AgentWidgets meterColor setTo 16737792
    ]]
    // in trouble
    ifExpr {{ agent.getProp('energyLevel').value < 30 }} [[
      // Red
      featProp AgentWidgets meterColor setTo 16711680

    ]]
  ]]
`
    },
    {
      "id": "EnergyRepresentation",
      "label": "EnergyRepresentation",
      "scriptText": `# BLUEPRINT EnergyRepresentation
# TAG isCharControllable true
# TAG isPozyxControllable true
# TAG isPTrackControllable false
# PROGRAM DEFINE

useFeature Costume
featCall Costume setCostume 'empty_energy.png' 0

useFeature Physics
featProp Physics scale setTo 0.1


// using this to record energyReleasedAsHeat
useFeature Global


// setup energy properties
addProp energyLevel Number 0
prop energyLevel setMax 100
prop energyLevel setMin 0

// setup energy type so that we know what we can give it to
// start with none
addProp eType String 'none'

useFeature Touches
featCall Touches monitor Sun c2b
featCall Touches monitor Plant c2b
featCall Touches monitor Bunny c2b
featCall Touches monitor Worm c2b
featCall Touches monitor Waste c2b
featCall Touches monitor Soil c2b


# PROGRAM UPDATE
when EnergyRepresentation centerFirstTouches Sun [[

  // when touching, show an annotation about how the sun produces energy
  featCall Costume setCostume 'sun_energy.png' 0
]]

when EnergyRepresentation centerLastTouches Sun [[
  
  // when moving off, take a full amount of energy in the form of sunlight and heat (our focus fis on light since the plants use it)
  prop eType setTo 'source'
  prop energyLevel setTo 100

  featCall Costume setCostume 'sun_energy.png' 0
]]
 

when EnergyRepresentation centerFirstTouches Plant [[
    ifExpr {{EnergyRepresentation.getProp('eType').value == 'none'}} [[ 
    prop eType setTo 'using'
    featCall Costume setCostume 'plant_energy.png' 0
    ]]

  // if you have energy from the sun, then give some energy to the plant, but not all of it because some is released into the environment
  // as heat or lost in other ways
  ifExpr {{EnergyRepresentation.getProp('eType').value == 'source'}} [[ 
  prop eType setTo 'using'

  // STUDENTS_MAY_CHANGE to alter how much energy the plant gets from the sun
  prop energyLevel setTo 0
  prop Plant.energyLevel add 50
  // we are losing 50 of the hundred, so note that in the global
  featCall Global globalProp energyReleasedAsHeat add 50


  featCall Costume setCostume 'sun-to-plant.png' 0

  featCall Plant.Costume setGlow 1

  ]]
]]

when EnergyRepresentation centerLastTouches Plant [[

 // if you have no energy type, take some energy from the plant
  ifExpr {{EnergyRepresentation.getProp('eType').value == 'using' && Plant.getProp('energyLevel').value > 25}} [[ 
  prop eType setTo 'producer'

  // STUDENTS_MAY_CHANGE to alter how much energy the plant gives to a Bunny
  // note - it was too fast, so i am removing less then I am moving, but let's imagine they are on different scales
  prop Plant.energyLevel sub 10
  prop energyLevel add 25 
  // we are losing 25 of the hundred, so not that in the global
  featCall Global globalProp energyReleasedAsHeat add 25

  featCall Costume setCostume 'plant_energy.png' 0

    ]]

  // temporary kludge to drop the need to return ... need to clean this up for plants, bunnies, waste, worms
  ifExpr {{EnergyRepresentation.getProp('eType').value == 'none' || EnergyRepresentation.getProp('eType').value == 'using'}} [[ 
  prop eType setTo 'producer'
  featCall Costume setCostume 'plant_energy.png' 0
  ]]


  ]]


when EnergyRepresentation centerFirstTouches Bunny [[
  
  ifExpr {{EnergyRepresentation.getProp('eType').value == 'none'}} [[ 
    prop eType setTo 'using'
    featCall Costume setCostume 'bunny_energy.png' 0
    ]]

  // if the last thing we touched was a plant
  ifExpr {{EnergyRepresentation.getProp('eType').value == 'producer'}} [[ 
  prop eType setTo 'using'   

  // STUDENTS_MAY_CHANGE to alter how much energy the plant gets from the sun, and what it does to the energy character
  prop energyLevel setTo 0
  prop Bunny.energyLevel add 10
  // we are losing some, so note that in the global
  featCall Global globalProp energyReleasedAsHeat add 15

  featCall Costume setCostume 'plant-to-bunny.png' 1
  featCall Bunny.Costume setGlow 1


   ]]
]]

when EnergyRepresentation centerLastTouches  Bunny [[
    
 // if you have no energy type, take some energy from the bunny
  ifExpr {{EnergyRepresentation.getProp('eType').value == 'using' && Bunny.getProp('energyLevel').value > 25}} [[ 
  prop eType setTo 'consumer'

  // STUDENTS_MAY_CHANGE to alter how much energy the Bunny gives off
  prop Bunny.energyLevel sub 15
  prop energyLevel add 15 
  // we are losing 15 of the hundred, so not that in the global
  featCall Global globalProp energyReleasedAsHeat add 15

  featCall Costume setCostume 'bunny_energy.png' 0

    ]]

    ifExpr {{EnergyRepresentation.getProp('eType').value == 'none' || EnergyRepresentation.getProp('eType').value == 'using'}} [[ 
    prop eType setTo 'consumer'
    featCall Costume setCostume 'bunny_energy.png' 0
    ]]

  ]]

when EnergyRepresentation centerFirstTouches  Waste [[

 ifExpr {{EnergyRepresentation.getProp('eType').value == 'none'}} [[ 
    prop eType setTo 'using'
    featCall Costume setCostume 'waste_energy.png' 0
    ]]

  // if the last thing we touched was a bunny
  ifExpr {{EnergyRepresentation.getProp('eType').value == 'consumer'}} [[ 
  prop eType setTo 'using'   

  // set the energy on the waste, but then it'll get converted to matter
  prop energyLevel setTo 0
  prop Waste.matterLevel add 20

  // we are losing some energy, though we'll keep the energy looking decent on the worm so it doesn't die too fast due to scaling
  featCall Global globalProp energyReleasedAsHeat add 5

  featCall Costume setCostume 'bunny-to-waste.png' 1
  featCall Waste.Costume setGlow 1


   ]]

  ]]

  when EnergyRepresentation centerLastTouches  Waste [[

// if you have no energy type, take some energy from the bunny
  ifExpr {{EnergyRepresentation.getProp('eType').value == 'using' && Waste.getProp('matterLevel').value > 15}} [[

  prop eType setTo 'waste'

  // STUDENTS_MAY_CHANGE to alter how much energy the waste gives to the worm
  prop Waste.matterLevel sub 15
  prop energyLevel add 15 

  // we are losing 15 of the hundred, so not that in the global
  featCall Global globalProp energyReleasedAsHeat add 15

  featCall Costume setCostume 'waste_energy.png' 0

    ]]

    ifExpr {{EnergyRepresentation.getProp('eType').value == 'none' || EnergyRepresentation.getProp('eType').value == 'using'}} [[ 
    prop eType setTo 'waste'
    featCall Costume setCostume 'waste_energy.png' 0
    ]]

  ]]

  when EnergyRepresentation centerFirstTouches  Worm [[

  ifExpr {{EnergyRepresentation.getProp('eType').value == 'none'}} [[ 
    prop eType setTo 'using'
    featCall Costume setCostume 'worm_energy.png' 0
    ]]

  // if the last thing we touched was waste
  ifExpr {{EnergyRepresentation.getProp('eType').value == 'waste'}} [[ 
  prop eType setTo 'using'   

  // set the energy on the waste, but then it'll get converted to matter
  prop energyLevel setTo 0
  prop Worm.energyLevel add 20

  // we are losing some energy, though we'll keep the energy looking decent on the worm so it doesn't die too fast due to scaling
  featCall Global globalProp energyReleasedAsHeat add 5

  featCall Costume setCostume 'waste-to-worm.png' 1
  featCall Worm.Costume setGlow 1


   ]]


  ]]

  when EnergyRepresentation centerLastTouches  Worm [[


// if you have no energy type, take some energy from the worm
  ifExpr {{EnergyRepresentation.getProp('eType').value == 'using' && Worm.getProp('energyLevel').value > 15}} [[ 
  prop eType setTo 'decomposer'

  // STUDENTS_MAY_CHANGE to alter how much energy the plant gives to a Bunny
  prop Worm.energyLevel sub 15
  prop energyLevel add 15 

  // we are losing 15 of the hundred, so not that in the global
  featCall Global globalProp energyReleasedAsHeat add 15

  featCall Costume setCostume 'worm_energy.png' 0

    ]]

    ifExpr {{EnergyRepresentation.getProp('eType').value == 'none' || EnergyRepresentation.getProp('eType').value == 'using'}} [[ 
    prop eType setTo 'decomposer'
    featCall Costume setCostume 'worm_energy.png' 0
    ]]


  ]]

  when EnergyRepresentation centerFirstTouches  Soil [[

  // if the last thing we touched was a worm
  ifExpr {{EnergyRepresentation.getProp('eType').value == 'decomposer'}} [[ 
  prop eType setTo 'none'   

  // set the energy on the waste, but then it'll get converted to matter
  prop energyLevel setTo 0
  prop Soil.nutrients add 10

  // we are losing some energy, though we'll keep the energy looking decent on the worm so it doesn't die too fast due to scaling
  featCall Global globalProp energyReleasedAsHeat add 5

  // glow the soil but then we are off to find new things
  featCall Costume setCostume 'worm-to-nutrients.png' 0

  // show the nutrients appearing
  featCall Soil.Costume setCostume 'dirt.json' 1


   ]]

  ]]

`
    },
    {
      "id": "TextLabel",
      "label": "TextLabel",
      "scriptText": `# BLUEPRINT TextLabel
# PROGRAM DEFINE
useFeature AgentWidgets
useFeature Costume
featCall Costume setCostume 'onexone.json' 0`
    },
    {
      "id": "ColorChip",
      "label": "ColorChip",
      "scriptText": `# BLUEPRINT ColorChip
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'square.json' 0
useFeature Physics`
    },
    {
      "id": "Timer",
      "label": "Timer",
      "scriptText": `# BLUEPRINT Timer
      # PROGRAM DEFINE
      useFeature AgentWidgets
      prop skin setTo 'onexone.json'
      addProp time Number 0
      prop zIndex setTo 500

      featProp AgentWidgets text setTo 'Time: 0'

      # PROGRAM UPDATE
  every 1 runAtStart [[
        prop time add 1
        exprPush {{ 'Time: ' + agent.getProp('time').value }}
        featPropPop AgentWidgets text
      ]]`
    },
    {
      "id": "EnergyInSysyem",
      "label": "EnergyInSysyem",
      "scriptText": `# BLUEPRINT EnergyInSysyem
            # PROGRAM DEFINE
            prop skin setTo 'onexone.json'

            useFeature AgentWidgets
            useFeature Population
            featProp AgentWidgets isLargeGraphic setTo true

            // using a generic name so that it is easier to change later
            addProp totalEnergy Number 500
            prop totalEnergy setMax 1000
            prop totalEnergy setMin 0

            // to store the current values of plant and Bunny separately
            // I could just add them up below, but this way we can see them in the inspector
            addProp totalPlantEnergy Number 0
            addProp totalBunnyEnergy Number 0

           
           featCall AgentWidgets bindGraphTo totalEnergy 30

            # PROGRAM INIT
            // make sure something displays with some initial text, on bottom right at first
            prop x setTo 495
            prop y setTo 187
            prop zIndex setTo 300

            featProp AgentWidgets text setTo 'Energy in System'
  
            # PROGRAM EVENT

            onEvent Tick [[

              // count up the plant
              featProp Population monitoredAgent setTo 'Plant'
              featProp Population monitoredAgentProp setTo 'energyLevel'
              featCall Population countAgentProp
              exprPush {{ agent.getFeatProp('Population', 'sum').value }}
              propPop totalPlantEnergy

              // count up the Bunny
              featProp Population monitoredAgent setTo 'Bunny'
              featProp Population monitoredAgentProp setTo 'energyLevel'
              featCall Population countAgentProp
              exprPush {{ agent.getFeatProp('Population', 'sum').value }}
              propPop totalBunnyEnergy

              // graph the sum
              exprPush {{ agent.getProp('totalPlantEnergy').value + agent.getProp('totalBunnyEnergy').value }}
              propPop totalEnergy


            ]]
`
    },
    {
      "id": "GraphLostEnergy",
      "label": "GraphLostEnergy",
      "scriptText": `# BLUEPRINT GraphLostEnergy
            # PROGRAM DEFINE
            prop skin setTo 'onexone.json'

            useFeature AgentWidgets
            useFeature Population
            featProp AgentWidgets isLargeGraphic setTo true

            useFeature Global

            // using a generic name so that it is easier to change later
            addProp lostEnergy Number 500
            prop lostEnergy setMax 1000
            prop lostEnergy setMin 0

           featCall AgentWidgets bindGraphTo lostEnergy 30

            # PROGRAM INIT
            // make sure something displays with some initial text, on bottom right at first
            prop x setTo 495
            prop y setTo 350
            prop zIndex setTo 300

            featProp AgentWidgets text setTo 'Lost Energy'
  
            # PROGRAM EVENT

            onEvent Tick [[

              exprPush {{ global.getProp('energyReleasedAsHeat').value }}
              propPop lostEnergy
              
            ]]
`
    },
    {
      "id": "SoilBG",
      "label": "SoilBG",
      "scriptText": `# BLUEPRINT SoilBG
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'square.json' 0
featCall Costume setColorize 0.56 0.52 0.40
useFeature Physics
featCall Physics setSize 800 400
prop zIndex setTo -210`
    },
    {
      "id": "Soil",
      "label": "Soil",
      "scriptText": `# BLUEPRINT Soil
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'dirt.json' 0

addProp nutrients Number 50
prop nutrients setMax 100
prop nutrients setMin 0

addProp sparkleCount Number 0

useFeature Physics

featProp Physics scale setTo 0.38

prop zIndex setTo -200

useFeature Touches
featCall Touches monitor Worm b2b

useFeature AgentWidgets
// STUDENTS_MAY_CHANGE - to pick a different thing to display on the meter (note, color won't change below)
featProp AgentWidgets meterProp setTo nutrients

featCall AgentWidgets setMeterPosition 'inside-left'
// violet
featProp AgentWidgets meterColor setTo 9055202
featProp AgentWidgets text setTo ''

# PROGRAM UPDATE

every 1 runAtStart [[
  ifExpr {{ agent.getProp('sparkleCount').value > 0}} [[
      prop sparkleCount sub 1
  ]]
  ifExpr {{ agent.getProp('sparkleCount').value == 0}} [[
    featCall Costume setCostume 'dirt.json' 0
  ]]
]]`
    }
  ],
  "instances": [
    {
      "id": "0",
      "label": "Sun",
      "bpid": "Sun",
      "initScript": `prop x setTo 0
prop y setTo -314.66`
    },
    {
      "id": "1",
      "label": "Bunny1",
      "bpid": "Bunny",
      "initScript": `prop x setTo -88.27
prop y setTo -36.22`
    },
    {
      "id": "2",
      "label": "Plant1",
      "bpid": "Plant",
      "initScript": `prop x setTo -288.71
prop y setTo -47.63`
    },
    {
      "id": "5",
      "label": "Timer",
      "bpid": "Timer",
      "initScript": `prop x setTo 354.35
prop y setTo -394.62`
    },
    {
      "id": "7",
      "label": "Lost Energy Graph",
      "bpid": "GraphLostEnergy",
      "initScript": `prop x setTo 516.26
prop y setTo 360.68`
    },
    {
      "id": "8",
      "label": "Energy In System Graph",
      "bpid": "EnergyInSysyem",
      "initScript": `prop x setTo 511.75
prop y setTo 187`
    },
    {
      "id": "1101",
      "label": "Soil01",
      "bpid": "Soil",
      "initScript": `prop x setTo -300
prop y setTo 100
prop nutrients setTo 10`
    },
    {
      "id": "1102",
      "label": "Soil02",
      "bpid": "Soil",
      "initScript": `prop x setTo -100
prop y setTo 100`
    },
    {
      "id": "1103",
      "label": "Soil03",
      "bpid": "Soil",
      "initScript": `prop x setTo 100
prop y setTo 100`
    },
    {
      "id": "1104",
      "label": "Soil04",
      "bpid": "Soil",
      "initScript": `prop x setTo 300
prop y setTo 100`
    },
    {
      "id": "1105",
      "label": "Soil05",
      "bpid": "Soil",
      "initScript": `prop x setTo -300
prop y setTo 300`
    },
    {
      "id": "1106",
      "label": "Soil06",
      "bpid": "Soil",
      "initScript": `prop x setTo -100
prop y setTo 300`
    },
    {
      "id": "1107",
      "label": "Soil07",
      "bpid": "Soil",
      "initScript": `prop x setTo 100
prop y setTo 300`
    },
    {
      "id": "1108",
      "label": "Soil08",
      "bpid": "Soil",
      "initScript": `prop x setTo 300
prop y setTo 300`
    },
    {
      "id": "1109",
      "label": "SoilBG01",
      "bpid": "SoilBG",
      "initScript": `prop x setTo 0
 prop y setTo 200`
    },
    {
      "id": "1110",
      "label": "Worm1",
      "bpid": "Worm",
      "initScript": `prop x setTo -284.52
prop y setTo 263.50`
    },
    {
      "id": "1111",
      "label": "Waste1",
      "bpid": "Waste",
      "initScript": `prop x setTo -92.01
prop y setTo 142.08`
    },
    {
      "id": "1700",
      "label": "LegendLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 455
prop y setTo -400
featProp AgentWidgets text setTo 'Key:'`
    },
    {
      "id": "1701",
      "label": "EnergyLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 455
    prop y setTo -373
    featProp AgentWidgets text setTo 'Energy'
    prop zIndex setTo 100`
    },
    {
      "id": "1702",
      "label": "NutrientsLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 455
prop y setTo -340
featProp AgentWidgets text setTo 'Nutrients'
prop zIndex setTo 100`
    },
    {
      "id": "1703",
      "label": "MatterLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 455
prop y setTo -308
featProp AgentWidgets text setTo 'Matter'
prop zIndex setTo 100`
    },
    {
      "id": "1704",
      "label": "EnergyChip",
      "bpid": "ColorChip",
      "initScript": `prop x setTo 455
prop y setTo -351
featCall Costume setColorize 0 255 0
prop zIndex setTo 95
featCall Physics setSize 100 30`
    },
    {
      "id": "1705",
      "label": "NutrientsChip",
      "bpid": "ColorChip",
      "initScript": `prop x setTo 455
prop y setTo -320
featCall Costume setColorize 138 43 226
prop zIndex setTo 95
featCall Physics setSize 100 30`
    },
    {
      "id": "1706",
      "label": "MatterChip",
      "bpid": "ColorChip",
      "initScript": `prop x setTo 455
prop y setTo -290
featCall Costume setColorize 0.56 0.52 0.40
prop zIndex setTo 95
featCall Physics setSize 100 30`
    },
    {
      "id": "1707",
      "label": "Plant2",
      "bpid": "Plant",
      "initScript": `prop x setTo 132.79
prop y setTo -46.50`
    },
    {
      "id": "1708",
      "label": "Bunny2",
      "bpid": "Bunny",
      "initScript": `prop x setTo 314.50
prop y setTo -34.98`
    },
    {
      "id": "1709",
      "label": "Waste2",
      "bpid": "Waste",
      "initScript": `prop x setTo 339.85
prop y setTo 143.75`
    },
    {
      "id": "1710",
      "label": "Worm2",
      "bpid": "Worm",
      "initScript": `prop x setTo 110.23
prop y setTo 276.18`
    }
  ]
}