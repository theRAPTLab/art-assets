{
  "id": "decomposition2",
  "label": "Decomposition2",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": "0x98f5ff",
    "roundsCanLoop": true
  },
  "rounds": [],
  "blueprints": [
    {
      "id": "Soil",
      "label": "Soil",
      "scriptText": `# BLUEPRINT Soil
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'dirt.json' 0

addProp nutrients Number 50
prop nutrients setMax 100
prop nutrients setMin 0

addProp sparkleCount Number 0

useFeature Physics

featProp Physics scale setTo 0.38

prop zIndex setTo -200

useFeature Touches
featCall Touches monitor Worm b2b

useFeature AgentWidgets
// STUDENTS_MAY_CHANGE - to pick a different thing to display on the meter (note, color won't change below)
featProp AgentWidgets meterProp setTo nutrients

featCall AgentWidgets setMeterPosition 'inside-left'
// violet
featProp AgentWidgets meterColor setTo 9055202
featProp AgentWidgets text setTo ''

# PROGRAM UPDATE

every 1 runAtStart [[
  ifExpr {{ agent.getProp('sparkleCount').value > 0}} [[
      prop sparkleCount sub 1
  ]]
  ifExpr {{ agent.getProp('sparkleCount').value == 0}} [[
    featCall Costume setCostume 'dirt.json' 0
  ]]
]]`
    },
    {
      "id": "Sunbeam",
      "label": "Sunbeam",
      "scriptText": `# BLUEPRINT Sunbeam
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'circle.json' 0
featCall Costume setColorize 1 1 0
prop agent.alpha setTo 0.3
//prop zIndex setTo 100

// STUDENTS_MAY_CHANGE - to set the speed of the sunbeam
addProp speed Number 20
// STUDENTS_MAY_CHANGE - to set the amount of energy the sunbeam gives to algae
addProp energyRate Number 5
// STUDENTS_MAY_CHANGE - to set which direction the sunbeam moves (right: 1, left: -1)
addProp direction Number 1

useFeature Physics
featCall Physics init
// STUDENTS_MAY_CHANGE - how wide the sunbeam is
featProp Physics scale setTo 0.4
// STUDENTS_MAY_CHANGE - how tall the sunbeam is
featProp Physics scaleY setTo 2

useFeature Touches

# PROGRAM INIT
// default position for moving across the top
prop x setTo -400
prop y setTo -180

# PROGRAM EVENT
onEvent Tick [[
  exprPush {{agent.x + agent.getProp('direction').value * (agent.getProp('speed').value); }}
  propPop x

  ifExpr {{ ((agent.getProp('direction').value == 1) && (agent.x > 400)) || ((agent.getProp('direction').value == -1) && (agent.x < -400))}} [[
      exprPush {{400 * agent.getProp('direction').value * -1}}
      propPop x
  ]]
]]`
    },
    {
      "id": "Rock",
      "label": "Rock",
      "scriptText": `# BLUEPRINT Rock
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'boulder.json' 0

useFeature Physics
useFeature AgentWidgets

featProp Physics scale setTo 0.5`
    },
    {
      "id": "House",
      "label": "House",
      "scriptText": `# BLUEPRINT House
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'house.json' 0

useFeature Physics
useFeature AgentWidgets

featProp Physics scale setTo 2`
    },
    {
      "id": "SoilBG",
      "label": "SoilBG",
      "scriptText": `# BLUEPRINT SoilBG
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'square.json' 0
featCall Costume setColorize 0.56 0.52 0.40
useFeature Physics
featCall Physics setSize 800 400
prop zIndex setTo -210`
    },
    {
      "id": "Worm",
      "label": "Worm",
      "scriptText": `# BLUEPRINT Worm
# TAG isCharControllable true
# TAG isPozyxControllable true
# TAG isPTrackControllable false
# PROGRAM DEFINE

useFeature Movement

// useFeature Cursor
useFeature Costume
featCall Costume setCostume 'worm_hungry.png' 0

// put above everything
prop zIndex setTo 100

// move between hungry and full where hungry will eat and full will release nutrients
addProp feeling String 'hungry'

// used internally to delay nutrient release when full
addProp nutrientCountStart Number 0

// STUDENTS_MAY_CHANGE set this lower for instant dispersal of nutrients, or higher to stretch it out
prop nutrientCountStart setTo 5
addProp nutrientCount Number 0

featProp Movement useAutoOrientation setTo true

addProp energyLevel Number 50
prop energyLevel setMax 100
prop energyLevel setMin 0

addProp matter Number 50
prop matter setMax 100
prop matter setMin 0

useFeature Physics
featProp Physics scale setTo 0.2

useFeature Touches
featCall Touches monitor Waste b2b
featCall Touches monitor Soil b2b

useFeature AgentWidgets
// STUDENTS_MAY_CHANGE - to pick a different thing to display on the meter (note, color won't change below)
featProp AgentWidgets meterProp setTo energyLevel

// Green = 0x00FF00
featProp AgentWidgets meterColor setTo 65280

// ----------------------------------------------
// add variables to cover distraction
// ----------------------------------------------
// counter - increment when hungry or distracted
addProp distractionCounter Number 0
// how long a distraction lasts (0 will skip it)
addProp distractionLength Number 2
// how long the focus lasts, during hunger, before we switch to distraction
addProp focusLength Number 5

# PROGRAM UPDATE

when Worm touches Waste [[
  every 1 runAtStart [[

    // if hungry, eat
    ifExpr {{ agent.getProp('feeling').value == 'hungry'}} [[

        // not distracted so keep going 

        // move energy and matter from the waste to the worm and glow so we notice
        // STUDENTS_MAY_CHANGE - if you want the worms to eat more or less each second change these numbers
        // waste loses matter
        prop Waste.matter sub 10
        // worms gain energy and matter
        prop Worm.energyLevel add 10
        prop Worm.matter add 10
        // worm glowss so we know it is eating
        featCall Costume setGlow 4

        // if you are nice and full of energy, note you are full and start poop count-down
          ifExpr {{ agent.getProp('energyLevel').value > 90 }} [[
            prop feeling setTo 'full'

            // set the glow to 0 to reflect not eating while full
            featCall Costume setGlow 0

            // change costume so we know we are full
            featCall Costume setCostume 'worm_full.png' 0

            exprPush {{ agent.getProp('nutrientCountStart').value }}
            propPop nutrientCount
          ]]
        
    ]]
  ]]
]]

when Worm lastTouches Waste [[
  featCall Costume setGlow 0
]]

when Worm touches Soil [[
  every 1 runAtStart [[

    // if you are full, check if enough time has passed to release nutrients... do so and then switch to being hungry again
    // if not, just update counter
    ifExpr {{ agent.getProp('feeling').value == 'full'}} [[
      ifExpr {{ agent.getProp('nutrientCount').value == 0}} [[
        prop Worm.energyLevel sub 50
        prop Worm.matter sub 50
        prop Soil.nutrients add 50
        featCall Soil.Costume setGlow 1
        prop Soil.sparkleCount setTo 3
        featCall Soil.Costume setCostume 'dirt.json' 1
        prop feeling setTo 'hungry'
        // revert costume now that we are hungry again
        featCall Costume setCostume 'worm.json' 1
      ]]
      ifExpr {{ agent.getProp('nutrientCount').value > 0}} [[
        prop nutrientCount sub 1
      ]]
    ]]
  ]]
]]
every 1 runAtStart [[
  // energy goes down
  prop energyLevel sub 2

  // increment distraction counter
  prop distractionCounter add 1

  // if you are hungry, and hit focus length, switch to distracted. 
  ifExpr {{agent.getProp('feeling').value == 'hungry'}} [[
    ifExpr {{ agent.getProp('distractionCounter').value >= agent.getProp('focusLength').value }} [[
      
      // we are now distracted so don't bother eating
      prop feeling setTo 'distracted'
      featCall Costume setCostume 'worm_distracted.png' 0
     
      // in case we were eating
      featCall Costume setGlow 0

      prop distractionCounter setTo 0
    ]]
  ]]
  
  // if you are distracted, and hit distracted length length, switch to hungry. 
  ifExpr {{agent.getProp('feeling').value == 'distracted'}} [[
      ifExpr {{ agent.getProp('distractionCounter').value >= agent.getProp('distractionLength').value }} [[
        
        // we are now distracted so don't bother eating
        prop feeling setTo 'hungry'
        featCall Costume setCostume 'worm_hungry.png' 0
        prop distractionCounter setTo 0
        dbgOut 'we are now hungry'
      ]]
    ]]




  // if out of energy ... die
  ifExpr {{agent.getProp('energyLevel').value == 0}} [[
    prop alpha setTo 0.3
    prop isInert setTo true
  ]]


  ifExpr {{ agent.prop.Movement.compassDirection.value === 'E' }} [[
    featProp Costume flipY setTo false
  ]]
  ifExpr {{ agent.prop.Movement.compassDirection.value === 'W' }} [[
    featProp Costume flipY setTo true
  ]]
]]`
    },
    {
      "id": "Bunny",
      "label": "Bunny",
      "scriptText": `# BLUEPRINT Bunny
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE

useFeature Population
// useFeature Global
useFeature Costume
useFeature Movement
//useFeature Cursor

featCall Costume setCostume 'bunny_hungry.png' 0

// set bunny energy
addProp energyLevel Number 25
prop energyLevel setMax 50
prop energyLevel setMin 0

// to manage when it is full and releases waste
addProp feeling String 'hungry'

// used internally to delay waste release when full
addProp wasteCountStart Number 0

// STUDENTS_MAY_CHANGE set this lower for instant dispersal of waste, or higher to stretch it out
prop wasteCountStart setTo 3
addProp wasteCount Number 0

addProp matter Number 50

prop matter setMax 50
prop matter setMin 0

useFeature Physics

featProp Physics scale setTo 0.2

useFeature Touches
featCall Touches monitor Plant b2b

useFeature AgentWidgets
// STUDENTS_MAY_CHANGE - to pick a different thing to display on the meter (note, color won't change below)
featProp AgentWidgets meterProp setTo energyLevel
// Green = 0x00FF00
featProp AgentWidgets meterColor setTo 65280
featCall AgentWidgets setMeterPosition 'inside-left'

prop zIndex setTo 110

// ----------------------------------------------
// add variables to cover distraction
// ----------------------------------------------
// counter - increment when hungry or distracted
addProp distractionCounter Number 0
// how long a distraction lasts (0 will skip it)
addProp distractionLength Number 2
// how long the focus lasts, during hunger, before we switch to distraction
addProp focusLength Number 5

# PROGRAM UPDATE

ifExpr {{ agent.prop.Movement.compassDirection.value === 'E' }} [[
  featProp Costume flipX setTo false
]]
ifExpr {{ agent.prop.Movement.compassDirection.value === 'W' }} [[
  featProp Costume flipX setTo true
]]

when Bunny touches Plant [[
  every 1 runAtStart [[

    // if hungry, eat
    ifExpr {{ agent.getProp('feeling').value == 'hungry' }} [[

      // STUDENTS_MAY_CHANGE - switching these numbers models different speeds of how bunnies eat the plants
      // Plant matter goes down as it is eaten, as does Plant energy
      prop Plant.matter sub 10
      prop Plant.energyLevel sub 10
      // Bunny matter and energy go up from eating
      prop Bunny.matter add 20
      prop Bunny.energyLevel add 20
      featCall Bunny.Costume setGlow 4

      // if full, change costume and set timer to emit waste
      ifExpr {{ agent.getProp('energyLevel').value > 45 }} [[
        featCall Costume setCostume 'bunny_full.png' 0

        // set variables to be full and prepare to release waste
        prop feeling setTo 'full'
        exprPush {{ agent.getProp('wasteCountStart').value }}
        propPop wasteCount
        featCall Bunny.Costume setGlow 0
      ]]
    ]]
  ]]
]]

when Bunny lastTouches Plant [[
  featCall Costume setGlow 0
]]

every 1 runAtStart [[

// increment distraction counter
  prop distractionCounter add 1

  // if you are hungry, and hit focus length, switch to distracted. 
  ifExpr {{agent.getProp('feeling').value == 'hungry'}} [[
    ifExpr {{ agent.getProp('distractionCounter').value >= agent.getProp('focusLength').value }} [[
      
      // we are now distracted so don't bother eating
      prop feeling setTo 'distracted'
      featCall Costume setCostume 'bunny_distracted.png' 0
      prop distractionCounter setTo 0

      // in case we were eating
      featCall Costume setGlow 0

    ]]
  ]]
  
  // if you are distracted, and hit distracted length length, switch to hungry. 
  ifExpr {{agent.getProp('feeling').value == 'distracted'}} [[
      ifExpr {{ agent.getProp('distractionCounter').value >= agent.getProp('distractionLength').value }} [[
        
        // we are now distracted so don't bother eating
        prop feeling setTo 'hungry'
        featCall Costume setCostume 'bunny_hungry.png' 0
        prop distractionCounter setTo 0
        dbgOut 'we are now hungry'
      ]]
    ]]

  ifExpr {{ agent.getProp('feeling').value == 'full' }} [[
    ifExpr {{ agent.getProp('wasteCount').value == 0 }} [[

      // STUDENTS_MAY_CHANGE - switching these numbers will change how bunnies produce waste
      prop energyLevel sub 20
      prop matter sub 20
      prop feeling setTo 'hungry'
      featCall Costume setCostume 'bunny_hungry.png' 0
      prop distractionCounter setTo 0

      featCall Population createAgent Waste [[
        // STUDENTS_MAY_CHANGE - switching these numbers changes where the waste appears and how much matter it starts with
        prop x addRndInt -20 20
        prop y addRndInt 50 150
        prop matter setTo 40
      ]]
    ]]

    ifExpr {{ agent.getProp('wasteCount').value > 0 }} [[
      prop wasteCount sub 1
    ]]
  ]]

  // use some energy from just livin / running around
  prop energyLevel sub 1

  // if out of energy ... die
  ifExpr {{ agent.getProp('energyLevel').value == 0 }} [[
    prop alpha setTo 0.3
    prop isInert setTo true
  ]]

]]
`
    },
    {
      "id": "Plant",
      "label": "Plant",
      "scriptText": `# BLUEPRINT Plant
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'plants.json' 0
// useFeature Global
useFeature Population

addProp energyLevel Number 50

// STUDENTS_MAY_CHANGE - set a different starting eneregy level, max or min (or make it random)
prop energyLevel setTo 50
prop energyLevel setMax 100
prop energyLevel setMin 0

// setup so that we can tweak the size more dynamically, and plant by plant
addProp minimumScale Number 0

// STUDENTS_MAY_CHANGE - set a different minimum size for the plants  (used to be 0.25)
prop minimumScale setTo 0
prop minimumScale setMax 1.0
prop minimumScale setMin -0.5

addProp nutrients Number 8

// STUDENTS_MAY_CHANGE - sete a different starting eneregy level, max or min?  A higher max will allow a lot more time before the plant looks bad
prop nutrients setTo 8
prop nutrients setMax 10
prop nutrients setMin 0

addProp matter Number 50

// STUDENTS_MAY_CHANGE - sete a different range or starting point of matter
prop matter setTo 50
prop matter setMax 100
prop matter setMin 0

prop zIndex setTo -110

useFeature Physics
useFeature Touches
featCall Touches monitor Sunbeam b2b
featCall Touches monitor Soil b2b
featCall Touches monitor Bunny b2b

useFeature AgentWidgets
// STUDENTS_MAY_CHANGE - to pick a different thing to display on the meter (note, color won't change below)
featProp AgentWidgets meterProp setTo energyLevel
// Green
featProp AgentWidgets meterColor setTo 65280

featCall AgentWidgets setMeterPosition 'middle'
featProp AgentWidgets text setTo ''

// always keep it right near the edge of the dirt, but give some variability
prop y setTo -50
prop y addRnd -10 10

# PROGRAM INIT

  // set size based on matter (assume matter max of 100) and that we waver between 80-100%
  exprPush {{ agent.getProp('minimumScale').value + agent.getProp('matter').value / 100 }}
  featPropPop Physics scale

# PROGRAM UPDATE

when Plant touches Sunbeam [[
  every 1 runAtStart [[
    prop Plant.energyLevel add 1
    prop Plant.matter add 1
    featCall Plant.Costume setGlow 4
  ]]
]]

when Plant lastTouches Sunbeam [[
  featCall Costume setGlow 0
]]

when Plant touches Soil [[
  every 1 [[
    ifExpr {{ Soil.getProp('nutrients').value > 0 }} [[
      prop Soil.nutrients sub 1
      prop Plant.nutrients add 1
    ]]
  ]]
]]

every 1 runAtStart [[

  // set size based on matter (assume matter max of 100) and that we waver between 80-100%
  exprPush {{ agent.getProp('minimumScale').value + agent.getProp('matter').value / 100 }}
  featPropPop Physics scale

  // if the plant is basically dead
  ifExpr {{ agent.getProp('matter').value < 10 }} [[

    // create a little bit of inorganic matter
    featCall Population createAgent Waste [[
      // STUDENTS_MAY_CHANGE - switching these numbers changes where the waste appears and how much matter it starts with
      prop x addRndInt -5 5
      prop y addRndInt 50 100
      prop matter setTo 20
    ]]

    // then remove the plant
    featCall Population removeAgent
  ]]


  // is it healthy?  Use some nutrients and then set color
  prop nutrients sub 1
  ifExpr {{ agent.getProp('nutrients').value > 6 }} [[
    // healthy
    featCall Costume setCostume 'plants.json' 0
  ]]
  ifExpr {{ agent.getProp('nutrients').value < 6 }} [[
    // ok, but not great
    featCall Costume setCostume 'plants.json' 1
  ]]
  ifExpr {{ agent.getProp('nutrients').value < 2 }} [[
    // not doing well at all, so lets also lose some matter
    featCall Costume setCostume 'plants.json' 2
    prop matter sub 1
  ]]
]]`
    },
    {
      "id": "Waste",
      "label": "Organic Waste",
      "scriptText": `# BLUEPRINT Waste
# PROGRAM DEFINE
useFeature Population

useFeature Costume
featCall Costume setCostume 'organic_matter.json' 0

addProp matter Number 100
prop matter setMax 100
prop matter setMin 0

// scale up because the art is a bit small
useFeature Physics
featProp Physics scale setTo 2

// pick a random rotation to keep things looking interesting
prop orientation setTo 0
prop orientation addRnd 0 6

// we need to be able to see when the waste is on soil and / or being eaten by a worm
useFeature Touches
featCall Touches monitor Worm b2b
featCall Touches monitor Soil b2b

// make sure it is in front of the soil but behind the worms
prop zIndex setTo -150

useFeature AgentWidgets
// STUDENTS_MAY_CHANGE - to pick a different thing to display on the meter
featProp AgentWidgets meterProp setTo matter

featProp AgentWidgets meterColor setTo 5783616
featProp AgentWidgets text setTo ''

# PROGRAM UPDATE
when Waste touches Soil [[
  // STUDENTS_MAY_CHANGE - change the numbers to seee the impact of bacteria, including making the numberes 0 if you want (no bacteria)
  every 1 [[
    // Bacteria decomposes waste
    prop Waste.matter sub 1
    prop Soil.nutrients add 1
  ]]
]]
every 1 runAtStart [[
  // remove if there is nothing left
  ifExpr {{ agent.getProp('matter').value < 1 }} [[
    featCall Population removeAgent
  ]]

  // scale based on amount of matter
    exprPush {{ (agent.getProp('matter').value / 50)}}
    featPropPop agent.Physics scale

]]`
    },
    {
      "id": "TextLabel",
      "label": "TextLabel",
      "scriptText": `# BLUEPRINT TextLabel
# PROGRAM DEFINE
useFeature AgentWidgets
useFeature Costume
featCall Costume setCostume 'onexone.json' 0`
    },
    {
      "id": "ColorChip",
      "label": "ColorChip",
      "scriptText": `# BLUEPRINT ColorChip
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'square.json' 0
useFeature Physics`
    },
    {
      "id": "Timer",
      "label": "Timer",
      "scriptText": `# BLUEPRINT Timer
# PROGRAM DEFINE
useFeature AgentWidgets
useFeature Costume
featCall Costume setCostume 'onexone.json' 0
addProp time Number 0

featProp AgentWidgets text setTo 'Time: 0'

# PROGRAM INIT

prop x setTo 445
prop y setTo -256

      # PROGRAM UPDATE
  every 1 runAtStart [[
  prop time add 1
  exprPush {{ 'Time: ' + agent.getProp('time').value }}
  featPropPop AgentWidgets text
]]`
    },
    {
      "id": "CharacterGraph",
      "label": "CharacterGraph",
      "scriptText": `# BLUEPRINT CharacterGraph
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'onexone.json' 0
// setting these all up to so they can be changed in the map editor
addProp characterType String 'Worm'
addProp countType String 'sum'
addProp variableToGraph String 'energyLevel'
addProp labelText String 'Worm Energy'

useFeature AgentWidgets
useFeature Population
featProp AgentWidgets isLargeGraphic setTo true

// using a generic name so that it is easier to change later
addProp graphValue Number 0
prop graphValue setMax 1000
prop graphValue setMin 0

featCall AgentWidgets bindGraphTo graphValue 30

# PROGRAM EVENT

onEvent Start [[
  exprPush {{agent.getProp('labelText').value}}
  featPropPop AgentWidgets text
]]

onEvent Tick [[
  // TEAM_MAY_CHANGE - change the character, variable, and possible countTypeto a different name as needed
  // -- Character options: Plant, Worm, Waste, Bunny
  // -- Variable options: matter, energyLevel, nutrients
  // -- Population options: sum, avg, min, max

  exprPush {{agent.getProp('characterType').value}}
  featPropPop Population monitoredAgent

  exprPush {{agent.getProp('variableToGraph').value}}
  featPropPop Population monitoredAgentProp

  featCall Population countAgentProp

  exprPush {{ agent.getFeatProp('Population', agent.prop.countType.value).value }}
  propPop graphValue
]]`
    }
  ],
  "instances": [
    {
      "id": "1101",
      "label": "Soil01",
      "bpid": "Soil",
      "initScript": `prop x setTo -300
prop y setTo 100
prop nutrients setTo 10`
    },
    {
      "id": "1102",
      "label": "Soil02",
      "bpid": "Soil",
      "initScript": `prop x setTo -100
prop y setTo 100`
    },
    {
      "id": "1103",
      "label": "Soil03",
      "bpid": "Soil",
      "initScript": `prop x setTo 100
prop y setTo 100`
    },
    {
      "id": "1104",
      "label": "Soil04",
      "bpid": "Soil",
      "initScript": `prop x setTo 300
prop y setTo 100`
    },
    {
      "id": "1105",
      "label": "Soil05",
      "bpid": "Soil",
      "initScript": `prop x setTo -300
prop y setTo 300`
    },
    {
      "id": "1106",
      "label": "Soil06",
      "bpid": "Soil",
      "initScript": `prop x setTo -100
prop y setTo 300`
    },
    {
      "id": "1107",
      "label": "Soil07",
      "bpid": "Soil",
      "initScript": `prop x setTo 100
prop y setTo 300`
    },
    {
      "id": "1108",
      "label": "Soil08",
      "bpid": "Soil",
      "initScript": `prop x setTo 300
prop y setTo 300`
    },
    {
      "id": "1109",
      "label": "SoilBG01",
      "bpid": "SoilBG",
      "initScript": `prop x setTo 0
 prop y setTo 200`
    },
    {
      "id": "1801",
      "label": "Plant Energy",
      "bpid": "CharacterGraph",
      "initScript": `prop x setTo 470
prop y setTo 370
prop characterType setTo 'Plant'
prop countType setTo 'sum'
prop variableToGraph setTo 'energyLevel'
prop labelText setTo 'Plant Energy'`
    },
    {
      "id": "1802",
      "label": "Bunny Energy",
      "bpid": "CharacterGraph",
      "initScript": `prop x setTo 470
prop y setTo 230
prop characterType setTo 'Bunny'
prop countType setTo 'sum'
prop variableToGraph setTo 'energyLevel'
prop labelText setTo 'Bunny Energy'`
    },
    {
      "id": "1803",
      "label": "Worm Energy",
      "bpid": "CharacterGraph",
      "initScript": `prop x setTo 470
prop y setTo 90
prop characterType setTo 'Worm'
prop countType setTo 'sum'
prop variableToGraph setTo 'energyLevel'
prop labelText setTo 'Worm Energy'
`
    },
    {
      "id": "1201",
      "label": "Plant01",
      "bpid": "Plant",
      "initScript": `prop x setTo -300`
    },
    {
      "id": "1602",
      "label": "Waste02",
      "bpid": "Waste",
      "initScript": `prop x setTo 317.07
prop y setTo 113.34`
    },
    {
      "id": "1700",
      "label": "LegendLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 455
prop y setTo -400
featProp AgentWidgets text setTo 'Key:'`
    },
    {
      "id": "1701",
      "label": "EnergyLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 455
    prop y setTo -373
    featProp AgentWidgets text setTo 'Energy'
    prop zIndex setTo 100`
    },
    {
      "id": "1702",
      "label": "NutrientsLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 455
prop y setTo -340
featProp AgentWidgets text setTo 'Nutrients'
prop zIndex setTo 100`
    },
    {
      "id": "1703",
      "label": "MatterLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 455
prop y setTo -308
featProp AgentWidgets text setTo 'Matter'
prop zIndex setTo 100`
    },
    {
      "id": "1704",
      "label": "EnergyChip",
      "bpid": "ColorChip",
      "initScript": `prop x setTo 455
prop y setTo -351
featCall Costume setColorize 0 255 0
prop zIndex setTo 95
featCall Physics setSize 100 30`
    },
    {
      "id": "1705",
      "label": "NutrientsChip",
      "bpid": "ColorChip",
      "initScript": `prop x setTo 455
prop y setTo -320
featCall Costume setColorize 138 43 226
prop zIndex setTo 95
featCall Physics setSize 100 30`
    },
    {
      "id": "1706",
      "label": "MatterChip",
      "bpid": "ColorChip",
      "initScript": `prop x setTo 455
prop y setTo -290
featCall Costume setColorize 0.56 0.52 0.40
prop zIndex setTo 95
featCall Physics setSize 100 30`
    },
    {
      "id": "1804",
      "label": "Sunbeam1804",
      "bpid": "Sunbeam",
      "initScript": `prop x setTo -407.34
prop y setTo -192.67`
    },
    {
      "id": "1808",
      "label": "Waste1808",
      "bpid": "Waste",
      "initScript": `prop x setTo -288.34
prop y setTo 113.79`
    },
    {
      "id": "1809",
      "label": "Timer1809",
      "bpid": "Timer",
      "initScript": `prop x setTo 338.60
prop y setTo -394.99`
    },
    {
      "id": "1810",
      "label": "Plant1810",
      "bpid": "Plant",
      "initScript": `prop x setTo 88.12
prop y setTo -43.58`
    }
  ]
}