{
  "id": "aquatic_energy",
  "label": "Aquatic Energy",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 102,
    "roundsCanLoop": true
  },
  "rounds": [],
  "blueprints": [
    {
      "id": "Sun",
      "label": "Sun",
      "scriptText": `# BLUEPRINT Sun
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'circle.json' 0
featCall Costume setColorize 255 215 0
prop zIndex setTo 0

useFeature Physics
featProp Physics scale setTo 0.6

// types to use for energy transfer: source, producer, consumer (we might add more later)
addProp eType String 'source'

useFeature Global

  ifExpr{{ agent.callFeatMethod('Global', 'getGlobalProp', 'energyReleasedAsHeat') == undefined }} [[
      featCall Global addGlobalProp energyReleasedAsHeat Number 0
  ]]

`
    },
    {
      "id": "Fish",
      "label": "Fish",
      "scriptText": `# BLUEPRINT Fish
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'fish.json' 0

useFeature Physics
featProp Physics scale setTo 1.5

// types to use for energy transfer: source, producer, consumer (we might add more later)
addProp eType String 'consumer'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop energyLevel setMax 100
prop energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Fish lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
useFeature AgentWidgets
featProp AgentWidgets meterProp setTo energyLevel
// Green = 0x00FF00
featProp AgentWidgets meterColor setTo 65280

# PROGRAM UPDATE
  every 2 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ agent.getProp('energyLevel').value - agent.getProp('energyUse').value}}
  propPop agent.energyLevel

  // this code sets the color of the energy bar based on how hungry the fish is
  // sated
  ifExpr {{ agent.getProp('energyLevel').value > 50 }} [[
    featCall Costume setPose 0
    // Green
    featProp AgentWidgets meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ agent.getProp('energyLevel').value < 50 }} [[
    featCall Costume setPose 1
    // Orange
    featProp AgentWidgets meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ agent.getProp('energyLevel').value < 20 }} [[
    featCall Costume setPose 1
    // Red
    featProp AgentWidgets meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ agent.getProp('energyLevel').value < 1 }} [[
    featCall Costume setPose 2
    // featCall Movement setMovementType 'float'
    prop agent.alpha setTo 0.3
    prop agent.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featCall AgentWidgets bindMeterTo energyLevel

]]

`
    },
    {
      "id": "Algae",
      "label": "Algae",
      "scriptText": `# BLUEPRINT Algae
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
useFeature Costume
featCall Costume setCostume 'algae.json' 0

useFeature Physics
featProp Physics scale setTo 3

// types to use for energy transfer: source, producer, consumer (we might add more later)
addProp eType String 'producer'

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop energyLevel setMax 100
prop energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Algae lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
useFeature AgentWidgets
featProp AgentWidgets meterProp setTo energyLevel
// Green = 0x00FF00
featProp AgentWidgets meterColor setTo 65280

# PROGRAM UPDATE
  every 1 runAtStart [[

    // decrease energy each tick, using the energyUse varable to determine how much
    ifExpr {{ agent.getProp('energyLevel').value > 0 }} [[
    exprPush {{ agent.getProp('energyLevel').value - agent.getProp('energyUse').value}}
    propPop agent.energyLevel
    ]]

    // re-scale the algae based on its energy level
    exprPush {{ (agent.getProp('energyLevel').value / 100)* 3}}
    featPropPop agent.Physics scale

    // this code sets the color of the energy bar based on how hungry the fish is
    // set algae energy meter color
    // doing great
    ifExpr {{ agent.getProp('energyLevel').value > 60 }} [[
      // Green
      featProp AgentWidgets meterColor setTo 65280
    ]]
    // needs some energy
    ifExpr {{ agent.getProp('energyLevel').value < 60 }} [[
      // Orange
      featProp AgentWidgets meterColor setTo 16737792
    ]]
    // in trouble
    ifExpr {{ agent.getProp('energyLevel').value < 30 }} [[
      // Red
      featProp AgentWidgets meterColor setTo 16711680

      // avoid getting too
      exprPush {{ .90 }}
      featPropPop agent.Physics scale

    ]]


  ]]

`
    },
    {
      "id": "Sky",
      "label": "Sky",
      "scriptText": `# BLUEPRINT Sky
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
//Note: this character doesn't do anyhting - it is just for show'
useFeature Costume
featCall Costume setCostume 'square.json' 0
featCall Costume setColorize 53 81 92

useFeature Physics
featCall Physics setSize 800 200

prop zIndex setTo -100


`
    },
    {
      "id": "EnergyRepresentation",
      "label": "EnergyRepresentation",
      "scriptText": `# BLUEPRINT EnergyRepresentation
# TAG isCharControllable true
# TAG isPozyxControllable true
# TAG isPTrackControllable false
# PROGRAM DEFINE

useFeature Costume
featCall Costume setCostume 'EnergyAnnotation_Pick1.png' 0

useFeature Physics

// using this to record energyReleasedAsHeat
useFeature Global


// setup energy properties
addProp energyLevel Number 0
prop energyLevel setMax 100
prop energyLevel setMin 0

// setup energy type so that we know what we can give it to
// start with none
addProp eType String 'none'

useFeature Touches
featCall Touches monitor Sun c2b
featCall Touches monitor Algae c2b
featCall Touches monitor Fish c2b

# PROGRAM UPDATE
when EnergyRepresentation centerFirstTouches Sun [[

  // when touching, show an annotation about how the sun produces energy
  featCall Costume setCostume 'EnergyAnnotation_SunProducing1.png' 0
]]

when EnergyRepresentation centerLastTouches Sun [[
  
  // when moving off, take a full amount of energy in the form of sunlight and heat (our focus is on light since the plants use it)
  prop eType setTo 'source'
  prop energyLevel setTo 100

  featCall Costume setCostume 'EnergyAnnotation_Sun1.png' 0
]]
 

when EnergyRepresentation centerFirstTouches Algae [[
    ifExpr {{EnergyRepresentation.getProp('eType').value == 'none'}} [[ 
    prop eType setTo 'using'
    featCall Costume setCostume 'EnergyAnnotation_PlantUsing.png' 0
    ]]

  // if you have energy from the sun, then give some energy to the algae, but not all of it because some is released into the environment
  // as heat or lost in other ways
  ifExpr {{EnergyRepresentation.getProp('eType').value == 'source'}} [[ 
  prop eType setTo 'none'

  // STUDENTS_MAY_CHANGE to alter how much energy the algae gets from the sun
  prop energyLevel setTo 0
  prop Algae.energyLevel add 50
  // we are losing 50 of the hundred, so not that in the global
  featCall Global globalProp energyReleasedAsHeat add 50


  featCall Costume setAnimatedCostume 'EnergyAnnotation_SunConv1.png' 1

  featCall Algae.Costume setGlow 1

  ]]
]]



  when EnergyRepresentation centerLastTouches Algae [[

 // if you have no energy type, take some energy from the algae
  ifExpr {{EnergyRepresentation.getProp('eType').value == 'using' && Algae.getProp('energyLevel').value > 25}} [[ 
  prop eType setTo 'producer'

  // STUDENTS_MAY_CHANGE to alter how much energy the algae gives to a fish
  prop Algae.energyLevel sub 25
  prop energyLevel add 25 
  // we are losing 50 of the hundred, so not that in the global
  featCall Global globalProp energyReleasedAsHeat add 25

  featCall Costume setCostume 'EnergyAnnotation_Plant1.png' 0

    ]]

  ifExpr {{EnergyRepresentation.getProp('eType').value == 'none' || EnergyRepresentation.getProp('eType').value == 'using'}} [[ 
  prop eType setTo 'none'
  featCall Costume setCostume 'EnergyAnnotation_Pick1.png' 0
  ]]


  ]]


when EnergyRepresentation centerFirstTouches Fish [[
  
  ifExpr {{EnergyRepresentation.getProp('eType').value == 'none'}} [[ 
    prop eType setTo 'using'
    featCall Costume setCostume 'EnergyAnnotation_FishUsing1.png' 0
    ]]

  // when touch Algae and type sunlight and energy isn't 0, get energy, change meter color to orange, change type to producer
   ifExpr {{EnergyRepresentation.getProp('eType').value == 'producer'}} [[ 
  prop eType setTo 'none'   

  // STUDENTS_MAY_CHANGE to alter how much energy the algae gets from the sun, and what it does to the energy character
  prop energyLevel setTo 0
  prop Fish.energyLevel add 10
  // we are losing 50 of the hundred, so not that in the global
  featCall Global globalProp energyReleasedAsHeat add 15

  featCall Costume setAnimatedCostume 'EnergyAnnotation_PlantConv1.png' 1
  featCall Fish.Costume setGlow 1


   ]]

]]

when EnergyRepresentation centerLastTouches  Fish [[
    

  ifExpr {{EnergyRepresentation.getProp('eType').value == 'none' || EnergyRepresentation.getProp('eType').value == 'using'}} [[ 
    prop eType setTo 'none'
    featCall Costume setCostume 'EnergyAnnotation_Pick1.png' 0
  ]]

  ]]

`
    },
    {
      "id": "Timer",
      "label": "Timer",
      "scriptText": `# BLUEPRINT Timer
      # PROGRAM DEFINE
      useFeature AgentWidgets
      prop skin setTo 'onexone.json'
      addProp time Number 0
      prop zIndex setTo 500

      featProp AgentWidgets text setTo 'Time: 0'

      # PROGRAM UPDATE
  every 1 runAtStart [[
        prop time add 1
        exprPush {{ 'Time: ' + agent.getProp('time').value }}
        featPropPop AgentWidgets text
      ]]`
    },
    {
      "id": "EnergyInSysyem",
      "label": "EnergyInSysyem",
      "scriptText": `# BLUEPRINT EnergyInSysyem
            # PROGRAM DEFINE
            prop skin setTo 'onexone.json'

            useFeature AgentWidgets
            useFeature Population
            featProp AgentWidgets isLargeGraphic setTo true

            // using a generic name so that it is easier to change later
            addProp totalEnergy Number 500
            prop totalEnergy setMax 1000
            prop totalEnergy setMin 0

            // to store the current values of algae and fish separately
            // I could just add them up below, but this way we can see them in the inspector
            addProp totalAlgaeEnergy Number 0
            addProp totalFishEnergy Number 0

           
           featCall AgentWidgets bindGraphTo totalEnergy 30

            # PROGRAM INIT
            // make sure something displays with some initial text, on bottom right at first
            prop x setTo 495
            prop y setTo 187
            prop zIndex setTo 300

            featProp AgentWidgets text setTo 'Energy in System'
  
            # PROGRAM EVENT

            onEvent Tick [[

              // count up the algae
              featProp Population monitoredAgent setTo 'Algae'
              featProp Population monitoredAgentProp setTo 'energyLevel'
              featCall Population countAgentProp
              exprPush {{ agent.getFeatProp('Population', 'sum').value }}
              propPop totalAlgaeEnergy

              // count up the fish
              featProp Population monitoredAgent setTo 'Fish'
              featProp Population monitoredAgentProp setTo 'energyLevel'
              featCall Population countAgentProp
              exprPush {{ agent.getFeatProp('Population', 'sum').value }}
              propPop totalFishEnergy

              // graph the sum
              exprPush {{ agent.getProp('totalAlgaeEnergy').value + agent.getProp('totalFishEnergy').value }}
              propPop totalEnergy


            ]]
`
    },
    {
      "id": "GraphLostEnergy",
      "label": "GraphLostEnergy",
      "scriptText": `# BLUEPRINT GraphLostEnergy
            # PROGRAM DEFINE
            prop skin setTo 'onexone.json'

            useFeature AgentWidgets
            useFeature Population
            featProp AgentWidgets isLargeGraphic setTo true

            useFeature Global

            // using a generic name so that it is easier to change later
            addProp lostEnergy Number 500
            prop lostEnergy setMax 1000
            prop lostEnergy setMin 0

           featCall AgentWidgets bindGraphTo lostEnergy 30

            # PROGRAM INIT
            // make sure something displays with some initial text, on bottom right at first
            prop x setTo 495
            prop y setTo 350
            prop zIndex setTo 300

            featProp AgentWidgets text setTo 'Lost Energy From Heat'
  
            # PROGRAM EVENT

            onEvent Tick [[

              exprPush {{ global.getProp('energyReleasedAsHeat').value }}
              propPop lostEnergy
              
            ]]
`
    }
  ],
  "instances": [
    {
      "id": "0",
      "label": "Sun",
      "bpid": "Sun",
      "initScript": `prop x setTo -315.15
prop y setTo -313.18`
    },
    {
      "id": "1",
      "label": "Fish1",
      "bpid": "Fish",
      "initScript": `prop x setTo -253.37
prop y setTo 68.88`
    },
    {
      "id": "2",
      "label": "Algae1",
      "bpid": "Algae",
      "initScript": `prop x setTo -288.59
prop y setTo -118.14`
    },
    {
      "id": "3",
      "label": "Algae2",
      "bpid": "Algae",
      "initScript": `prop x setTo -124.18
prop y setTo -123.89`
    },
    {
      "id": "4",
      "label": "Fish2",
      "bpid": "Fish",
      "initScript": `prop x setTo -119.56
prop y setTo 111.73`
    },
    {
      "id": "5",
      "label": "Timer",
      "bpid": "Timer",
      "initScript": `prop x setTo 354.35
prop y setTo -394.62`
    },
    {
      "id": "6",
      "label": "Sky6",
      "bpid": "Sky",
      "initScript": `prop x setTo 0
prop y setTo -300`
    },
    {
      "id": "7",
      "label": "Lost Energy Graph",
      "bpid": "GraphLostEnergy",
      "initScript": `prop x setTo 516.26
prop y setTo 360.68`
    },
    {
      "id": "8",
      "label": "Energy In System Graph",
      "bpid": "EnergyInSysyem",
      "initScript": `prop x setTo 511.75
prop y setTo 187`
    },
    {
      "id": "9",
      "label": "Algae3",
      "bpid": "Algae",
      "initScript": `prop x setTo 44.81
prop y setTo -98.89`
    },
    {
      "id": "10",
      "label": "Algae4",
      "bpid": "Algae",
      "initScript": `prop x setTo 247.79
prop y setTo -125.15`
    },
    {
      "id": "11",
      "label": "Algae5",
      "bpid": "Algae",
      "initScript": `prop x setTo 340.27
prop y setTo -121.93`
    },
    {
      "id": "12",
      "label": "Fish3",
      "bpid": "Fish",
      "initScript": `prop x setTo 61.65
prop y setTo 138.41`
    },
    {
      "id": "13",
      "label": "Fish4",
      "bpid": "Fish",
      "initScript": `prop x setTo 205.24
prop y setTo 59.01`
    },
    {
      "id": "14",
      "label": "Fish5",
      "bpid": "Fish",
      "initScript": `prop x setTo 315.8
prop y setTo 210.49`
    }
  ]
}