{
  "id": "food_web_tinkering_Sarah",
  "label": "Food Web",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 6604847,
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [],
  "blueprints": [
    {
      "name": "Mouse",
      "scriptText": `# BLUEPRINT Mouse
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable false


# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Mouse.Costume.costumeName setTo 'FWE_mouse.png'

// add other features
addFeature Physics
addFeature Touches

featProp agent.Costume.scale setTo 0.2

featProp Mouse.Movement.compassDirection setTo 'W'
featProp Mouse.Movement.movementType setTo 'wander'
featProp Mouse.Movement.distance setTo 3
featProp Mouse.Movement.targetY setMax 0.6

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Mouse.Touches monitor 'VeggieGarden' b2b
featCall Mouse.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Mouse.energyLevel setMax 100
prop Mouse.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Mouse lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Mouse.Graphing.meterProp setTo 'energyLevel'

featProp Mouse.Graphing.meterColor setTo 65280

# PROGRAM EVENT
every 1 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Mouse.getProp('energyLevel').value - Mouse.getProp('energyUse').value }}
  propPop Mouse.energyLevel

  // this code sets the color of the energy bar based on how hungry the Mouse is
  // sated
  ifExpr {{ Mouse.getProp('energyLevel').value > 50 }} [[
    featProp Mouse.Costume.currentFrame setTo 0
    // Green
    featProp Mouse.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Mouse.getProp('energyLevel').value < 50 }} [[
    featProp Mouse.Costume.currentFrame setTo 1
    // Orange
    featProp Mouse.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Mouse.getProp('energyLevel').value < 20 }} [[
    featProp Mouse.Costume.currentFrame setTo 1
    // Red
    featProp Mouse.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Mouse.getProp('energyLevel').value < 1 }} [[
    featProp Mouse.Costume.currentFrame setTo 2
    prop Mouse.alpha setTo 0.3
    prop Mouse.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Mouse.Graphing.meterProp setTo 'energyLevel'

]]

when Mouse touches VeggieGarden [[
  every 1 [[
    ifExpr {{ Mouse.getProp('alive').value == true &&  VeggieGarden.getProp('alive').value == true }} [[
      featProp Mouse.Costume.glow setTo 1
      prop Mouse.energyLevel add 10
      prop VeggieGarden.energyLevel sub 10
    ]]
  ]]

  when Mouse touches Reincarnator [[
    ifExpr {{ Mouse.getProp('alive').value == false }} [[
      featProp Mouse.Costume.glow setTo 1
      prop Mouse.alive setTo true
      prop Mouse.alpha setTo 1
    ]]
  ]]

]]

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time`
    },
    {
      "name": "Snake",
      "scriptText": `# BLUEPRINT Snake
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable true

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Snake.Costume.costumeName setTo 'FWE_snake.png'

// add other features
addFeature Physics
addFeature Touches

featProp Snake.Costume.scale setTo 0.2

featProp Snake.Movement.movementType setTo 'wander'
featProp Snake.Movement.compassDirection setTo 'S'
featProp Snake.Movement.distance setTo 3
featProp Snake.Movement.targetY setMax 0.7

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Snake.Touches monitor 'Mouse' b2b
featCall Snake.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Snake.energyLevel setMax 100
prop Snake.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Snake lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Snake.Graphing.meterProp setTo 'energyLevel'

featProp Snake.Graphing.meterColor setTo 65280

# PROGRAM EVENT
when Snake touches Mouse [[
  every 1 [[
    ifExpr {{ Snake.getProp('alive').value == true &&  Mouse.getProp('alive').value == true }} [[
      featProp Snake.Costume.glow setTo 1
      prop Mouse.alive setTo false
      prop Mouse.alpha setTo 0.3
      prop Snake.energyLevel add 10
      prop Mouse.energyLevel setTo 0
    ]]
  ]]

  when Snake touches Reincarnator [[
    ifExpr {{ Snake.getProp('alive').value == false }} [[
      featProp Snake.Costume.glow setTo 1
      prop Snake.alive setTo true
      prop Snake.alpha setTo 1
      prop Snake.energyLevel setTo 55
    ]]
  ]]

]]

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time
every 1 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Snake.getProp('energyLevel').value - Snake.getProp('energyUse').value }}
  propPop Snake.energyLevel

  // this code sets the color of the energy bar based on how hungry the Snake is
  // sated
  ifExpr {{ Snake.getProp('energyLevel').value > 50 }} [[
    featProp Snake.Costume.currentFrame setTo 0
    // Green
    featProp Snake.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Snake.getProp('energyLevel').value < 50 }} [[
    featProp Snake.Costume.currentFrame setTo 1
    // Orange
    featProp Snake.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Snake.getProp('energyLevel').value < 20 }} [[
    featProp Snake.Costume.currentFrame setTo 1
    // Red
    featProp Snake.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Snake.getProp('energyLevel').value < 1 }} [[
    featProp Snake.Costume.currentFrame setTo 2
    prop Snake.alpha setTo 0.3
    prop Snake.alive setTo false
    featProp Snake.Movement.movementType setTo 'stop'
  ]]

  // set meter to mirror energyLevel
  featProp Snake.Graphing.meterProp setTo 'energyLevel'

]]`
    },
    {
      "name": "Reincarnator",
      "scriptText": `# BLUEPRINT Reincarnator
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics

featProp Reincarnator.Costume.costumeName setTo 'square.json'

featProp agent.Costume.scale setTo 0.4
# PROGRAM UPDATE
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]`
    },
    {
      "name": "Background",
      "scriptText": `# BLUEPRINT Background
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp Background.Costume.costumeName setTo 'food-web_background1.png'
featProp Background.Costume.size setTo 800
propPush global.alphaSettingForAll
propPop Background.alpha
# PROGRAM UPDATE
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]`
    },
    {
      "name": "ParkRanger",
      "scriptText": `# BLUEPRINT ParkRanger
# TAG isCharControllable true
# TAG isPozyxControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp ParkRanger.Costume.costumeName setTo 'bunny.json'


# PROGRAM UPDATE
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]`
    },
    {
      "name": "VeggieGarden",
      "scriptText": `# BLUEPRINT VeggieGarden
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp VeggieGarden.Costume.costumeName setTo 'FWE_veggiegarden.png'

// add other features
addFeature Physics
addFeature Touches

featProp VeggieGarden.Costume.scale setTo 0.3

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall VeggieGarden.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 3/4 way
addProp energyLevel number 75
prop VeggieGarden.energyLevel setMax 100
prop VeggieGarden.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make VeggieGarden lose energy faster (or slower)
addProp energyUse number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp VeggieGarden.Graphing.meterProp setTo 'energyLevel'

featProp VeggieGarden.Graphing.meterColor setTo 65280

# PROGRAM EVENT


every 1 runAtStart [[

  // decrease energy each tick, using the energyUse varable to determine how much
  ifExpr {{ VeggieGarden.getProp('energyLevel').value > 0 }} [[
    exprPush {{ VeggieGarden.getProp('energyLevel').value - VeggieGarden.getProp('energyUse').value }}
    propPop VeggieGarden.energyLevel
  ]]

  // this code sets the color of the energy bar based on how hungry the VeggieGarden is
  // set VeggieGarden energy meter color
  // doing great
  ifExpr {{ VeggieGarden.getProp('energyLevel').value > 60 }} [[
    // Green
    featProp VeggieGarden.Graphing.meterColor setTo 65280
  ]]
  // needs some energy
  ifExpr {{ VeggieGarden.getProp('energyLevel').value < 60 }} [[
    // Orange
    featProp VeggieGarden.Graphing.meterColor setTo 16737792
  ]]
  // in trouble
  ifExpr {{ VeggieGarden.getProp('energyLevel').value < 30 }} [[
    // Red
    featProp VeggieGarden.Graphing.meterColor setTo 16711680
    // dead
    ifExpr {{ VeggieGarden.getProp('energyLevel').value < 1 }} [[
      featProp VeggieGarden.Costume.currentFrame setTo 2
      prop VeggieGarden.alpha setTo 0.3
      prop VeggieGarden.alive setTo false
    ]]

    // avoid getting too small
    exprPush {{ 0.3 }}
    featPropPop VeggieGarden.Costume.scale

  ]]
]]
every 10 [[
  ifProp VeggieGarden.energyLevel lessThan 1 [[
    featProp VeggieGarden.Costume.glow setTo 1
    prop VeggieGarden.alpha setTo 1
    prop VeggieGarden.energyLevel setTo 55
    prop VeggieGarden.alive setTo true
  ]]
]]


# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time`
    },
    {
      "name": "Clover",
      "scriptText": `# BLUEPRINT Clover
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Clover.Costume.costumeName setTo 'FWE_clover.png'

// add other features
addFeature Physics
addFeature Touches

featProp Clover.Costume.scale setTo 0.2

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Clover.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 3/4 way
addProp energyLevel Number 70
prop Clover.energyLevel setMax 100
prop Clover.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make VeggieGarden lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Clover.Graphing.meterProp setTo 'energyLevel'

featProp Clover.Graphing.meterColor setTo 65280

# PROGRAM EVENT
every 1 runAtStart [[

  // decrease energy each tick, using the energyUse varable to determine how much
  ifExpr {{ Clover.getProp('energyLevel').value > 0 }} [[
    exprPush {{ Clover.getProp('energyLevel').value - Clover.getProp('energyUse').value }}
    propPop Clover.energyLevel
  ]]

  // this code sets the color of the energy bar based on how hungry the clover is
  // set clover energy meter color
  // doing great
  ifExpr {{ Clover.getProp('energyLevel').value > 60 }} [[
    // Green
    featProp Clover.Graphing.meterColor setTo 65280
  ]]
  // needs some energy
  ifExpr {{ Clover.getProp('energyLevel').value < 60 }} [[
    // Orange
    featProp Clover.Graphing.meterColor setTo 16737792
  ]]
  // in trouble
  ifExpr {{ Clover.getProp('energyLevel').value < 30 }} [[
    // Red
    featProp Clover.Graphing.meterColor setTo 16711680
    // dead
    ifExpr {{ Clover.getProp('energyLevel').value < 1 }} [[
      featProp Clover.Costume.currentFrame setTo 2
      prop Clover.alpha setTo 0.3
      prop Clover.alive setTo false
    ]]


    // avoid getting too
    exprPush {{ .15 }}
    featPropPop Clover.Costume.scale

  ]]
]]

every 1 [[

  when Clover touches Reincarnator [[
    ifExpr {{ Clover.getProp('alive').value == false }} [[
      featProp Clover.Costume.glow setTo 1
      prop Clover.alive setTo true
      prop Clover.alpha setTo 1
    ]]
  ]]

]]

every 10 [[
  ifProp Clover.energyLevel lessThan 1 [[
    featProp Clover.Costume.glow setTo 1
    prop Clover.alpha setTo 1
    prop Clover.energyLevel setTo 55
    prop Clover.alive setTo true
  ]]
]]
# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time`
    },
    {
      "name": "Snail",
      "scriptText": `# BLUEPRINT Snail
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Snail.Costume.costumeName setTo 'FWE_snail.png'

// add other features
addFeature Physics
addFeature Touches

featProp agent.Costume.scale setTo 0.2

featProp Snail.Movement.movementType setTo 'wander'
featProp Snail.Movement.compassDirection setTo 'W'
featProp Snail.Movement.distance setTo 1.5
featProp Snail.Movement.targetY setMax 0.7

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Snail.Touches monitor 'VeggieGarden' b2b
featCall Snail.Touches monitor 'Clover' b2b
featCall Snail.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Snail.energyLevel setMax 100
prop Snail.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Snail lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Snail.Graphing.meterProp setTo 'energyLevel'

featProp Snail.Graphing.meterColor setTo 65280

# PROGRAM EVENT
every 1 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Snail.getProp('energyLevel').value - Snail.getProp('energyUse').value }}
  propPop Snail.energyLevel

  // this code sets the color of the energy bar based on how hungry the Snail is
  // sated
  ifExpr {{ Snail.getProp('energyLevel').value > 50 }} [[
    featProp Snail.Costume.currentFrame setTo 0
    // Green
    featProp Snail.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Snail.getProp('energyLevel').value < 50 }} [[
    featProp Snail.Costume.currentFrame setTo 1
    // Orange
    featProp Snail.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Snail.getProp('energyLevel').value < 20 }} [[
    featProp Snail.Costume.currentFrame setTo 1
    // Red
    featProp Snail.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Snail.getProp('energyLevel').value < 1 }} [[
    featProp Snail.Costume.currentFrame setTo 2
    prop Snail.alpha setTo 0.3
    prop Snail.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Snail.Graphing.meterProp setTo 'energyLevel'

]]
when Snail touches VeggieGarden [[
  every 1 [[
    ifExpr {{ Snail.getProp('alive').value == true &&  VeggieGarden.getProp('alive').value == true }} [[
      featProp Snail.Costume.glow setTo 1
      prop Snail.energyLevel add 10
      prop VeggieGarden.energyLevel sub 10
    ]]
  ]]

  when Snail touches Clover [[
    every 1 [[
      ifExpr {{ Snail.getProp('alive').value == true &&  Clover.getProp('alive').value == true }} [[
        featProp Snail.Costume.glow setTo 1
        prop Snail.energyLevel add 10
        prop Clover.energyLevel sub 10
      ]]
    ]]
  ]]

  when Snail touches Reincarnator [[
    ifExpr {{ Snail.getProp('alive').value == false }} [[
      featProp Snail.Costume.glow setTo 1
      prop Snail.alive setTo true
      prop Snail.alpha setTo 1
    ]]
  ]]

]]

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time`
    },
    {
      "name": "Gopher",
      "scriptText": `# BLUEPRINT Gopher
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable true

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Gopher.Costume.costumeName setTo 'FWE_gopher.png'

// add other features
addFeature Physics
addFeature Touches

featProp agent.Costume.scale setTo 0.2

featProp Gopher.Movement.movementType setTo 'wander'
featProp Gopher.Movement.compassDirection setTo 'W'
featProp Gopher.Movement.distance setTo 4
featProp Gopher.Movement.targetY setMax 0.7

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Gopher.Touches monitor 'VeggieGarden' b2b
featCall Gopher.Touches monitor 'Clover' b2b
featCall Gopher.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Gopher.energyLevel setMax 100
prop Gopher.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Gopher lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Gopher.Graphing.meterProp setTo 'energyLevel'

featProp Gopher.Graphing.meterColor setTo 65280
# PROGRAM EVENT
every 1 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Gopher.getProp('energyLevel').value - Gopher.getProp('energyUse').value }}
  propPop Gopher.energyLevel

  // this code sets the color of the energy bar based on how hungry the Gopher is
  // sated
  ifExpr {{ Gopher.getProp('energyLevel').value > 50 }} [[
    featProp Gopher.Costume.currentFrame setTo 0
    // Green
    featProp Gopher.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Gopher.getProp('energyLevel').value < 50 }} [[
    featProp Gopher.Costume.currentFrame setTo 1
    // Orange
    featProp Gopher.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Gopher.getProp('energyLevel').value < 20 }} [[
    featProp Gopher.Costume.currentFrame setTo 1
    // Red
    featProp Gopher.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Gopher.getProp('energyLevel').value < 1 }} [[
    featProp Gopher.Costume.currentFrame setTo 2
    prop Gopher.alpha setTo 0.3
    featProp Gopher.Movement.movementType setTo 'stop'
  ]]

  // set meter to mirror energyLevel
  featProp Gopher.Graphing.meterProp setTo 'energyLevel'

]]
when Gopher touches VeggieGarden [[
  every 1 [[
    ifExpr {{ Gopher.getProp('alive').value == true &&  VeggieGarden.getProp('alive').value == true }} [[
      featProp Gopher.Costume.glow setTo 1
      prop Gopher.energyLevel add 10
      prop VeggieGarden.energyLevel sub 10
    ]]
  ]]

  when Gopher touches Clover [[
    every 1 runAtStart [[
      ifExpr {{ Gopher.getProp('alive').value == true &&  Clover.getProp('alive').value == true }} [[
        featProp Gopher.Costume.glow setTo 1
        prop Gopher.energyLevel add 10
        prop Clover.energyLevel sub 10
      ]]
    ]]
  ]]

  when Gopher touches Reincarnator [[
    ifExpr {{ Gopher.getProp('alive').value == false }} [[
      featProp Gopher.Costume.glow setTo 1
      prop Gopher.alive setTo true
      prop Gopher.alpha setTo 1
      prop Gopher.energyLevel setTo 50
    ]]
  ]]

]]

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time`
    },
    {
      "name": "Caterpillar",
      "scriptText": `# BLUEPRINT Caterpillar
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Caterpillar.Costume.costumeName setTo 'FWE_caterpillar.png'

// add other features
addFeature Physics
addFeature Touches

featProp agent.Costume.scale setTo 0.1

featProp Caterpillar.Movement.movementType setTo 'wander'
featProp Caterpillar.Movement.compassDirection setTo 'W'
featProp Caterpillar.Movement.distance setTo 2
featProp Caterpillar.Movement.targetY setMax 0.7

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Caterpillar.Touches monitor 'VeggieGarden' b2b
featCall Caterpillar.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Caterpillar.energyLevel setMax 100
prop Caterpillar.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Caterpillar lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Caterpillar.Graphing.meterProp setTo 'energyLevel'

featProp Caterpillar.Graphing.meterColor setTo 65280

# PROGRAM EVENT
every 1 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Caterpillar.getProp('energyLevel').value - Caterpillar.getProp('energyUse').value }}
  propPop Caterpillar.energyLevel

  // this code sets the color of the energy bar based on how hungry the Caterpillar is
  // sated
  ifExpr {{ Caterpillar.getProp('energyLevel').value > 50 }} [[
    featProp Caterpillar.Costume.currentFrame setTo 0
    // Green
    featProp Caterpillar.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Caterpillar.getProp('energyLevel').value < 50 }} [[
    featProp Caterpillar.Costume.currentFrame setTo 1
    // Orange
    featProp Caterpillar.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Caterpillar.getProp('energyLevel').value < 20 }} [[
    featProp Caterpillar.Costume.currentFrame setTo 1
    // Red
    featProp Caterpillar.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Caterpillar.getProp('energyLevel').value < 1 }} [[
    featProp Caterpillar.Costume.currentFrame setTo 2
    prop Caterpillar.alpha setTo 0.3
    featProp Caterpillar.Movement.movementType setTo 'string'
  ]]

  // set meter to mirror energyLevel
  featProp Caterpillar.Graphing.meterProp setTo 'energyLevel'

]]
when Caterpillar touches VeggieGarden [[
  every 1 [[
    ifExpr {{ Caterpillar.getProp('alive').value == true &&  VeggieGarden.getProp('alive').value == true }} [[
      featProp Caterpillar.Costume.glow setTo 1
      prop Caterpillar.energyLevel add 10
      prop VeggieGarden.energyLevel sub 10
    ]]
  ]]


  when Caterpillar touches Reincarnator [[
    ifExpr {{ Caterpillar.getProp('alive').value == false }} [[
      featProp Caterpillar.Costume.glow setTo 1
      prop Caterpillar.alive setTo true
      prop Caterpillar.alpha setTo 1
      prop Caterpillar.energyLevel setTo 50
    ]]
  ]]

]]

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time`
    },
    {
      "name": "Beetle",
      "scriptText": `# BLUEPRINT Beetle
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT

addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Beetle.Costume.costumeName setTo 'FWE_beetle.png'

// add other features
addFeature Physics
addFeature Touches

featProp agent.Costume.scale setTo 0.3

featProp Beetle.Movement.compassDirection setTo 'north'
featProp Beetle.Movement.movementType setTo 'wander'
featProp Beetle.Movement.distance setTo 3
featProp Beetle.Movement.targetY setMax 0.7

addProp alive Boolean true


// make sure we track interactions with the other creatures
featCall Beetle.Touches monitor 'Caterpillar' b2b
featCall Beetle.Touches monitor 'Snail' b2b
featCall Beetle.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Beetle.energyLevel setMax 100
prop Beetle.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Beetle lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Beetle.Graphing.meterProp setTo 'energyLevel'

featProp Beetle.Graphing.meterColor setTo 65280

# PROGRAM EVENT
every 1 runAtStart [[
  when Beetle touches Reincarnator [[
    ifExpr {{ Beetle.getProp('alive').value == false }} [[
      featProp Beetle.Costume.glow setTo 1
      prop Beetle.alive setTo true
      prop Beetle.alpha setTo 1
      prop Beetle.energyLevel setTo 50
    ]]
  ]]
]]

when Beetle touches Caterpillar [[
  every 1 [[
    ifExpr {{ Beetle.getProp('alive').value == true &&  Caterpillar.getProp('alive').value == true }} [[
      featProp Beetle.Costume.glow setTo 1
      prop Beetle.energyLevel add 10
      prop Caterpillar.alive setTo false
      prop Caterpillar.alpha setTo 0.3
      prop Caterpillar.energyLevel setTo 0
    ]]
  ]]
]]

when Beetle touches Snail [[
  every 1 [[
    ifExpr {{ Beetle.getProp('alive').value == true &&  Snail.getProp('alive').value == true }} [[
      featProp Beetle.Costume.glow setTo 1
      prop Snail.alive setTo false
      prop Snail.alpha setTo 0.3
      prop Beetle.energyLevel add 10
      prop Snail.energyLevel setTo 0
    ]]
  ]]
]]




# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time
every 1 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Beetle.getProp('energyLevel').value - Beetle.getProp('energyUse').value }}
  propPop Beetle.energyLevel

  // this code sets the color of the energy bar based on how hungry the Beetle is
  // sated
  ifExpr {{ Beetle.getProp('energyLevel').value > 50 }} [[
    featProp Beetle.Costume.currentFrame setTo 0
    // Green
    featProp Beetle.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Beetle.getProp('energyLevel').value < 50 }} [[
    featProp Beetle.Costume.currentFrame setTo 1
    // Orange
    featProp Beetle.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Beetle.getProp('energyLevel').value < 20 }} [[
    featProp Beetle.Costume.currentFrame setTo 1
    // Red
    featProp Beetle.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Beetle.getProp('energyLevel').value < 1 }} [[
    featProp Beetle.Costume.currentFrame setTo 2
    prop Beetle.alpha setTo 0.3
    prop Beetle.alive setTo false
    featProp Beetle.Movement.movementType setTo 'stop'
  ]]

  // set meter to mirror energyLevel
  featProp Beetle.Graphing.meterProp setTo 'energyLevel'

]]`
    },
    {
      "name": "Robin",
      "scriptText": `# BLUEPRINT Robin
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable true

# PROGRAM INIT
// add the Caterpillar we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Robin.Costume.costumeName setTo 'FWE_robin.png'

// add other features
addFeature Physics
addFeature Touches

featProp Robin.Costume.scale setTo 0.2

featProp Robin.Movement.movementType setTo 'wander'
featProp Robin.Movement.compassDirection setTo 'W'
featProp Robin.Movement.distance setTo 3
featProp Robin.Movement.targetY setMax 0.7

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Robin.Touches monitor 'Caterpillar' b2b
featCall Robin.Touches monitor 'Snail' b2b
featCall Robin.Touches monitor 'Beetle' b2b
featCall Robin.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Robin.energyLevel setMax 100
prop Robin.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Robin lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Robin.Graphing.meterProp setTo 'energyLevel'

featProp Robin.Graphing.meterColor setTo 65280

# PROGRAM EVENT
when Robin touches Caterpillar [[
  every 1 [[
    ifExpr {{ Robin.getProp('alive').value == true &&  Caterpillar.getProp('alive').value == true }} [[
      featProp Robin.Costume.glow setTo 1
      prop Caterpillar.alive setTo false
      prop Caterpillar.alpha setTo 0.3
      prop Robin.energyLevel add 10
      prop Caterpillar.energyLevel setTo 0
    ]]
  ]]

  when Robin touches Snail [[
    every 1 [[
      ifExpr {{ Robin.getProp('alive').value == true &&  Snail.getProp('alive').value == true }} [[
        featProp Robin.Costume.glow setTo 1
        prop Snail.alive setTo false
        prop Snail.alpha setTo 0.3
        prop Robin.energyLevel add 10
        prop Snail.energyLevel setTo 0
      ]]
    ]]
  ]]

  when Robin touches Beetle [[
    every 1 [[
      ifExpr {{ Robin.getProp('alive').value == true &&  Beetle.getProp('alive').value == true }} [[
        featProp Robin.Costume.glow setTo 1
        prop Beetle.alive setTo false
        prop Beetle.alpha setTo 0.3
        prop Robin.energyLevel add 10
        prop Beetle.energyLevel setTo 0
      ]]
    ]]
  ]]

  when Robin touches Reincarnator [[
    every 1 [[
      ifExpr {{ Robin.getProp('alive').value == false }} [[
        featProp Robin.Costume.glow setTo 1
        prop Robin.alive setTo true
        prop Robin.alpha setTo 1
        prop Robin.energyLevel setTo 50
      ]]
    ]]
  ]]

]]

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time
every 1 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Robin.getProp('energyLevel').value - Robin.getProp('energyUse').value }}
  propPop Robin.energyLevel

  // this code sets the color of the energy bar based on how hungry the Robin is
  // sated
  ifExpr {{ Robin.getProp('energyLevel').value > 50 }} [[
    featProp Robin.Costume.currentFrame setTo 0
    // Green
    featProp Robin.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Robin.getProp('energyLevel').value < 50 }} [[
    featProp Robin.Costume.currentFrame setTo 1
    // Orange
    featProp Robin.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Robin.getProp('energyLevel').value < 20 }} [[
    featProp Robin.Costume.currentFrame setTo 1
    // Red
    featProp Robin.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Robin.getProp('energyLevel').value < 1 }} [[
    featProp Robin.Costume.currentFrame setTo 2
    prop Robin.alpha setTo 0.3
    prop Robin.alive setTo false
    featProp Robin.Movement.movementType setTo 'stop'
  ]]

  // set meter to mirror energyLevel
  featProp Robin.Graphing.meterProp setTo 'energyLevel'

]]`
    },
    {
      "name": "Hawk",
      "scriptText": `# BLUEPRINT Hawk
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Hawk.Costume.costumeName setTo 'FWE_Hawk.png'

// add other features
addFeature Physics
addFeature Touches

featProp Hawk.Costume.scale setTo 0.15

featProp Hawk.Movement.compassDirection setTo 'west'
featProp Hawk.Movement.movementType setTo 'wander'
featProp Hawk.Movement.distance setTo 5
featCall Hawk.Movement setRandomDirection

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Hawk.Touches monitor 'Snake' b2b
featCall Hawk.Touches monitor 'Robin' b2b
featCall Hawk.Touches monitor 'Mouse' b2b
featCall Hawk.Touches monitor 'Gopher' b2b
featCall Hawk.Touches monitor 'Rabbit' b2b
featCall Hawk.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Hawk.energyLevel setMax 100
prop Hawk.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Hawk lose energy faster (or slower)
addProp energyUse Number 2

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Hawk.Graphing.meterProp setTo 'energyLevel'

featProp Hawk.Graphing.meterColor setTo 65280

# PROGRAM EVENT

when Hawk touches Snake [[
  every 1 [[
    ifExpr {{ Hawk.getProp('alive').value == true &&  Snake.getProp('alive').value == true }} [[
      featProp Hawk.Costume.glow setTo 1
      prop Snake.alive setTo false
      prop Snake.alpha setTo 0.3
      prop Hawk.energyLevel add 10
      prop Snake.energyLevel setTo 0
    ]]
  ]]

  when Hawk touches Robin [[
    every 1 [[
      ifExpr {{ Hawk.getProp('alive').value == true &&  Robin.getProp('alive').value == true }} [[
        featProp Hawk.Costume.glow setTo 1
        prop Robin.alive setTo false
        prop Robin.alpha setTo 0.3
        prop Hawk.energyLevel add 10
        prop Robin.energyLevel setTo 0
      ]]
    ]]
  ]]

  when Hawk touches Mouse [[
    every 1 [[
      ifExpr {{ Hawk.getProp('alive').value == true &&  Mouse.getProp('alive').value == true }} [[
        featProp Hawk.Costume.glow setTo 1
        prop Mouse.alive setTo false
        prop Mouse.alpha setTo 0.3
        prop Hawk.energyLevel add 10
        prop Mouse.energyLevel setTo 0
      ]]
    ]]
  ]]

  when Hawk touches Gopher [[
    every 1 [[
      ifExpr {{ Hawk.getProp('alive').value == true &&  Gopher.getProp('alive').value == true }} [[
        featProp Hawk.Costume.glow setTo 1
        prop Gopher.alive setTo false
        prop Gopher.alpha setTo 0.3
        prop Hawk.energyLevel add 10
        prop Gopher.energyLevel setTo 0
      ]]
    ]]
  ]]

  when Hawk touches Rabbit [[
    every 1 [[
      ifExpr {{ Hawk.getProp('alive').value == true &&  Rabbit.getProp('alive').value == true }} [[
        featProp Hawk.Costume.glow setTo 1
        prop Rabbit.alive setTo false
        prop Rabbit.alpha setTo 0.3
        prop Hawk.energyLevel add 10
        prop Rabbit.energyLevel setTo 0
      ]]
    ]]
  ]]

  when Hawk touches Reincarnator [[
    ifExpr {{ Hawk.getProp('alive').value == false }} [[
      featProp Hawk.Costume.glow setTo 1
      prop Hawk.alive setTo true
      prop Hawk.alpha setTo 1
    ]]
  ]]

]]

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time
every 1 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Hawk.getProp('energyLevel').value - Hawk.getProp('energyUse').value }}
  propPop Hawk.energyLevel

  // this code sets the color of the energy bar based on how hungry the Hawk is
  // sated
  ifExpr {{ Hawk.getProp('energyLevel').value > 50 }} [[
    featProp Hawk.Costume.currentFrame setTo 0
    // Green
    featProp Hawk.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Hawk.getProp('energyLevel').value < 50 }} [[
    featProp Hawk.Costume.currentFrame setTo 1
    // Orange
    featProp Hawk.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Hawk.getProp('energyLevel').value < 20 }} [[
    featProp Hawk.Costume.currentFrame setTo 1
    // Red
    featProp Hawk.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Hawk.getProp('energyLevel').value < 1 }} [[
    featProp Hawk.Costume.currentFrame setTo 2
    prop Hawk.alpha setTo 0.3
    prop Hawk.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Hawk.Graphing.meterProp setTo 'energyLevel'

]]`
    },
    {
      "name": "Rabbit",
      "scriptText": `# BLUEPRINT Rabbit
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable true

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Rabbit.Costume.costumeName setTo 'web_brown-rabbit.png'

// add other features
addFeature Physics
addFeature Touches

featProp agent.Costume.scale setTo 0.2

featProp Rabbit.Movement.movementType setTo 'wander'
featProp Rabbit.Movement.compassDirection setTo 'W'
featProp Rabbit.Movement.distance setTo 4
featProp Rabbit.Movement.targetY setMax 0.7

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Rabbit.Touches monitor 'VeggieGarden' b2b
featCall Rabbit.Touches monitor 'Clover' b2b
featCall Rabbit.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Rabbit.energyLevel setMax 100
prop Rabbit.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Rabbit lose energy faster (or slower)
addProp energyUse Number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Rabbit.Graphing.meterProp setTo 'energyLevel'

featProp Rabbit.Graphing.meterColor setTo 65280

# PROGRAM EVENT
every 1 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Rabbit.getProp('energyLevel').value - Rabbit.getProp('energyUse').value }}
  propPop Rabbit.energyLevel

  // this code sets the color of the energy bar based on how hungry the Rabbit is
  // sated
  ifExpr {{ Rabbit.getProp('energyLevel').value > 50 }} [[
    featProp Rabbit.Costume.currentFrame setTo 0
    // Green
    featProp Rabbit.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Rabbit.getProp('energyLevel').value < 50 }} [[
    featProp Rabbit.Costume.currentFrame setTo 1
    // Orange
    featProp Rabbit.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Rabbit.getProp('energyLevel').value < 20 }} [[
    featProp Rabbit.Costume.currentFrame setTo 1
    // Red
    featProp Rabbit.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Rabbit.getProp('energyLevel').value < 1 }} [[
    featProp Rabbit.Costume.currentFrame setTo 2
    prop Rabbit.alpha setTo 0.3
    featProp Rabbit.Movement.movementType setTo 'stop'
  ]]

  // set meter to mirror energyLevel
  featProp Rabbit.Graphing.meterProp setTo 'energyLevel'

]]
when Rabbit touches VeggieGarden [[
  every 1 [[
    ifExpr {{ Rabbit.getProp('alive').value == true &&  VeggieGarden.getProp('alive').value == true }} [[
      featProp Rabbit.Costume.glow setTo 1
      prop Rabbit.energyLevel add 10
      prop VeggieGarden.energyLevel sub 10
    ]]
  ]]

  when Rabbit touches Clover [[
    every 1 runAtStart [[
      ifExpr {{ Rabbit.getProp('alive').value == true &&  Clover.getProp('alive').value == true }} [[
        featProp Rabbit.Costume.glow setTo 1
        prop Rabbit.energyLevel add 10
        prop Clover.energyLevel sub 10
      ]]
    ]]
  ]]

  when Rabbit touches Reincarnator [[
    ifExpr {{ Rabbit.getProp('alive').value == false }} [[
      featProp Rabbit.Costume.glow setTo 1
      prop Rabbit.alive setTo true
      prop Rabbit.alpha setTo 1
      prop Rabbit.energyLevel setTo 50
    ]]
  ]]

]]


# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time`
    },
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# PROGRAM INIT
addFeature Population
prop global.visible setTo false
addProp alphaSettingForAll number 0.5
`
    },
    {
      "name": "Weeds",
      "scriptText": `# BLUEPRINT Weeds
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Weeds.Costume.costumeName setTo 'weeds.png'

// add other features
addFeature Physics
addFeature Touches

featProp Weeds.Costume.scale setTo 0.1

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Weeds.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 3/4 way
addProp energyLevel number 75
prop Weeds.energyLevel setMax 100
prop Weeds.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Weeds lose energy faster (or slower)
addProp energyUse number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Weeds.Graphing.meterProp setTo 'energyLevel'

featProp Weeds.Graphing.meterColor setTo 65280

# PROGRAM EVENT


every 1 runAtStart [[

  // decrease energy each tick, using the energyUse varable to determine how much
  ifExpr {{ Weeds.getProp('energyLevel').value > 0 }} [[
    exprPush {{ Weeds.getProp('energyLevel').value - Weeds.getProp('energyUse').value }}
    propPop Weeds.energyLevel
  ]]

  // this code sets the color of the energy bar based on how hungry the Weeds is
  // set Weeds energy meter color
  // doing great
  ifExpr {{ Weeds.getProp('energyLevel').value > 60 }} [[
    // Green
    featProp Weeds.Graphing.meterColor setTo 65280
  ]]
  // needs some energy
  ifExpr {{ Weeds.getProp('energyLevel').value < 60 }} [[
    // Orange
    featProp Weeds.Graphing.meterColor setTo 16737792
  ]]
  // in trouble
  ifExpr {{ Weeds.getProp('energyLevel').value < 30 }} [[
    // Red
    featProp Weeds.Graphing.meterColor setTo 16711680
    // dead
    ifExpr {{ Weeds.getProp('energyLevel').value < 1 }} [[
      featProp Weeds.Costume.currentFrame setTo 2
      prop Weeds.alpha setTo 0.3
      prop Weeds.alive setTo false
    ]]

    // avoid getting too small
    exprPush {{ 0.1 }}
    featPropPop Weeds.Costume.scale

  ]]
]]
every 10 [[
  ifProp Weeds.energyLevel lessThan 1 [[
    featProp Weeds.Costume.glow setTo 1
    prop Weeds.alpha setTo 1
    prop Weeds.energyLevel setTo 55
    prop Weeds.alive setTo true
  ]]
]]


# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time`
    },
    {
      "name": "Pesticide",
      "scriptText": `# BLUEPRINT Pesticide
# TAG isCharControllable true
# TAG isPozyxControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Pesticide.Costume.costumeName setTo 'pesticide.png'

// add other features
addFeature Physics
addFeature Touches

featProp Pesticide.Costume.scale setTo 0.15

featProp Pesticide.Movement.compassDirection setTo 'west'
featProp Pesticide.Movement.movementType setTo 'wander'
featProp Pesticide.Movement.distance setTo 5
featCall Pesticide.Movement setRandomDirection

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Pesticide.Touches monitor 'Hawk' b2b
featCall Pesticide.Touches monitor 'Snake' b2b
featCall Pesticide.Touches monitor 'Robin' b2b
featCall Pesticide.Touches monitor 'Mouse' b2b
featCall Pesticide.Touches monitor 'Gopher' b2b
featCall Pesticide.Touches monitor 'Rabbit' b2b
featCall Pesticide.Touches monitor 'Snail' b2b
featCall Pesticide.Touches monitor 'Caterpillar' b2b
featCall Pesticide.Touches monitor 'Beetle' b2b
featCall Pesticide.Touches monitor 'Snake' b2b
featCall Pesticide.Touches monitor 'Weeds' b2b
featCall Pesticide.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 100
prop Pesticide.energyLevel setMax 100
prop Pesticide.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Pesticide lose energy faster (or slower)
addProp energyUse Number 0

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Pesticide.Graphing.meterProp setTo 'energyLevel'

featProp Pesticide.Graphing.meterColor setTo 65280

# PROGRAM EVENT

when Pesticide touches Snake [[
  every 1 [[
    ifExpr {{ Pesticide.getProp('alive').value == true &&  Snake.getProp('alive').value == true }} [[
      featProp Pesticide.Costume.glow setTo 1
      prop Snake.energyUse setTo 20
      prop Pesticide.energyLevel sub 10

    ]]
  ]]

  when Pesticide touches Robin [[
    every 1 [[
      ifExpr {{ Pesticide.getProp('alive').value == true &&  Robin.getProp('alive').value == true }} [[
        featProp Pesticide.Costume.glow setTo 1
        prop Pesticide.energyLevel sub 10
        prop Robin.energyUse setTo 20
      ]]
    ]]
  ]]

  when Pesticide touches Mouse [[
    every 1 [[
      ifExpr {{ Pesticide.getProp('alive').value == true &&  Mouse.getProp('alive').value == true }} [[
        featProp Pesticide.Costume.glow setTo 1
        prop Pesticide.energyLevel sub 10
        prop Mouse.energyUse setTo 20
      ]]
    ]]
  ]]

  when Pesticide touches Gopher [[
    every 1 [[
      ifExpr {{ Pesticide.getProp('alive').value == true &&  Gopher.getProp('alive').value == true }} [[
        featProp Pesticide.Costume.glow setTo 1
        prop Pesticide.energyLevel sub 10
        prop Gopher.energyUse setTo 20
      ]]
    ]]
  ]]

  when Pesticide touches Rabbit [[
    every 1 [[
      ifExpr {{ Pesticide.getProp('alive').value == true &&  Rabbit.getProp('alive').value == true }} [[
        featProp Pesticide.Costume.glow setTo 1
        prop Pesticide.energyLevel sub 10
        prop Rabbit.energyUse setTo 20
      ]]
    ]]
  ]]
  
  when Pesticide touches Hawk [[
    every 1 [[
      ifExpr {{ Pesticide.getProp('alive').value == true &&  Hawk.getProp('alive').value == true }} [[
        featProp Pesticide.Costume.glow setTo 1
        prop Pesticide.energyLevel sub 10
        prop Hawk.energyUse setTo 20
      ]]
    ]]
  ]]
  
  when Pesticide touches Snail [[
    every 1 [[
      ifExpr {{ Pesticide.getProp('alive').value == true &&  Snail.getProp('alive').value == true }} [[
        featProp Pesticide.Costume.glow setTo 1
        prop Pesticide.energyLevel sub 10
        prop Snail.energyUse setTo 20
      ]]
    ]]
  ]]
  
  when Pesticide touches Caterpillar [[
    every 1 [[
      ifExpr {{ Pesticide.getProp('alive').value == true &&  Caterpillar.getProp('alive').value == true }} [[
        featProp Pesticide.Costume.glow setTo 1
        prop Pesticide.energyLevel sub 10
        prop Caterpillar.energyUse setTo 20
      ]]
    ]]
  ]]
  
  when Pesticide touches Beetle [[
    every 1 [[
      ifExpr {{ Pesticide.getProp('alive').value == true &&  Beetle.getProp('alive').value == true }} [[
        featProp Pesticide.Costume.glow setTo 1
        prop Pesticide.energyLevel sub 10
        prop Beetle.energyUse setTo 20
      ]]
    ]]
  ]]
  
  when Pesticide touches Weeds [[
    every 1 [[
      ifExpr {{ Pesticide.getProp('alive').value == true &&  Weeds.getProp('alive').value == true }} [[
        featProp Pesticide.Costume.glow setTo 1
        prop Pesticide.energyLevel sub 10
        prop Weeds.energyUse setTo 20
      ]]
    ]]
  ]]

  when Pesticide touches Reincarnator [[
    ifExpr {{ Pesticide.getProp('alive').value == false }} [[
      featProp Pesticide.Costume.glow setTo 1
      prop Pesticide.alive setTo true
      prop Pesticide.alpha setTo 1
    ]]
  ]]

]]

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time
every 1 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Pesticide.getProp('energyLevel').value - Pesticide.getProp('energyUse').value }}
  propPop Pesticide.energyLevel

  // this code sets the color of the energy bar based on how hungry the Pesticide is
  // sated
  ifExpr {{ Pesticide.getProp('energyLevel').value > 50 }} [[
    featProp Pesticide.Costume.currentFrame setTo 0
    // Green
    featProp Pesticide.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Pesticide.getProp('energyLevel').value < 50 }} [[
    featProp Pesticide.Costume.currentFrame setTo 1
    // Orange
    featProp Pesticide.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Pesticide.getProp('energyLevel').value < 20 }} [[
    featProp Pesticide.Costume.currentFrame setTo 1
    // Red
    featProp Pesticide.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Pesticide.getProp('energyLevel').value < 1 }} [[
    featProp Pesticide.Costume.currentFrame setTo 2
    prop Pesticide.alpha setTo 0.3
    prop Pesticide.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Pesticide.Graphing.meterProp setTo 'energyLevel'

]]`
    }
  ],
  "instances": [
    {
      "id": "13",
      "label": "Background13",
      "bpid": "Background",
      "initScript": `prop x setTo -0.99
prop y setTo -3.57`
    },
    {
      "id": "17",
      "label": "VeggieGarden17",
      "bpid": "VeggieGarden",
      "initScript": `prop x setTo -302.86
prop y setTo 287.8`
    },
    {
      "id": "18",
      "label": "VeggieGarden18",
      "bpid": "VeggieGarden",
      "initScript": `prop x setTo -96.09
prop y setTo 284.1`
    },
    {
      "id": "19",
      "label": "VeggieGarden19",
      "bpid": "VeggieGarden",
      "initScript": `prop x setTo 316.68
prop y setTo 278.08`
    },
    {
      "id": "20",
      "label": "VeggieGarden20",
      "bpid": "VeggieGarden",
      "initScript": `prop x setTo 133.04
prop y setTo 270.88`
    },
    {
      "id": "24",
      "label": "Clover24",
      "bpid": "Clover",
      "initScript": `prop x setTo -138.32
prop y setTo -290.77`
    },
    {
      "id": "25",
      "label": "Clover25",
      "bpid": "Clover",
      "initScript": `prop x setTo 90.29
prop y setTo -138.03`
    },
    {
      "id": "41",
      "label": "Beetle41",
      "bpid": "Beetle",
      "initScript": `prop x setTo 353.35
prop y setTo 100.35`
    },
    {
      "id": "42",
      "label": "Beetle42",
      "bpid": "Beetle",
      "initScript": `prop x setTo 132.47
prop y setTo 98.95`
    },
    {
      "id": "45",
      "label": "Hawk45",
      "bpid": "Hawk",
      "initScript": `prop x setTo 191.32
prop y setTo -321.48`
    },
    {
      "id": "51",
      "label": "Mouse51",
      "bpid": "Mouse",
      "initScript": `prop x setTo -179.98
prop y setTo -65.97`
    },
    {
      "id": "52",
      "label": "Mouse52",
      "bpid": "Mouse",
      "initScript": `prop x setTo 4.63
prop y setTo 68.91`
    },
    {
      "id": "54",
      "label": "Gopher54",
      "bpid": "Gopher",
      "initScript": `prop x setTo -208.52
prop y setTo -224.26`
    },
    {
      "id": "55",
      "label": "Snail55",
      "bpid": "Snail",
      "initScript": `prop x setTo 7.39
prop y setTo 213.02`
    },
    {
      "id": "60",
      "label": "Caterpillar60",
      "bpid": "Caterpillar",
      "initScript": `prop x setTo -224.45
prop y setTo 214.73`
    },
    {
      "id": "61",
      "label": "Rabbit61",
      "bpid": "Rabbit",
      "initScript": `prop x setTo 206.44
prop y setTo -59.92`
    },
    {
      "id": "62",
      "label": "Robin62",
      "bpid": "Robin",
      "initScript": `prop x setTo -30
prop y setTo -48`
    },
    {
      "id": "63",
      "label": "Snake63",
      "bpid": "Snake",
      "initScript": `prop x setTo -303.24
prop y setTo 41.62`
    },
    {
      "id": "64",
      "label": "Weeds64",
      "bpid": "Weeds",
      "initScript": `prop x setTo -129
prop y setTo 169.53`
    },
    {
      "id": "65",
      "label": "Weeds65",
      "bpid": "Weeds",
      "initScript": `prop x setTo 227.95
prop y setTo 182.49`
    },
    {
      "id": "68",
      "label": "Reincarnator68",
      "bpid": "Reincarnator",
      "initScript": `prop x setTo 341.48
prop y setTo -325.63`
    },
    {
      "id": "69",
      "label": "Caterpillar69",
      "bpid": "Caterpillar",
      "initScript": `prop x setTo 130.37
prop y setTo 209.94`
    },
    {
      "id": "70",
      "label": "Snail70",
      "bpid": "Snail",
      "initScript": `prop x setTo -341.15
prop y setTo 202.97`
    }
  ]
}