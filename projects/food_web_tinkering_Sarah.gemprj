{
  "id": "food_web_tinkering_Sarah",
  "label": "Food Web",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 931,
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [],
  "blueprints": [
    {
      "name": "Mouse",
      "scriptText": `# BLUEPRINT Mouse
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable false


# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Mouse.Costume.costumeName setTo 'mouse.png'

// add other features
addFeature Physics
addFeature Touches

featProp agent.Costume.scale setTo 0.2

featProp Mouse.Movement.compassDirection setTo 'W'
featProp Mouse.Movement.movementType setTo 'wander'
featProp Mouse.Movement.distance setTo 3
featProp Mouse.Movement.targetY setMax 0.7

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Mouse.Touches monitor 'VeggieGarden' b2b
featCall Mouse.Touches monitor 'Reincarnator' b2b


# PROGRAM EVENT

every 1 [[
  when Mouse touches VeggieGarden [[
    ifExpr {{ Mouse.getProp('alive').value == true &&  VeggieGarden.getProp('alive').value == true }} [[
      featProp Mouse.Costume.glow setTo 1
      prop VeggieGarden.alive setTo false
      prop VeggieGarden.alpha setTo 0.3
    ]]
  ]]

  when Mouse touches Reincarnator [[
    ifExpr {{ Mouse.getProp('alive').value == false }} [[
      featProp Mouse.Costume.glow setTo 1
      prop Mouse.alive setTo true
      prop Mouse.alpha setTo 1
    ]]
  ]]

]]

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time`
    },
    {
      "name": "Snake",
      "scriptText": `# BLUEPRINT Snake
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Snake.Costume.costumeName setTo 'snake.png'

// add other features
addFeature Physics
addFeature Touches

featProp Snake.Costume.scale setTo 0.2

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Snake.Touches monitor 'Mouse' b2b
featCall Snake.Touches monitor 'Reincarnator' b2b


# PROGRAM EVENT

every 1 [[
  when Snake touches Mouse [[
    ifExpr {{ Snake.getProp('alive').value == true &&  Mouse.getProp('alive').value == true }} [[
      featProp Snake.Costume.glow setTo 1
      prop Mouse.alive setTo false
      prop Mouse.alpha setTo 0.3
    ]]
  ]]

  when Snake touches Reincarnator [[
    ifExpr {{ Snake.getProp('alive').value == false }} [[
      featProp Snake.Costume.glow setTo 1
      prop Snake.alive setTo true
      prop Snake.alpha setTo 1
    ]]
  ]]

]]

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time`
    },
    {
      "name": "Reincarnator",
      "scriptText": `# BLUEPRINT Reincarnator
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics

featProp Reincarnator.Costume.costumeName setTo 'square.json'

featProp agent.Costume.scale setTo 0.5
# PROGRAM UPDATE
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]`
    },
    {
      "name": "Background",
      "scriptText": `# BLUEPRINT Background
# TAG isCharControllable true
# TAG isPozyxControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp Background.Costume.costumeName setTo 'food-web_background1.png'
featProp Background.Costume.size setTo 800

# PROGRAM UPDATE
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]`
    },
    {
      "name": "ParkRanger",
      "scriptText": `# BLUEPRINT ParkRanger
# TAG isCharControllable true
# TAG isPozyxControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp ParkRanger.Costume.costumeName setTo 'bunny.json'


# PROGRAM UPDATE
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]`
    },
    {
      "name": "VeggieGarden",
      "scriptText": `# BLUEPRINT VeggieGarden
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp VeggieGarden.Costume.costumeName setTo 'veggiegarden.png'

// add other features
addFeature Physics
addFeature Touches

featProp VeggieGarden.Costume.scale setTo 0.3

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall VeggieGarden.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 3/4 way
addProp energyLevel number 75
prop VeggieGarden.energyLevel setMax 100
prop VeggieGarden.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make VeggieGarden lose energy faster (or slower)
addProp energyUse number 5

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp VeggieGarden.Graphing.meterProp setTo 'energyLevel'

featProp VeggieGarden.Graphing.meterColor setTo 65280

# PROGRAM EVENT


every 1 runAtStart [[

  // decrease energy each tick, using the energyUse varable to determine how much
  ifExpr {{ VeggieGarden.getProp('energyLevel').value > 0 }} [[
    exprPush {{ VeggieGarden.getProp('energyLevel').value - VeggieGarden.getProp('energyUse').value }}
    propPop VeggieGarden.energyLevel
  ]]

  // this code sets the color of the energy bar based on how hungry the VeggieGarden is
  // set VeggieGarden energy meter color
  // doing great
  ifExpr {{ VeggieGarden.getProp('energyLevel').value > 60 }} [[
    // Green
    featProp VeggieGarden.Graphing.meterColor setTo 65280
  ]]
  // needs some energy
  ifExpr {{ VeggieGarden.getProp('energyLevel').value < 60 }} [[
    // Orange
    featProp VeggieGarden.Graphing.meterColor setTo 16737792
  ]]
  // in trouble
  ifExpr {{ VeggieGarden.getProp('energyLevel').value < 30 }} [[
    // Red
    featProp VeggieGarden.Graphing.meterColor setTo 16711680
    // dead
    ifExpr {{ VeggieGarden.getProp('energyLevel').value < 1 }} [[
      featProp VeggieGarden.Costume.currentFrame setTo 2
      prop VeggieGarden.alpha setTo 0.3
    ]]

    // avoid getting too small
    exprPush {{ 0.3 }}
    featPropPop VeggieGarden.Costume.scale

  ]]
]]
every 10 [[
  ifProp VeggieGarden.energyLevel lessThan 1 [[
    featProp VeggieGarden.Costume.glow setTo 1
    prop VeggieGarden.alpha setTo 1
    prop VeggieGarden.energyLevel setTo 55
  ]]
]]


# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time`
    },
    {
      "name": "Clover",
      "scriptText": `# BLUEPRINT Clover
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Clover.Costume.costumeName setTo 'clover.png'

// add other features
addFeature Physics
addFeature Touches

featProp Clover.Costume.scale setTo 0.2

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Clover.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 3/4 way
addProp energyLevel Number 70
prop Clover.energyLevel setMax 100
prop Clover.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make VeggieGarden lose energy faster (or slower)
addProp energyUse Number 5

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Clover.Graphing.meterProp setTo 'energyLevel'

featProp Clover.Graphing.meterColor setTo 65280

# PROGRAM EVENT
every 1 runAtStart [[

  // decrease energy each tick, using the energyUse varable to determine how much
  ifExpr {{ Clover.getProp('energyLevel').value > 0 }} [[
    exprPush {{ Clover.getProp('energyLevel').value - Clover.getProp('energyUse').value }}
    propPop Clover.energyLevel
  ]]

  // this code sets the color of the energy bar based on how hungry the clover is
  // set clover energy meter color
  // doing great
  ifExpr {{ Clover.getProp('energyLevel').value > 60 }} [[
    // Green
    featProp Clover.Graphing.meterColor setTo 65280
  ]]
  // needs some energy
  ifExpr {{ Clover.getProp('energyLevel').value < 60 }} [[
    // Orange
    featProp Clover.Graphing.meterColor setTo 16737792
  ]]
  // in trouble
  ifExpr {{ Clover.getProp('energyLevel').value < 30 }} [[
    // Red
    featProp Clover.Graphing.meterColor setTo 16711680
    // dead
    ifExpr {{ Clover.getProp('energyLevel').value < 1 }} [[
      featProp Clover.Costume.currentFrame setTo 2
      prop Clover.alpha setTo 0.3
    ]]


    // avoid getting too
    exprPush {{ .15 }}
    featPropPop Clover.Costume.scale

  ]]
]]

every 1 [[

  when Clover touches Reincarnator [[
    ifExpr {{ Clover.getProp('alive').value == false }} [[
      featProp Clover.Costume.glow setTo 1
      prop Clover.alive setTo true
      prop Clover.alpha setTo 1
    ]]
  ]]

]]

every 10 [[
  ifProp Clover.energyLevel lessThan 1 [[
    featProp Clover.Costume.glow setTo 1
    prop Clover.alpha setTo 1
    prop Clover.energyLevel setTo 55
  ]]
]]
# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time`
    },
    {
      "name": "Snail",
      "scriptText": `# BLUEPRINT Snail
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Snail.Costume.costumeName setTo 'snail.png'

// add other features
addFeature Physics
addFeature Touches

featProp agent.Costume.scale setTo 0.2

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Snail.Touches monitor 'VeggieGarden' b2b
featCall Snail.Touches monitor 'Clover' b2b
featCall Snail.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Snail.energyLevel setMax 100
prop Snail.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Snail lose energy faster (or slower)
addProp energyUse Number 5

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Snail.Graphing.meterProp setTo 'energyLevel'

featProp Snail.Graphing.meterColor setTo 65280

# PROGRAM EVENT
every 1 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Snail.getProp('energyLevel').value - Snail.getProp('energyUse').value }}
  propPop Snail.energyLevel

  // this code sets the color of the energy bar based on how hungry the Snail is
  // sated
  ifExpr {{ Snail.getProp('energyLevel').value > 50 }} [[
    featProp Snail.Costume.currentFrame setTo 0
    // Green
    featProp Snail.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Snail.getProp('energyLevel').value < 50 }} [[
    featProp Snail.Costume.currentFrame setTo 1
    // Orange
    featProp Snail.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Snail.getProp('energyLevel').value < 20 }} [[
    featProp Snail.Costume.currentFrame setTo 1
    // Red
    featProp Snail.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Snail.getProp('energyLevel').value < 1 }} [[
    featProp Snail.Costume.currentFrame setTo 2
    prop Snail.alpha setTo 0.3
    prop Snail.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Snail.Graphing.meterProp setTo 'energyLevel'

]]
when Snail touches VeggieGarden [[
  every 1 [[
    ifExpr {{ Snail.getProp('alive').value == true &&  VeggieGarden.getProp('alive').value == true }} [[
      featProp Snail.Costume.glow setTo 1
      prop Snail.energyLevel add 10
      prop VeggieGarden.energyLevel sub 10
    ]]
  ]]

  when Snail touches Clover [[
    every 1 [[
      ifExpr {{ Snail.getProp('alive').value == true &&  Clover.getProp('alive').value == true }} [[
        featProp Snail.Costume.glow setTo 1
        prop Snail.energyLevel add 10
        prop Clover.energyLevel sub 10
      ]]
    ]]
  ]]

  when Snail touches Reincarnator [[
    ifExpr {{ Snail.getProp('alive').value == false }} [[
      featProp Snail.Costume.glow setTo 1
      prop Snail.alive setTo true
      prop Snail.alpha setTo 1
    ]]
  ]]

]]

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time`
    },
    {
      "name": "Gopher",
      "scriptText": `# BLUEPRINT Gopher
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Gopher.Costume.costumeName setTo 'gopher.png'

// add other features
addFeature Physics
addFeature Touches

featProp agent.Costume.scale setTo 0.2

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Gopher.Touches monitor 'VeggieGarden' b2b
featCall Gopher.Touches monitor 'Clover' b2b
featCall Gopher.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Gopher.energyLevel setMax 100
prop Gopher.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Gopher lose energy faster (or slower)
addProp energyUse Number 5

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Gopher.Graphing.meterProp setTo 'energyLevel'

featProp Gopher.Graphing.meterColor setTo 65280
# PROGRAM EVENT
every 1 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Gopher.getProp('energyLevel').value - Gopher.getProp('energyUse').value }}
  propPop Gopher.energyLevel

  // this code sets the color of the energy bar based on how hungry the Gopher is
  // sated
  ifExpr {{ Gopher.getProp('energyLevel').value > 50 }} [[
    featProp Gopher.Costume.currentFrame setTo 0
    // Green
    featProp Gopher.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Gopher.getProp('energyLevel').value < 50 }} [[
    featProp Gopher.Costume.currentFrame setTo 1
    // Orange
    featProp Gopher.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Gopher.getProp('energyLevel').value < 20 }} [[
    featProp Gopher.Costume.currentFrame setTo 1
    // Red
    featProp Gopher.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Gopher.getProp('energyLevel').value < 1 }} [[
    featProp Gopher.Costume.currentFrame setTo 2
    prop Gopher.alpha setTo 0.3
    prop Gopher.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Gopher.Graphing.meterProp setTo 'energyLevel'

]]
when Gopher touches VeggieGarden [[
  every 1 [[
    ifExpr {{ Gopher.getProp('alive').value == true &&  VeggieGarden.getProp('alive').value == true }} [[
      featProp Gopher.Costume.glow setTo 1
      prop Gopher.energyLevel add 10
      prop VeggieGarden.energyLevel sub 10
    ]]
  ]]

  when Gopher touches Clover [[
    every 1 runAtStart [[
      ifExpr {{ Gopher.getProp('alive').value == true &&  Clover.getProp('alive').value == true }} [[
        featProp Gopher.Costume.glow setTo 1
        prop Gopher.energyLevel add 10
        prop Clover.energyLevel sub 10
      ]]
    ]]
  ]]

  when Gopher touches Reincarnator [[
    ifExpr {{ Gopher.getProp('alive').value == false }} [[
      featProp Gopher.Costume.glow setTo 1
      prop Gopher.alive setTo true
      prop Gopher.alpha setTo 1
    ]]
  ]]

]]

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time`
    },
    {
      "name": "Caterpillar",
      "scriptText": `# BLUEPRINT Caterpillar
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Caterpillar.Costume.costumeName setTo 'caterpillar.png'

// add other features
addFeature Physics
addFeature Touches

featProp agent.Costume.scale setTo 0.1

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Caterpillar.Touches monitor 'VeggieGarden' b2b
featCall Caterpillar.Touches monitor 'Reincarnator' b2b

// setup to track energy and begin at 1/2 way
addProp energyLevel Number 50
prop Caterpillar.energyLevel setMax 100
prop Caterpillar.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Caterpillar lose energy faster (or slower)
addProp energyUse Number 5

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature Graphing
featProp Caterpillar.Graphing.meterProp setTo 'energyLevel'

featProp Caterpillar.Graphing.meterColor setTo 65280

# PROGRAM EVENT
every 1 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Caterpillar.getProp('energyLevel').value - Caterpillar.getProp('energyUse').value }}
  propPop Caterpillar.energyLevel

  // this code sets the color of the energy bar based on how hungry the Caterpillar is
  // sated
  ifExpr {{ Caterpillar.getProp('energyLevel').value > 50 }} [[
    featProp Caterpillar.Costume.currentFrame setTo 0
    // Green
    featProp Caterpillar.Graphing.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Caterpillar.getProp('energyLevel').value < 50 }} [[
    featProp Caterpillar.Costume.currentFrame setTo 1
    // Orange
    featProp Caterpillar.Graphing.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Caterpillar.getProp('energyLevel').value < 20 }} [[
    featProp Caterpillar.Costume.currentFrame setTo 1
    // Red
    featProp Caterpillar.Graphing.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Caterpillar.getProp('energyLevel').value < 1 }} [[
    featProp Caterpillar.Costume.currentFrame setTo 2
    prop Caterpillar.alpha setTo 0.3
    prop Caterpillar.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Caterpillar.Graphing.meterProp setTo 'energyLevel'

]]
when Caterpillar touches VeggieGarden [[
  every 1 [[
    ifExpr {{ Caterpillar.getProp('alive').value == true &&  VeggieGarden.getProp('alive').value == true }} [[
      featProp Caterpillar.Costume.glow setTo 1
      prop Caterpillar.energyLevel add 10
      prop VeggieGarden.energyLevel sub 10
    ]]
  ]]


  when Caterpillar touches Reincarnator [[
    ifExpr {{ Caterpillar.getProp('alive').value == false }} [[
      featProp Caterpillar.Costume.glow setTo 1
      prop Caterpillar.alive setTo true
      prop Caterpillar.alpha setTo 1
    ]]
  ]]

]]

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time`
    },
    {
      "name": "Beetle",
      "scriptText": `# BLUEPRINT Beetle
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
// add the Caterpillar we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Beetle.Costume.costumeName setTo 'beetle.png'

// add other features
addFeature Physics
addFeature Touches

featProp agent.Costume.scale setTo 0.3

featProp Beetle.Movement.compassDirection setTo 'north'
featProp Beetle.Movement.movementType setTo 'wander'
featProp Beetle.Movement.distance setTo 3
featProp Beetle.Movement.targetY setMax 0.7

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Beetle.Touches monitor 'Caterpillar' b2b
featCall Beetle.Touches monitor 'Snail' b2b
featCall Beetle.Touches monitor 'Reincarnator' b2b


# PROGRAM EVENT

every 1 [[
  when Beetle touches Caterpillar [[
    ifExpr {{ Beetle.getProp('alive').value == true &&  Caterpillar.getProp('alive').value == true }} [[
      featProp Beetle.Costume.glow setTo 1
      prop Caterpillar.alive setTo false
      prop Caterpillar.alpha setTo 0.3
    ]]
  ]]

  every 1 [[
    when Beetle touches Snail [[
      ifExpr {{ Beetle.getProp('alive').value == true &&  Snail.getProp('alive').value == true }} [[
        featProp Beetle.Costume.glow setTo 1
        prop Snail.alive setTo false
        prop Snail.alpha setTo 0.3
      ]]
    ]]
  ]]

  when Beetle touches Reincarnator [[
    ifExpr {{ Beetle.getProp('alive').value == false }} [[
      featProp Beetle.Costume.glow setTo 1
      prop Beetle.alive setTo true
      prop Beetle.alpha setTo 1
    ]]
  ]]

]]

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time`
    },
    {
      "name": "Robin",
      "scriptText": `# BLUEPRINT Robin
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
// add the Caterpillar we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Robin.Costume.costumeName setTo 'food-web_robin.png'

// add other features
addFeature Physics
addFeature Touches

featProp Robin.Costume.scale setTo 0.2

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Robin.Touches monitor 'Caterpillar' b2b
featCall Robin.Touches monitor 'Snail' b2b
featCall Robin.Touches monitor 'Beetle' b2b
featCall Robin.Touches monitor 'Reincarnator' b2b


# PROGRAM EVENT

every 1 [[
  when Robin touches Caterpillar [[
    ifExpr {{ Robin.getProp('alive').value == true &&  Caterpillar.getProp('alive').value == true }} [[
      featProp Robin.Costume.glow setTo 1
      prop Caterpillar.alive setTo false
      prop Caterpillar.alpha setTo 0.3
    ]]
  ]]

  every 1 [[
    when Robin touches Snail [[
      ifExpr {{ Robin.getProp('alive').value == true &&  Snail.getProp('alive').value == true }} [[
        featProp Robin.Costume.glow setTo 1
        prop Snail.alive setTo false
        prop Snail.alpha setTo 0.3
      ]]
    ]]
  ]]

  every 1 [[
    when Robin touches Beetle [[
      ifExpr {{ Robin.getProp('alive').value == true &&  Beetle.getProp('alive').value == true }} [[
        featProp Robin.Costume.glow setTo 1
        prop Beetle.alive setTo false
        prop Beetle.alpha setTo 0.3
      ]]
    ]]
  ]]

  when Robin touches Reincarnator [[
    ifExpr {{ Robin.getProp('alive').value == false }} [[
      featProp Robin.Costume.glow setTo 1
      prop Robin.alive setTo true
      prop Robin.alpha setTo 1
    ]]
  ]]

]]

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time`
    },
    {
      "name": "Hawk",
      "scriptText": `# BLUEPRINT Hawk
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Hawk.Costume.costumeName setTo 'Hawk_foodweb.png'

// add other features
addFeature Physics
addFeature Touches

featProp Hawk.Costume.scale setTo 0.15

featProp Hawk.Movement.compassDirection setTo 'west'
featProp Hawk.Movement.movementType setTo 'wander'
featProp Hawk.Movement.distance setTo 5
featCall Hawk.Movement setRandomDirection

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Hawk.Touches monitor 'Snake' b2b
featCall Hawk.Touches monitor 'Robin' b2b
featCall Hawk.Touches monitor 'Mouse' b2b
featCall Hawk.Touches monitor 'Gopher' b2b
featCall Hawk.Touches monitor 'Rabbit' b2b
featCall Hawk.Touches monitor 'Reincarnator' b2b


# PROGRAM EVENT

every 1 [[
  when Hawk touches Snake [[
    ifExpr {{ Hawk.getProp('alive').value == true &&  Snake.getProp('alive').value == true }} [[
      featProp Hawk.Costume.glow setTo 1
      prop Snake.alive setTo false
      prop Snake.alpha setTo 0.3
    ]]
  ]]

  every 1 [[
    when Hawk touches Robin [[
      ifExpr {{ Hawk.getProp('alive').value == true &&  Robin.getProp('alive').value == true }} [[
        featProp Hawk.Costume.glow setTo 1
        prop Robin.alive setTo false
        prop Robin.alpha setTo 0.3
      ]]
    ]]
  ]]

  every 1 [[
    when Hawk touches Mouse [[
      ifExpr {{ Hawk.getProp('alive').value == true &&  Mouse.getProp('alive').value == true }} [[
        featProp Hawk.Costume.glow setTo 1
        prop Mouse.alive setTo false
        prop Mouse.alpha setTo 0.3
      ]]
    ]]
  ]]

  every 1 [[
    when Hawk touches Gopher [[
      ifExpr {{ Hawk.getProp('alive').value == true &&  Gopher.getProp('alive').value == true }} [[
        featProp Hawk.Costume.glow setTo 1
        prop Gopher.alive setTo false
        prop Gopher.alpha setTo 0.3
      ]]
    ]]
  ]]

 every 1 [[
    when Hawk touches Rabbit [[
      ifExpr {{ Hawk.getProp('alive').value == true &&  Rabbit.getProp('alive').value == true }} [[
        featProp Hawk.Costume.glow setTo 1
        prop Rabbit.alive setTo false
        prop Rabbit.alpha setTo 0.3
      ]]
    ]]
  ]]
  
  when Hawk touches Reincarnator [[
    ifExpr {{ Hawk.getProp('alive').value == false }} [[
      featProp Hawk.Costume.glow setTo 1
      prop Hawk.alive setTo true
      prop Hawk.alpha setTo 1
    ]]
  ]]

]]

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time`
    },
    {
      "name": "Rabbit",
      "scriptText": `# BLUEPRINT Rabbit
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
// add the features we are likely to use
addFeature Movement
addFeature Costume
addFeature Cursor

// set the costume
featProp Rabbit.Costume.costumeName setTo 'web_brown-rabbit.png'

// add other features
addFeature Physics
addFeature Touches

featProp agent.Costume.scale setTo 0.2

addProp alive Boolean true

// make sure we track interactions with the other creatures
featCall Rabbit.Touches monitor 'VeggieGarden' b2b
featCall Rabbit.Touches monitor 'Clover' b2b
featCall Rabbit.Touches monitor 'Reincarnator' b2b


# PROGRAM EVENT

every 1 [[
  when Rabbit touches VeggieGarden [[
    ifExpr {{ Rabbit.getProp('alive').value == true &&  VeggieGarden.getProp('alive').value == true }} [[
      featProp Rabbit.Costume.glow setTo 1
      prop VeggieGarden.alive setTo false
      prop VeggieGarden.alpha setTo 0.3
    ]]
  ]]

every 1 [[
  when Rabbit touches Clover [[
    ifExpr {{ Rabbit.getProp('alive').value == true &&  Clover.getProp('alive').value == true }} [[
      featProp Rabbit.Costume.glow setTo 1
      prop Clover.alive setTo false
      prop Clover.alpha setTo 0.3
    ]]
  ]]
  ]]

  when Rabbit touches Reincarnator [[
    ifExpr {{ Rabbit.getProp('alive').value == false }} [[
      featProp Rabbit.Costume.glow setTo 1
      prop Rabbit.alive setTo true
      prop Rabbit.alpha setTo 1
    ]]
  ]]

]]

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time

`
    },
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# PROGRAM INIT
addFeature Population
prop global.visible setTo false`
    }
  ],
  "instances": [
    {
      "id": "13",
      "label": "Background13",
      "bpid": "Background",
      "initScript": `prop x setTo -0.99
prop y setTo -3.57`
    },
    {
      "id": "17",
      "label": "VeggieGarden17",
      "bpid": "VeggieGarden",
      "initScript": `prop x setTo -302.86
prop y setTo 287.80`
    },
    {
      "id": "18",
      "label": "VeggieGarden18",
      "bpid": "VeggieGarden",
      "initScript": `prop x setTo -210.44
prop y setTo 166.24`
    },
    {
      "id": "19",
      "label": "VeggieGarden19",
      "bpid": "VeggieGarden",
      "initScript": `prop x setTo 316.68
prop y setTo 278.08`
    },
    {
      "id": "20",
      "label": "VeggieGarden20",
      "bpid": "VeggieGarden",
      "initScript": `prop x setTo 133.04
prop y setTo 270.88`
    },
    {
      "id": "21",
      "label": "VeggieGarden21",
      "bpid": "VeggieGarden",
      "initScript": `prop x setTo 9.16
prop y setTo 159.93`
    },
    {
      "id": "22",
      "label": "VeggieGarden22",
      "bpid": "VeggieGarden",
      "initScript": `prop x setTo -88.43
prop y setTo 293.54`
    },
    {
      "id": "23",
      "label": "VeggieGarden23",
      "bpid": "VeggieGarden",
      "initScript": `prop x setTo 252.28
prop y setTo 150.70`
    },
    {
      "id": "24",
      "label": "Clover24",
      "bpid": "Clover",
      "initScript": `prop x setTo 57.99
prop y setTo -158.59`
    },
    {
      "id": "25",
      "label": "Clover25",
      "bpid": "Clover",
      "initScript": `prop x setTo 311.55
prop y setTo -277.21`
    },
    {
      "id": "26",
      "label": "Clover26",
      "bpid": "Clover",
      "initScript": `prop x setTo -318.20
prop y setTo -119.97`
    },
    {
      "id": "27",
      "label": "Clover27",
      "bpid": "Clover",
      "initScript": `prop x setTo -113.57
prop y setTo -290.25`
    },
    {
      "id": "41",
      "label": "Beetle41",
      "bpid": "Beetle",
      "initScript": `prop x setTo 353.35
prop y setTo 100.35`
    },
    {
      "id": "42",
      "label": "Beetle42",
      "bpid": "Beetle",
      "initScript": `prop x setTo 132.47
prop y setTo 98.95`
    },
    {
      "id": "45",
      "label": "Hawk45",
      "bpid": "Hawk",
      "initScript": `prop x setTo 191.32
prop y setTo -321.48`
    },
    {
      "id": "50",
      "label": "Beetle50",
      "bpid": "Beetle",
      "initScript": `prop x setTo -348.98
prop y setTo 182.61`
    },
    {
      "id": "51",
      "label": "Mouse51",
      "bpid": "Mouse",
      "initScript": `prop x setTo -179.98
prop y setTo -65.97`
    },
    {
      "id": "52",
      "label": "Mouse52",
      "bpid": "Mouse",
      "initScript": `prop x setTo 4.63
prop y setTo 68.91`
    },
    {
      "id": "53",
      "label": "Mouse53",
      "bpid": "Mouse",
      "initScript": `prop x setTo -332.46
prop y setTo 78.91`
    },
    {
      "id": "54",
      "label": "Gopher54",
      "bpid": "Gopher",
      "initScript": `prop x setTo -208.52
prop y setTo -224.26`
    },
    {
      "id": "55",
      "label": "Snail55",
      "bpid": "Snail",
      "initScript": `prop x setTo -267.04
prop y setTo -357.07`
    },
    {
      "id": "56",
      "label": "Caterpillar56",
      "bpid": "Caterpillar",
      "initScript": `prop x setTo -334.58
prop y setTo -289.19`
    }
  ]
}