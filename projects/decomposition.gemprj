{
  "id": "decomposition",
  "label": "Decomposition",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": "0x98f5ff",
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [],
  "blueprints": [
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT

// Explanation:
// This model involves learners repreesenting bunnies or worms in an ecosystem (ADD MORE)

prop global.visible setTo false


// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Soil",
      "scriptText": `# BLUEPRINT Soil
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature Costume
featProp Soil.Costume.costumeName setTo 'dirt.png'

addProp nutrients number 50
prop Soil.nutrients setMax 100
prop Soil.nutrients setMin 0

addProp sparkleCount number 0

addFeature Physics

featProp Soil.Costume.scale setTo 0.85

prop Soil.zIndex setTo -200

addFeature Touches
featCall Soil.Touches monitor 'Worm' b2b

addFeature Graphing
// STUDENTS_MAY_CHANGE - to pick a different thing to display on the meter (note, color won't change below)
featProp Soil.Graphing.meterProp setTo 'nutrients'

featCall Soil.Graphing setMeterPosition 'inside-left'
// violet
featProp Soil.Graphing.meterColor setTo 9055202
featProp Soil.Graphing.text setTo ''

# PROGRAM UPDATE

every 1 runAtStart [[
  ifExpr {{ Soil.getProp('sparkleCount').value > 0 }} [[
    prop Soil.sparkleCount sub 1
    featProp Soil.Costume.costumeName setTo 'dirt_sparkly.png'

  ]]
  ifExpr {{ Soil.getProp('sparkleCount').value == 0 }} [[
    featProp Soil.Costume.costumeName setTo 'dirt.png'

  ]]
]]
`
    },
    {
      "name": "Sunbeam",
      "scriptText": `# BLUEPRINT Sunbeam
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature Costume
featProp Sunbeam.Costume.costumeName setTo 'sunbeam.png'

featCall Sunbeam.Costume setColorize 1 1 0
prop Sunbeam.alpha setTo 0.3
// prop zIndex setTo 100

// STUDENTS_MAY_CHANGE - to set the speed of the sunbeam
addProp speed number 20
// STUDENTS_MAY_CHANGE - to set the amount of energy the sunbeam gives to algae
addProp energyRate number 5
// STUDENTS_MAY_CHANGE - to set which direction the sunbeam moves (right: 1, left: -1)
addProp direction number 1

addFeature Physics

// STUDENTS_MAY_CHANGE - how wide the sunbeam is
featProp Sunbeam.Costume.scale setTo 1
// STUDENTS_MAY_CHANGE - how tall the sunbeam is
featProp Sunbeam.Costume.scaleY setTo 2.5

addFeature Touches
// default position for moving across the top
prop Sunbeam.x setTo -400
prop Sunbeam.y setTo -180

# PROGRAM EVENT
onEvent Tick [[
  exprPush {{ Sunbeam.x + Sunbeam.getProp('direction').value * (Sunbeam.getProp('speed').value); }}
  propPop Sunbeam.x

  ifExpr {{ ((Sunbeam.getProp('direction').value == 1) && (Sunbeam.x > 400)) || ((Sunbeam.getProp('direction').value == -1) && (Sunbeam.x < -400)) }} [[
    exprPush {{ 400 * Sunbeam.getProp('direction').value * -1 }}
    propPop Sunbeam.x
  ]]
]]

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Rock",
      "scriptText": `# BLUEPRINT Rock
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature Costume
featProp Rock.Costume.costumeName setTo 'boulder.json'

addFeature Physics
addFeature Graphing
featProp Rock.Costume.scale setTo 0.5

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "House",
      "scriptText": `# BLUEPRINT House
# PROGRAM INIT
addFeature Costume
featProp House.Costume.costumeName setTo 'house.json'


addFeature Physics
addFeature Graphing

featProp House.Costume.scale setTo 2`
    },
    {
      "name": "SoilBG",
      "scriptText": `# BLUEPRINT SoilBG
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature Costume
featProp SoilBG.Costume.costumeName setTo 'square.json'

featCall SoilBG.Costume setColorize 0.56 0.52 0.4
addFeature Physics
featProp SoilBG.Costume.width setTo 800
featProp SoilBG.Costume.height setTo 400
prop SoilBG.zIndex setTo -210

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Worm",
      "scriptText": `# BLUEPRINT Worm
# TAG isCharControllable true
# TAG isPozyxControllable true
# TAG isPTrackControllable false
# PROGRAM INIT

addFeature Movement

// addFeature Cursor
addFeature Costume
featProp Worm.Costume.costumeName setTo 'worm_hungry.png'

// put above everything
prop Worm.zIndex setTo 100

// move between hungry and full where hungry will eat and full will release nutrients
addProp feeling string 'hungry'

// used internally to delay nutrient release when full
addProp nutrientCountStart number 0

// STUDENTS_MAY_CHANGE set this lower for instant dispersal of nutrients, or higher to stretch it out
prop Worm.nutrientCountStart setTo 5
addProp nutrientCount number 0

// featProp Movement useAutoOrientation setTo true

addProp energyLevel number 50
prop Worm.energyLevel setMax 100
prop Worm.energyLevel setMin 0

addProp matter number 50
prop Worm.matter setMax 100
prop Worm.matter setMin 0

addFeature Physics
featProp Worm.Costume.scale setTo 0.2

addFeature Touches
featCall Worm.Touches monitor 'Waste' b2b
featCall Worm.Touches monitor 'Soil' b2b

addFeature Graphing
// STUDENTS_MAY_CHANGE - to pick a different thing to display on the meter (note, color won't change below)
featProp Worm.Graphing.meterProp setTo 'energyLevel'

// Green = 0x00FF00
featProp Worm.Graphing.meterColor setTo 85280

// ----------------------------------------------
// add variables to cover distraction
// ----------------------------------------------
// counter - increment when hungry or distracted
addProp distractionCounter number 0
// how long a distraction lasts (0 will skip it)
addProp distractionLength number 2
// how long the focus lasts, during hunger, before we switch to distraction
addProp focusLength number 5

# PROGRAM UPDATE

ifExpr {{ Worm.prop.Movement.compassDirection.value === 'E' }} [[
  featProp Worm.Costume.flipX setTo false
]]
ifExpr {{ Worm.prop.Movement.compassDirection.value === 'W' }} [[
  featProp Worm.Costume.flipX setTo true
]]

when Worm touches Waste [[
  every 1 runAtStart [[

    // if hungry, eat
    ifExpr {{ Worm.getProp('feeling').value == 'hungry' }} [[

      // not distracted so keep going

      // move energy and matter from the waste to the worm and glow so we notice
      // STUDENTS_MAY_CHANGE - if you want the worms to eat more or less each second change these numbers
      // waste loses matter
      prop Waste.matter sub 10
      // worms gain energy and matter
      prop Worm.energyLevel add 10
      prop Worm.matter add 10
      // worm glowss so we know it is eating
      featProp Worm.Costume.glow setTo 4

      // if you are nice and full of energy, note you are full and start poop count-down
      ifExpr {{ Worm.getProp('energyLevel').value > 90 }} [[
        prop Worm.feeling setTo 'full'

        // set the glow to 0 to reflect not eating while full
        featProp Worm.Costume.glow setTo 0

        // change costume so we know we are full
        featProp Worm.Costume.costumeName setTo 'worm_full.png'

        exprPush {{ Worm.getProp('nutrientCountStart').value }}
        propPop Worm.nutrientCount
      ]]

    ]]
  ]]
]]

when Worm lastTouches Waste [[
  featProp Worm.Costume.glow setTo 0
]]

when Worm touches Soil [[
  every 1 runAtStart [[

    // if you are full, check if enough time has passed to release nutrients... do so and then switch to being hungry again
    // if not, just update counter
    ifExpr {{ Worm.getProp('feeling').value == 'full' }} [[
      ifExpr {{ Worm.getProp('nutrientCount').value == 0 }} [[
        prop Worm.energyLevel sub 50
        prop Worm.matter sub 50
        prop Soil.nutrients add 50
        featProp Soil.Costume.glow setTo 1
        prop Soil.sparkleCount setTo 3
        featProp Soil.Costume.costumeName setTo 'dirt.png'
        //featProp Soil.Costume.currentFrame setTo 1
        dbgOut 'do something here?'

        prop Worm.feeling setTo 'hungry'
        // revert costume now that we are hungry again
        featProp Worm.Costume.costumeName setTo 'worm.png'

      ]]
      ifExpr {{ Worm.getProp('nutrientCount').value > 0 }} [[
        prop Worm.nutrientCount sub 1
      ]]
    ]]
  ]]
]]
every 1 runAtStart [[
  // energy goes down
  prop Worm.energyLevel sub 2

  // increment distraction counter
  prop Worm.distractionCounter add 1

  // if you are hungry, and hit focus length, switch to distracted.
  ifExpr {{ Worm.getProp('feeling').value == 'hungry' }} [[
    ifExpr {{ Worm.getProp('distractionCounter').value >= Worm.getProp('focusLength').value }} [[

      // we are now distracted so don't bother eating
      prop Worm.feeling setTo 'distracted'
      featProp Worm.Costume.costumeName setTo 'worm_distracted.png'

      // in case we were eating
      featProp Worm.Costume.glow setTo 0

      prop Worm.distractionCounter setTo 0
    ]]
  ]]

  // if you are distracted, and hit distracted length length, switch to hungry.
  ifExpr {{ Worm.getProp('feeling').value == 'distracted' }} [[
    ifExpr {{ Worm.getProp('distractionCounter').value >= Worm.getProp('distractionLength').value }} [[

      // we are now distracted so don't bother eating
      prop Worm.feeling setTo 'hungry'
      featProp Worm.Costume.costumeName setTo 'worm_hungry.png'

      prop Worm.distractionCounter setTo 0
    ]]
  ]]

  // if out of energy ... die
  ifExpr {{ Worm.getProp('energyLevel').value == 0 }} [[
    prop Worm.alpha setTo 0.3
    prop Worm.isInert setTo true
  ]]


  //ifExpr {{ Worm.prop.Movement.compassDirection.value === 'E' }} [[
  //  featProp Worm.Costume.flipY setTo false
  //]]
  //ifExpr {{ Worm.prop.Movement.compassDirection.value === 'W' }} [[
  //  featProp Worm.Costume.flipY setTo true
  //]]
]]

// required directive
# PROGRAM INIT`
    },
    {
      "name": "Bunny",
      "scriptText": `# BLUEPRINT Bunny
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM INIT

addFeature Population
addFeature Costume
addFeature Movement
// addFeature Cursor

featProp Bunny.Costume.costumeName setTo 'bunny.png'

// set bunny energy
addProp energyLevel number 25
prop Bunny.energyLevel setMax 50
prop Bunny.energyLevel setMin 0

// to manage when it is full and releases waste
addProp feeling string 'hungry'

// used internally to delay waste release when full
addProp wasteCountStart number 0

// STUDENTS_MAY_CHANGE set this lower for instant dispersal of waste, or higher to stretch it out
prop Bunny.wasteCountStart setTo 3
addProp wasteCount number 0

addProp matter number 50

prop Bunny.matter setMax 50
prop Bunny.matter setMin 0

addFeature Physics

featProp Bunny.Costume.scale setTo 0.8

addFeature Touches
featCall Bunny.Touches monitor 'Plant' b2b
featCall Bunny.Touches monitor 'Tomato' b2b

addFeature Graphing
// STUDENTS_MAY_CHANGE - to pick a different thing to display on the meter (note, color won't change below)
featProp Bunny.Graphing.meterProp setTo 'energyLevel'
// Green = 0x00FF00
featProp Bunny.Graphing.meterColor setTo 65280
featCall Bunny.Graphing setMeterPosition 'inside-left'

prop Bunny.zIndex setTo 110

// ----------------------------------------------
// add variables to cover distraction
// ----------------------------------------------
// counter - increment when hungry or distracted
addProp distractionCounter number 0
// how long a distraction lasts (0 will skip it)
addProp distractionLength number 2
// how long the focus lasts, during hunger, before we switch to distraction
addProp focusLength number 5

# PROGRAM UPDATE

ifExpr {{ Bunny.prop.Movement.compassDirection.value === 'E' }} [[
  featProp Bunny.Costume.flipX setTo false
]]
ifExpr {{ Bunny.prop.Movement.compassDirection.value === 'W' }} [[
  featProp Bunny.Costume.flipX setTo true
]]

ifExpr {{ Bunny.prop.Movement.compassDirection.value === 'S' }} [[
\tfeatProp Bunny.Costume.costumeName setTo 'bunny_front.png'
]]

ifExpr {{ Bunny.prop.Movement.compassDirection.value === 'N' }} [[
\tfeatProp Bunny.Costume.costumeName setTo 'bunny_back.png'
]]

when Bunny touches Plant [[
  every 1 runAtStart [[

    // if hungry, eat
    ifExpr {{ Bunny.getProp('feeling').value == 'hungry' }} [[

      // STUDENTS_MAY_CHANGE - switching these numbers models different speeds of how bunnies eat the plants
      // Plant matter goes down as it is eaten, as does Plant energy
      prop Plant.matter sub 10
      prop Plant.energyLevel sub 10
      // Bunny matter and energy go up from eating
      prop Bunny.matter add 20
      prop Bunny.energyLevel add 20
      featProp Bunny.Costume.glow setTo 4

      // if full, change costume and set timer to emit waste
      ifProp Bunny.energyLevel greaterThan  45  [[
     //   featProp Bunny.Costume.costumeName setTo 'bunny_full.png'

        // set variables to be full and prepare to release waste
        prop Bunny.feeling setTo 'full'
        exprPush {{ Bunny.getProp('wasteCountStart').value }}
        propPop Bunny.wasteCount
        featProp Bunny.Costume.glow setTo 0
      ]]
    ]]
  ]]
]]

when Bunny lastTouches Plant [[
  featProp Bunny.Costume.glow setTo 0
]]

//when Bunny touches Tomato eat it
when Bunny touches Tomato [[
  every 1 runAtStart [[

    // if hungry, eat
    //ifExpr {{ Bunny.getProp('feeling').value == 'hungry' }} [[

      // STUDENTS_MAY_CHANGE - switching these numbers models different speeds of how bunnies eat the plants
      // Tomato matter goes down as it is eaten, as does Plant energy
      //prop Tomato.matter sub 1
      prop Tomato.energyLevel sub 5
      // Bunny matter and energy go up from eating
      prop Bunny.matter add 1
      prop Bunny.energyLevel add 1
      featProp Bunny.Costume.glow setTo 4

      // if full, change costume and set timer to emit waste
      //ifProp Bunny.energyLevel greaterThan  45  [[
      //  featProp Bunny.Costume.costumeName setTo 'bunny_full.png'

        // set variables to be full and prepare to release waste
        //prop Bunny.feeling setTo 'full'
        //exprPush {{ Bunny.getProp('wasteCountStart').value }}
        //propPop Bunny.wasteCount
        //featProp Bunny.Costume.glow setTo 0
      //]]
   // ]]
  ]]
]]

when Bunny lastTouches Tomato [[
  featProp Bunny.Costume.glow setTo 0
]]


every 1 runAtStart [[

  // increment distraction counter
  prop Bunny.distractionCounter add 1

  // if you are hungry, and hit focus length, switch to distracted.
  ifExpr {{ Bunny.getProp('feeling').value == 'hungry' }} [[
    ifExpr {{ Bunny.getProp('distractionCounter').value >= Bunny.getProp('focusLength').value }} [[

      // we are now distracted so don't bother eating
      prop Bunny.feeling setTo 'distracted'
     // featProp Bunny.Costume.costumeName setTo 'bunny_distracted.png'
      prop Bunny.distractionCounter setTo 0

      // in case we were eating
      featProp Bunny.Costume.glow setTo 0

    ]]
  ]]

  // if you are distracted, and hit distracted length length, switch to hungry.
  ifExpr {{ Bunny.getProp('feeling').value == 'distracted' }} [[
    ifExpr {{ Bunny.getProp('distractionCounter').value >= Bunny.getProp('distractionLength').value }} [[

      // we are now distracted so don't bother eating
      prop Bunny.feeling setTo 'hungry'
     // featProp Bunny.Costume.costumeName setTo 'bunny_hungry.png'
      prop Bunny.distractionCounter setTo 0
    ]]
  ]]

  ifExpr {{ Bunny.getProp('feeling').value == 'full' }} [[
    ifExpr {{ Bunny.getProp('wasteCount').value == 0 }} [[

      // STUDENTS_MAY_CHANGE - switching these numbers will change how bunnies produce waste
      prop Bunny.energyLevel sub 20
      prop Bunny.matter sub 20
      prop Bunny.feeling setTo 'hungry'
      // featProp Bunny.Costume.costumeName setTo 'bunny_hungry.png'
      prop Bunny.distractionCounter setTo 0

      featCall Bunny.Population createAgent Waste [[
        // STUDENTS_MAY_CHANGE - switching these numbers changes where the waste appears and how much matter it starts with
        prop Waste.x addRndInt -20 20
        prop Waste.y addRndInt 50 150
        prop Waste.matter setTo 40
      ]]
    ]]

    ifExpr {{ Bunny.getProp('wasteCount').value > 0 }} [[
      prop Bunny.wasteCount sub 1
    ]]
  ]]

  // use some energy from just livin / running around
  prop Bunny.energyLevel sub 1

  // if out of energy ... die
  ifExpr {{ Bunny.getProp('energyLevel').value == 0 }} [[
    prop Bunny.alpha setTo 0.3
    prop Bunny.isInert setTo true
  ]]

]]

// required directive
# PROGRAM INIT`
    },
    {
      "name": "Plant",
      "scriptText": `# BLUEPRINT Plant
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature Costume
featProp Plant.Costume.costumeName setTo 'plant_healthy.png'

addFeature Population

addProp energyLevel number 50

// STUDENTS_MAY_CHANGE - set a different starting eneregy level, max or min (or make it random)
prop Plant.energyLevel setTo 40
prop Plant.energyLevel setMax 50
prop Plant.energyLevel setMin 0

// setup so that we can tweak the size more dynamically, and plant by plant
addProp minimumScale number 0

// STUDENTS_MAY_CHANGE - set a different minimum size for the plants  (used to be 0.25)
prop Plant.minimumScale setTo 0
prop Plant.minimumScale setMax 0.5
prop Plant.minimumScale setMin -0.5

addProp nutrients number 8

// STUDENTS_MAY_CHANGE - sete a different starting eneregy level, max or min?  A higher max will allow a lot more time before the plant looks bad
prop Plant.nutrients setTo 8
prop Plant.nutrients setMax 10
prop Plant.nutrients setMin 0

addProp matter number 50

// STUDENTS_MAY_CHANGE - sete a different range or starting point of matter
prop Plant.matter setTo 35
prop Plant.matter setMax 50
prop Plant.matter setMin 0

prop Plant.zIndex setTo -110

addFeature Physics
addFeature Touches
featCall Plant.Touches monitor 'Sunbeam' b2b
featCall Plant.Touches monitor 'Soil' b2b
featCall Plant.Touches monitor 'Bunny' b2b

addFeature Graphing
// STUDENTS_MAY_CHANGE - to pick a different thing to display on the meter (note, color won't change below)
featProp Plant.Graphing.meterProp setTo 'energyLevel'
// Green
featProp Plant.Graphing.meterColor setTo 65280

featProp Plant.Graphing.text setTo ''

// always keep it right near the edge of the dirt, but give some variability
prop Plant.y setTo -50
prop Plant.y addRnd -10 10

// set size based on matter (assume matter max of 100) and that we waver between 80-100%
exprPush {{ Plant.getProp('minimumScale').value + Plant.getProp('matter').value / 100 }}
featPropPop Plant.Costume.scale

# PROGRAM UPDATE

when Plant touches Sunbeam [[
  every 1 runAtStart [[
    prop Plant.energyLevel add 1
    prop Plant.matter add 1
    featProp Plant.Costume.glow setTo 4
  ]]
]]

when Plant lastTouches Sunbeam [[
  featProp Plant.Costume.glow setTo 0
]]

when Plant touches Soil [[
  every 1 runAtStart [[
    ifExpr {{ Soil.getProp('nutrients').value > 0 }} [[
      prop Soil.nutrients sub 1
      prop Plant.nutrients add 1
    ]]
  ]]
]]

every 1 runAtStart [[

  // set size based on matter (assume matter max of 100) and that we waver between 80-100%
  exprPush {{ Plant.getProp('minimumScale').value + Plant.getProp('matter').value / 100 }}
  featPropPop Plant.Costume.scale

  // if the plant is basically dead
  ifExpr {{ Plant.getProp('matter').value < 10 }} [[

    // create a little bit of inorganic matter
    featCall Plant.Population createAgent Waste [[
      // STUDENTS_MAY_CHANGE - switching these numbers changes where the waste appears and how much matter it starts with
      prop Waste.x addRndInt -5 5
      prop Waste.y addRndInt 50 100
      prop Waste.matter setTo 20
    ]]

    // then remove the plant
    featCall Plant.Population removeAgent
  ]]


  // is it healthy?  Use some nutrients and then set color
  prop Plant.nutrients sub 1
  ifExpr {{ Plant.getProp('nutrients').value > 6 }} [[
    // healthy
    featProp Plant.Costume.costumeName setTo 'plant_healthy.png'
  ]]
  ifExpr {{ Plant.getProp('nutrients').value < 6 }} [[
    // ok, but not great
    featProp Plant.Costume.costumeName setTo 'plant_mediumhealth.png'
  ]]
  ifExpr {{ Plant.getProp('nutrients').value < 2 }} [[
    // not doing well at all, so lets also lose some matter
    featProp Plant.Costume.costumeName setTo 'plant_dead.png'
    prop Plant.matter sub 1
  ]]
]]`
    },
    {
      "name": "Waste",
      "scriptText": `# BLUEPRINT Waste
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature Population
addFeature Costume

featProp Waste.Costume.costumeName setTo 'waste.png'

addProp matter number 100
prop Waste.matter setMax 100
prop Waste.matter setMin 0

// scale up because the art is a bit small
addFeature Physics

featProp Waste.Costume.scale setTo 0.8

// pick a random rotation to keep things looking interesting
// prop Waste.orientation setTo 0
// prop Waste.orientation addRnd 0 6

// we need to be able to see when the waste is on soil and / or being eaten by a worm
addFeature Touches
featCall Waste.Touches monitor 'Worm' b2b
featCall Waste.Touches monitor 'Soil' b2b

// make sure it is in front of the soil but behind the worms
prop Waste.zIndex setTo -150

addFeature Graphing
// STUDENTS_MAY_CHANGE - to pick a different thing to display on the meter
featProp Waste.Graphing.meterProp setTo 'matter'

// scale based on amount of matter
exprPush {{ (Waste.getProp('matter').value / 150) }}
featPropPop Waste.Costume.scale

featProp Waste.Graphing.meterColor setTo 5783616
featProp Waste.Graphing.text setTo ''

# PROGRAM UPDATE
when Waste touches Soil [[
  // STUDENTS_MAY_CHANGE - change the numbers to seee the impact of bacteria, including making the numberes 0 if you want (no bacteria)
  every 1 runAtStart [[
    // Bacteria decomposes waste
   // prop Waste.matter sub 1
   // prop Soil.nutrients add 1
  ]]
]]

every 1 runAtStart [[
  // remove if there is nothing left
  ifExpr {{ Waste.getProp('matter').value < 1 }} [[
    featCall Waste.Population removeAgent
  ]]

  // scale based on amount of matter
  exprPush {{ (Waste.getProp('matter').value / 150) }}
  featPropPop Waste.Costume.scale
]]

// required directive
# PROGRAM INIT`
    },
    {
      "name": "TextLabel",
      "scriptText": `# BLUEPRINT TextLabel
# PROGRAM INIT
addFeature Graphing
addFeature Costume
featProp TextLabel.Costume.costumeName setTo 'onexone.json'
`
    },
    {
      "name": "ColorChip",
      "scriptText": `# BLUEPRINT ColorChip
# PROGRAM INIT
addFeature Costume
featProp ColorChip.Costume.costumeName setTo 'square.json'

addFeature Physics`
    },
    {
      "name": "Timer",
      "scriptText": `# BLUEPRINT Timer
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature Graphing
addFeature Costume
featProp Timer.Costume.costumeName setTo 'onexone.json'

addProp time number 0

featProp Timer.Graphing.text setTo 'Time: 0'

# PROGRAM INIT

prop Timer.x setTo 445
prop Timer.y setTo -256

# PROGRAM UPDATE
every 1 runAtStart [[
  prop Timer.time add 1
  exprPush {{ 'Time: ' + Timer.getProp('time').value }}
  featPropPop Timer.Graphing.text
]]`
    },
    {
      "name": "CharacterGraph",
      "scriptText": `# BLUEPRINT CharacterGraph
# PROGRAM INIT
addFeature Costume
featProp CharacterGraph.Costume.costumeName setTo 'onexone.json'

// setting these all up to so they can be changed in the map editor
addProp characterType string 'Worm'
addProp countType string 'sum'
addProp variableToGraph string 'energyLevel'
addProp labelText string 'Worm Energy'

addFeature Graphing
addFeature Population
featProp Graphing isLargeGraphic setTo true

// using a generic name so that it is easier to change later
addProp graphValue number 0
prop graphValue setMax 1000
prop graphValue setMin 0

featProp CharacterGraph.Graphing.graphProp setTo 'graphValue'


# PROGRAM EVENT

onEvent Start [[
  exprPush {{CharacterGraph.getProp('labelText').value}}
  featPropPop Graphing text
]]

onEvent Tick [[
  // TEAM_MAY_CHANGE - change the character, variable, and possible countTypeto a different name as needed
  // -- Character options: Plant, Worm, Waste, Bunny
  // -- Variable options: matter, energyLevel, nutrients
  // -- Population options: sum, avg, min, max

  exprPush {{CharacterGraph.getProp('characterType').value}}
  featPropPop Population monitoredAgent

  exprPush {{CharacterGraph.getProp('variableToGraph').value}}
  featPropPop Population monitoredAgentProp

  featCall Population countAgentProp

  exprPush {{ CharacterGraph.getFeatProp('Population', CharacterGraph.prop.countType.value).value }}
  propPop graphValue
]]`
    },
    {
      "name": "Tomato",
      "scriptText": `# BLUEPRINT Tomato
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp agent.Costume.costumeName setTo 'tomato.png'

addFeature Physics
featProp Tomato.Costume.scale setTo 0.2

addProp energyType string 'waste'

// setup to track nutrients and begin at 1/2 way
addProp matterLevel number 50
prop Tomato.matterLevel setMax 50
prop Tomato.matterLevel setMin 0

addProp energyLevel number 50
prop Tomato.energyLevel setMax 50
prop Tomato.energyLevel setMin 0

// use a widget to depict the current nutrients
addFeature Graphing
featProp Tomato.Graphing.meterProp setTo 'matterLevel'
featProp Tomato.Graphing.text setTo ' '


addFeature Touches
featCall Tomato.Touches monitor 'Bunny' b2b

// set the waste to be purple because it has nutrients, not energy
featProp Tomato.Graphing.meterColor setTo 5783616

# PROGRAM UPDATE
every 1 runAtStart [[
  prop Tomato.matterLevel sub 1

  ifExpr {{ Tomato.getProp('matterLevel').value > 40 }} [[
    // healthy
    featProp Tomato.Costume.costumeName setTo 'tomato.png'
  ]]
  ifExpr {{ Tomato.getProp('matterLevel').value < 40 && Tomato.getProp('matterLevel').value > 25 }} [[
    // healthy
    featProp Tomato.Costume.costumeName setTo 'tomato_beg_decomp.png'
  ]]
  ifExpr {{ Tomato.getProp('matterLevel').value < 25 && Tomato.getProp('matterLevel').value > 10 }} [[
    // healthy
    featProp Tomato.Costume.costumeName setTo 'tomato_mid_decomp.png'
  ]]
  ifExpr {{ Tomato.getProp('matterLevel').value < 10 }} [[
    // healthy
    featProp Tomato.Costume.costumeName setTo 'waste.png'
  ]]

]]`
    }
  ],
  "instances": [
    {
      "id": "1101",
      "label": "Soil01",
      "bpid": "Soil",
      "initScript": `prop x setTo -300
prop y setTo 100
prop nutrients setTo 10`
    },
    {
      "id": "1102",
      "label": "Soil02",
      "bpid": "Soil",
      "initScript": `prop x setTo -100
prop y setTo 100`
    },
    {
      "id": "1103",
      "label": "Soil03",
      "bpid": "Soil",
      "initScript": `prop x setTo 100
prop y setTo 100`
    },
    {
      "id": "1104",
      "label": "Soil04",
      "bpid": "Soil",
      "initScript": `prop x setTo 300
prop y setTo 100`
    },
    {
      "id": "1105",
      "label": "Soil05",
      "bpid": "Soil",
      "initScript": `prop x setTo -300
prop y setTo 300`
    },
    {
      "id": "1106",
      "label": "Soil06",
      "bpid": "Soil",
      "initScript": `prop x setTo -100
prop y setTo 300`
    },
    {
      "id": "1107",
      "label": "Soil07",
      "bpid": "Soil",
      "initScript": `prop x setTo 100
prop y setTo 300`
    },
    {
      "id": "1108",
      "label": "Soil08",
      "bpid": "Soil",
      "initScript": `prop x setTo 300
prop y setTo 300`
    },
    {
      "id": "1109",
      "label": "SoilBG01",
      "bpid": "SoilBG",
      "initScript": `prop x setTo 0
prop y setTo 200`
    },
    {
      "id": "1801",
      "label": "Plant Energy",
      "bpid": "CharacterGraph",
      "initScript": `prop x setTo 470
prop y setTo 360
prop characterType setTo 'Plant'
prop countType setTo 'sum'
prop variableToGraph setTo 'energyLevel'
prop labelText setTo 'Plant Energy'`
    },
    {
      "id": "1802",
      "label": "Bunny Energy",
      "bpid": "CharacterGraph",
      "initScript": `prop x setTo 470
prop y setTo 210
prop characterType setTo 'Bunny'
prop countType setTo 'sum'
prop variableToGraph setTo 'energyLevel'
prop labelText setTo 'Bunny Energy'`
    },
    {
      "id": "1803",
      "label": "Worm Energy",
      "bpid": "CharacterGraph",
      "initScript": `prop x setTo 470
prop y setTo 50
prop characterType setTo 'Worm'
prop countType setTo 'sum'
prop variableToGraph setTo 'energyLevel'
prop labelText setTo 'Worm Energy'
`
    },
    {
      "id": "1201",
      "label": "Plant01",
      "bpid": "Plant",
      "initScript": `prop x setTo -300`
    },
    {
      "id": "1602",
      "label": "Waste02",
      "bpid": "Waste",
      "initScript": `prop x setTo 317.07
prop y setTo 113.34`
    },
    {
      "id": "1700",
      "label": "LegendLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 455
prop y setTo -400
featProp Graphing text setTo 'Key:'`
    },
    {
      "id": "1701",
      "label": "EnergyLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 455
prop y setTo -373
featProp Graphing text setTo 'Energy'
prop zIndex setTo 100`
    },
    {
      "id": "1702",
      "label": "NutrientsLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 455
prop y setTo -340
featProp Graphing text setTo 'Nutrients'
prop zIndex setTo 100`
    },
    {
      "id": "1703",
      "label": "MatterLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 455
prop y setTo -308
featProp Graphing text setTo 'Matter'
prop zIndex setTo 100`
    },
    {
      "id": "1704",
      "label": "EnergyChip",
      "bpid": "ColorChip",
      "initScript": `prop x setTo 455.00
prop y setTo -354.46
featCall Costume setColorize 0 255 0
prop zIndex setTo 95
featProp agent.Costume.width setTo 100
featProp agent.Costume.height setTo 30
`
    },
    {
      "id": "1705",
      "label": "NutrientsChip",
      "bpid": "ColorChip",
      "initScript": `prop x setTo 455.00
prop y setTo -320.24
featCall Costume setColorize 138 43 226
prop zIndex setTo 95
featProp agent.Costume.width setTo 100
featProp agent.Costume.height setTo 30`
    },
    {
      "id": "1706",
      "label": "MatterChip",
      "bpid": "ColorChip",
      "initScript": `prop x setTo 455.00
prop y setTo -287.85
featCall Costume setColorize 0.56 0.52 0.40
prop zIndex setTo 95
featProp agent.Costume.width setTo 100
featProp agent.Costume.height setTo 30`
    },
    {
      "id": "1804",
      "label": "Sunbeam1804",
      "bpid": "Sunbeam",
      "initScript": `prop x setTo -358.12
prop y setTo -136.56`
    },
    {
      "id": "1808",
      "label": "Waste1808",
      "bpid": "Waste",
      "initScript": `prop x setTo -288.34
prop y setTo 113.79`
    },
    {
      "id": "1809",
      "label": "Timer",
      "bpid": "Timer",
      "initScript": `prop x setTo 338.6
prop y setTo -394.99`
    },
    {
      "id": "1810",
      "label": "Plant1810",
      "bpid": "Plant",
      "initScript": `prop x setTo 88.12
prop y setTo -43.58`
    },
    {
      "id": "1811",
      "label": "Bunny1811",
      "bpid": "Bunny",
      "initScript": `prop x setTo -83.99
prop y setTo -41.99`
    },
    {
      "id": "1812",
      "label": "Soil1812",
      "bpid": "Soil",
      "initScript": `prop x setTo -304.63
prop y setTo -101.72`
    },
    {
      "id": "1813",
      "label": "Soil1813",
      "bpid": "Soil",
      "initScript": `prop x setTo 99.80
prop y setTo -102.19`
    },
    {
      "id": "1814",
      "label": "Soil1814",
      "bpid": "Soil",
      "initScript": `prop x setTo 304.81
prop y setTo -100.92`
    },
    {
      "id": "1815",
      "label": "Soil1815",
      "bpid": "Soil",
      "initScript": `prop x setTo 303.58
prop y setTo -299.16`
    },
    {
      "id": "1816",
      "label": "Soil1816",
      "bpid": "Soil",
      "initScript": `prop x setTo 104.06
prop y setTo -298.28`
    },
    {
      "id": "1817",
      "label": "Soil1817",
      "bpid": "Soil",
      "initScript": `prop x setTo -102.44
prop y setTo -302.58`
    },
    {
      "id": "1818",
      "label": "Soil1818",
      "bpid": "Soil",
      "initScript": `prop x setTo -306.26
prop y setTo -301.64`
    },
    {
      "id": "1819",
      "label": "Soil1819",
      "bpid": "Soil",
      "initScript": `prop x setTo -99.50
prop y setTo -101.62`
    },
    {
      "id": "1820",
      "label": "Worm1820",
      "bpid": "Worm",
      "initScript": `prop x setTo 41.87
prop y setTo 228.20`
    },
    {
      "id": "1821",
      "label": "Tomato1821",
      "bpid": "Tomato",
      "initScript": `prop x setTo 77.35
prop y setTo -260.32`
    }
  ]
}