{
  "id": "decomposition_energy",
  "label": "Decomposition Energy",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": "0x00bfff",
    "roundsCanLoop": true
  },
  "rounds": [],
  "blueprints": [
        {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT

// Explanation:
// This model is inteended to help students exploree how energy moves between the characters in the ecosystem

prop global.visible setTo false
addProp energyReleasedAsHeat number 0

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Sun",
      "scriptText": `# BLUEPRINT Sun
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM INIT
addFeature Costume
featProp Sun.Costume.costumeName setTo 'sunbeam.png'
// featCall Sun.Costume setColorize 255 215 0
prop Sun.zIndex setTo 0

addFeature Physics

featProp Sun.Costume.scale setTo 2

// types to use for energy transfer: source, producer, consumer, decomposer, waste, soil (we might add more later or improve the last few labels)
addProp energyType string 'source'


// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Bunny",
      "scriptText": `# BLUEPRINT Bunny
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM INIT
addFeature Costume
featProp Bunny.Costume.costumeName setTo 'bunny_hungry.png'
featProp Bunny.Costume.currentFrame setTo 0


featProp Bunny.Costume.flipX setTo true


addFeature Physics
featProp Bunny.Costume.scale setTo 0.2

// types to use for energy transfer: source, producer, consumer (we might add more later)
addProp energyType string 'consumer'

// setup to track energy and begin at 1/2 way
addProp energyLevel number 50
prop Bunny.energyLevel setMax 100
prop Bunny.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Bunny lose energy faster (or slower)
addProp energyUse number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature AgentWidgets
featProp Bunny.AgentWidgets.meterProp setTo 'energyLevel'

featProp Bunny.AgentWidgets.meterColor setTo 65280

# PROGRAM UPDATE
every 2 runAtStart [[

  // energyLevel goes down every 2 seconds
  exprPush {{ agent.getProp('energyLevel').value - agent.getProp('energyUse').value }}
  propPop agent.energyLevel

  // this code sets the color of the energy bar based on how hungry the Bunny is
  // sated
  ifExpr {{ agent.getProp('energyLevel').value > 50 }} [[
    featProp Bunny.Costume.currentFr
    // Green
    featProp Bunny.AgentWidgets.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ agent.getProp('energyLevel').value < 50 }} [[
featProp Bunny.Costume.costumeName setTo 'bunny_hungry.png'
    // Orange
    featProp Bunny.AgentWidgets.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ agent.getProp('energyLevel').value < 20 }} [[
featProp Bunny.Costume.costumeName setTo 'bunny_hungry.png'
    // Red
    featProp Bunny.AgentWidgets.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ agent.getProp('energyLevel').value < 1 }} [[
featProp Bunny.Costume.costumeName setTo 'bunny.png'
    // featCall Movement setMovementType 'float'
    prop agent.alpha setTo 0.3
    prop agent.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Bunny.AgentWidgets.meterProp setTo 'energyLevel'


]]
`
    },
    {
      "name": "Worm",
      "scriptText": `# BLUEPRINT Worm
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM INIT
addFeature Costume
featProp Worm.Costume.costumeName setTo 'worm_hungry.png'  

addFeature Physics
featProp Worm.Costume.scale setTo 0.15

// types to use for energy transfer: source, producer, consumer, decomposer, waste, soil (we might add more later or improve the last few labels)
addProp energyType string 'decomposer'

// setup to track energy and begin at 1/2 way
addProp energyLevel number 50
prop Worm.energyLevel setMax 100
prop Worm.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Worm lose energy faster (or slower)
addProp energyUse number 1

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature AgentWidgets
featProp Worm.AgentWidgets.meterProp setTo energyLevel

featProp Worm.AgentWidgets.meterColor setTo 65280

# PROGRAM UPDATE
  every 2 runAtStart [[

  // foodLevel goes down every n seconds
  exprPush {{ Worm.getProp('energyLevel').value - agent.getProp('energyUse').value}}
  propPop Worm.energyLevel

  // this code sets the color of the energy bar based on how hungry the Worm  is
  // sated
  ifExpr {{ agent.getProp('energyLevel').value > 50 }} [[
    featProp Worm.Costume.currentFrame setTo 0
    // Green
    featProp Worm.AgentWidgets.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ agent.getProp('energyLevel').value < 50 }} [[
    featProp Worm.Costume.currentFrame setTo 1
    // Orange
    featProp Worm.AgentWidgets.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ agent.getProp('energyLevel').value < 20 }} [[
    featProp Worm.Costume.currentFrame setTo 1
    // Red
    featProp Worm.AgentWidgets.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ agent.getProp('energyLevel').value < 1 }} [[
    featProp Worm.Costume.currentFrame setTo 2
    // featCall Movement setMovementType 'float'
    prop Worm.alpha setTo 0.3
    prop Worm.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Worm.AgentWidgets.meterProp setTo 'energyLevel'

]]

`
    },
    {
      "name": "Waste",
      "scriptText": `# BLUEPRINT Waste
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM INIT

addFeature Costume
featProp Waste.Costume.costumeName setTo 'waste.png'

addFeature Physics
featProp Waste.Costume.scale setTo 0.5

// types to use for energy transfer: source, producer, consumer, decomposer, waste, soil (we might add more later or improve the last few labels)
addProp energyType string 'waste'

// setup to track nutrients and begin at 1/2 way
addProp matterLevel number 50
prop Waste.matterLevel setMax 100
prop Waste.matterLevel setMin 0

// use a widget to depict the current nutrients
addFeature AgentWidgets
featProp Waste.AgentWidgets.meterProp setTo 'matterLevel'

// set the waste to be purple because it has nutrients, not energy
featProp Waste.AgentWidgets.meterColor setTo 5783616

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Plant",
      "scriptText": `# BLUEPRINT Plant
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM DEFINE
addFeature Costume
featProp Plant.Costume.costumeName setTo 'plant_healthy.png'

addFeature Physics

// types to use for energy transfer: source, producer, consumer (we might add more later)
addProp energyType string 'producer'

// setup to track energy and begin at 1/2 way
addProp energyLevel number 50
prop Plant.energyLevel setMax 100
prop Plant.energyLevel setMin 0

// STUDENTS_MAY_CHANGE to make Plant lose energy faster (or slower)
addProp energyUse number 1

// setup so that we can tweak the size more dynamically, and plant by plant
addProp minimumScale number 0

// STUDENTS_MAY_CHANGE - set a different minimum size for the plants  (used to be 0.25)
prop Plant.minimumScale setTo 0
prop Plant.minimumScale setMax 1.0
prop Plant.minimumScale setMin -0.5

addProp nutrients number 8

// STUDENTS_MAY_CHANGE - sete a different starting eneregy level, max or min?  A higher max will allow a lot more time before the plant looks bad
prop Plant.nutrients setTo 8
prop Plant.nutrients setMax 10
prop Plant.nutrients setMin 0

addProp matter number 50

// STUDENTS_MAY_CHANGE - sete a different range or starting point of matter
prop Plant.matter setTo 30
prop Plant.matter setMax 30
prop Plant.matter setMin 0

// use a widget to depict the current energy, and color it green (maybe change later)
addFeature AgentWidgets
featProp Plant.AgentWidgets.meterProp setTo 'energyLevel'
// Green = 0x00FF00
featProp Plant.AgentWidgets.meterColor setTo 65280
featCall Plant.AgentWidgets setMeterPosition 'inside-left'

addFeature Touches

// we need to touch the soil to know the nutrients
featCall Plant.Touches monitor 'Soil' b2b

# PROGRAM INIT
// set size based on matter (assume matter max of 100) and that we waver between 80-100%
exprPush {{ Plant.getProp('minimumScale').value + agent.getProp('matter').value / 100 }}
featPropPop Plant.Costume.scale

# PROGRAM UPDATE

when Plant touches Soil [[
  every 1 runAtStart [[
    ifExpr {{ Soil.getProp('nutrients').value > 0 }} [[
      prop Soil.nutrients sub 1
      prop Plant.nutrients add 1
    ]]
  ]]
]]

every 1 runAtStart [[

  // decrease energy each tick, using the energyUse varable to determine how much
  ifExpr {{ agent.getProp('energyLevel').value > 0 }} [[
    exprPush {{ agent.getProp('energyLevel').value - agent.getProp('energyUse').value }}
    propPop agent.energyLevel

    // mirror the energy with the matter since we are running off that (this makes it easier to maybe split eventually)
    exprPush {{ agent.getProp('energyLevel').value }}
    propPop agent.matter

    // re-scale the plant based on the energy level
    exprPush {{ agent.getProp('minimumScale').value + agent.getProp('matter').value / 100 }}
    featPropPop Plant.Costume.scale

  ]]

  // change how it looks to reflect it's health level (meter below)
  // is it healthy?  Use some nutrients and then set color
  prop Plant.nutrients sub 1
  ifExpr {{ Plant.getProp('nutrients').value > 6 }} [[
    // healthy
    featProp Plant.Costume.costumeName setTo 'plant_healthy.png'
    featProp Plant.Costume.currentFrame setTo 0
  ]]
  ifExpr {{ Plant.getProp('nutrients').value < 6 }} [[
    // ok, but not great
    featProp Plant.Costume.costumeName setTo 'plant_mediumhealth.png'
    featProp Plant.Costume.currentFrame setTo 1

  ]]
  ifExpr {{ Plant.getProp('nutrients').value < 2 }} [[
    // not doing well at all, so lets also lose some matter
    featProp Plant.Costume.costumeName setTo 'plant_unhealthy.png'
    featProp Plant.Costume.currentFrame setTo 2
    prop Plant.matter sub 1
  ]]

  // set plant energy meter color
  // doing great
  ifExpr {{ agent.getProp('energyLevel').value > 60 }} [[
    // Green
    featProp Plant.AgentWidgets.meterColor setTo 65280
  ]]
  // needs some energy
  ifExpr {{ agent.getProp('energyLevel').value < 60 }} [[
    // Orange
    featProp Plant.AgentWidgets.meterColor setTo 16737792
  ]]
  // in trouble
  ifExpr {{ agent.getProp('energyLevel').value < 30 }} [[
    // Red
    featProp Plant.AgentWidgets.meterColor setTo 16711680

  ]]
]]`
    },
    {
      "name": "EnergyRepresentation",
      "scriptText": `# BLUEPRINT EnergyRepresentation
# TAG isCharControllable true
# TAG isPozyxControllable true
# TAG isPTrackControllable false
# PROGRAM DEFINE

addFeature Costume
featProp EnergyRepresentation.Costume.costumeName setTo 'empty_energy.png'

addFeature Physics
featProp EnergyRepresentation.Costume.scale setTo 0.08


// using this to record energyReleasedAsHeat



// setup energy properties
addProp energyLevel number 0
prop EnergyRepresentation.energyLevel setMax 100
prop EnergyRepresentation.energyLevel setMin 0

// setup energy type so that we know what we can give it to
// start with none
addProp energyType string 'none'

addFeature Touches
featCall EnergyRepresentation.Touches monitor 'Sun' c2b
featCall EnergyRepresentation.Touches monitor 'Plant' c2b
featCall EnergyRepresentation.Touches monitor 'Bunny' c2b
featCall EnergyRepresentation.Touches monitor 'Worm' c2b
featCall EnergyRepresentation.Touches monitor 'Waste' c2b
featCall EnergyRepresentation.Touches monitor 'Soil' c2b


# PROGRAM UPDATE
when EnergyRepresentation centerFirstTouches Sun [[

  // when touching, show an annotation about how the sun produces energy
  featProp EnergyRepresentation.Costume.costumeName setTo 'sun_energy.png'
]]

when EnergyRepresentation centerLastTouches Sun [[

  // when moving off, take a full amount of energy in the form of sunlight and heat (our focus fis on light since the plants use it)
  prop EnergyRepresentation.energyType setTo 'source'
  prop EnergyRepresentation.energyLevel setTo 100

  featProp EnergyRepresentation.Costume.costumeName setTo 'sun_energy.png'
]]


when EnergyRepresentation centerFirstTouches Plant [[
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'none' }} [[
    prop EnergyRepresentation.energyType setTo 'using'
    featProp EnergyRepresentation.Costume.costumeName setTo 'plant_energy.png'
  ]]

  // if you have energy from the sun, then give some energy to the plant, but not all of it because some is released into the environment
  // as heat or lost in other ways
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'source' }} [[
    prop EnergyRepresentation.energyType setTo 'using'

    // STUDENTS_MAY_CHANGE to alter how much energy the plant gets from the sun
    prop EnergyRepresentation.energyLevel setTo 0
    prop Plant.energyLevel add 50
    // we are losing 50 of the hundred, so note that in the global
    prop global.energyReleasedAsHeat add 50


    featProp EnergyRepresentation.Costume.costumeName setTo 'sun-to-plant.png'

    featProp Plant.Costume.glow setTo 1

  ]]
]]

when EnergyRepresentation centerLastTouches Plant [[

  // if you have no energy type, take some energy from the plant
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'using' && Plant.getProp('energyLevel').value > 25 }} [[
    prop EnergyRepresentation.energyType setTo 'producer'

    // STUDENTS_MAY_CHANGE to alter how much energy the plant gives to a Bunny
    // note - it was too fast, so i am removing less then I am moving, but let's imagine they are on different scales
    prop Plant.energyLevel sub 10
    prop EnergyRepresentation.energyLevel add 25
    // we are losing 25 of the hundred, so not that in the global
    prop global.energyReleasedAsHeat add 25

    featProp EnergyRepresentation.Costume.costumeName setTo 'plant_energy.png'

  ]]

  // temporary kludge to drop the need to return ... need to clean this up for plants, bunnies, waste, worms
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'none' || EnergyRepresentation.getProp('energyType').value == 'using' }} [[
    prop EnergyRepresentation.energyType setTo 'producer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'plant_energy.png'
  ]]


]]


when EnergyRepresentation centerFirstTouches Bunny [[

  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'none' }} [[
    prop EnergyRepresentation.energyType setTo 'using'
    featProp EnergyRepresentation.Costume.costumeName setTo 'bunny_energy.png'
  ]]

  // if the last thing we touched was a plant
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'producer' }} [[
    prop EnergyRepresentation.energyType setTo 'using'

    // STUDENTS_MAY_CHANGE to alter how much energy the plant gets from the sun, and what it does to the energy character
    prop EnergyRepresentation.energyLevel setTo 0
    prop Bunny.energyLevel add 10
    // we are losing some, so note that in the global
    prop global.energyReleasedAsHeat add 15

    featProp EnergyRepresentation.Costume.costumeName setTo 'plant-to-bunny.png'
    featProp EnergyRepresentation.Costume.currentFrame setTo 1

    featProp Bunny.Costume.glow setTo 1


  ]]
]]

when EnergyRepresentation centerLastTouches Bunny [[

  // if you have no energy type, take some energy from the bunny
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'using' && Bunny.getProp('energyLevel').value > 25 }} [[
    prop EnergyRepresentation.energyType setTo 'consumer'

    // STUDENTS_MAY_CHANGE to alter how much energy the Bunny gives off
    prop Bunny.energyLevel sub 15
    prop EnergyRepresentation.energyLevel add 15
    // we are losing 15 of the hundred, so not that in the global
    prop global.energyReleasedAsHeat add 15

    featProp EnergyRepresentation.Costume.costumeName setTo 'bunny_energy.png'

  ]]

  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'none' || EnergyRepresentation.getProp('energyType').value == 'using' }} [[
    prop EnergyRepresentation.energyType setTo 'consumer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'bunny_energy.png'
  ]]

]]

when EnergyRepresentation centerFirstTouches Waste [[

  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'none' }} [[
    prop EnergyRepresentation.energyType setTo 'using'
    featProp EnergyRepresentation.Costume.costumeName setTo 'waste_energy.png'
  ]]

  // if the last thing we touched was a bunny
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'consumer' }} [[
    prop EnergyRepresentation.energyType setTo 'using'

    // set the energy on the waste, but then it'll get converted to matter
    prop EnergyRepresentation.energyLevel setTo 0
    prop Waste.matterLevel add 20

    // we are losing some energy, though we'll keep the energy looking decent on the worm so it doesn't die too fast due to scaling
    prop global.energyReleasedAsHeat add 5

    featProp EnergyRepresentation.Costume.costumeName setTo 'bunny-to-waste.png'
    featProp EnergyRepresentation.Costume.currentFrame setTo 1
    featProp Waste.Costume.glow setTo 1


  ]]

]]

when EnergyRepresentation centerLastTouches Waste [[

  // if you have no energy type, take some energy from the bunny
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'using' && Waste.getProp('matterLevel').value > 15 }} [[

    prop EnergyRepresentation.energyType setTo 'waste'

    // STUDENTS_MAY_CHANGE to alter how much energy the waste gives to the worm
    prop Waste.matterLevel sub 15
    prop EnergyRepresentation.energyLevel add 15

    // we are losing 15 of the hundred, so not that in the global
    prop global.energyReleasedAsHeat add 15

    featProp EnergyRepresentation.Costume.costumeName setTo 'waste_energy.png'

  ]]

  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'none' || EnergyRepresentation.getProp('energyType').value == 'using' }} [[
    prop EnergyRepresentation.energyType setTo 'waste'
    featProp EnergyRepresentation.Costume.costumeName setTo 'waste_energy.png'
  ]]

]]

when EnergyRepresentation centerFirstTouches Worm [[

  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'none' }} [[
    prop EnergyRepresentation.energyType setTo 'using'
    featProp EnergyRepresentation.Costume.costumeName setTo 'worm_energy.png'
  ]]

  // if the last thing we touched was waste
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'waste' }} [[
    prop EnergyRepresentation.energyType setTo 'using'

    // set the energy on the waste, but then it'll get converted to matter
    prop EnergyRepresentation.energyLevel setTo 0
    prop Worm.energyLevel add 20

    // we are losing some energy, though we'll keep the energy looking decent on the worm so it doesn't die too fast due to scaling
    prop global.energyReleasedAsHeat add 5

    featProp EnergyRepresentation.Costume.costumeName setTo 'waste-to-worm.png'
    featProp EnergyRepresentation.Costume.currentFrame setTo 1

    featProp Worm.Costume.glow setTo 1


  ]]


]]

when EnergyRepresentation centerLastTouches Worm [[


  // if you have no energy type, take some energy from the worm
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'using' && Worm.getProp('energyLevel').value > 15 }} [[
    prop EnergyRepresentation.energyType setTo 'decomposer'

    // STUDENTS_MAY_CHANGE to alter how much energy the plant gives to a Bunny
    prop Worm.energyLevel sub 15
    prop EnergyRepresentation.energyLevel add 15

    // we are losing 15 of the hundred, so not that in the global
    prop global.energyReleasedAsHeat add 15

    featProp EnergyRepresentation.Costume.costumeName setTo 'worm_energy.png'

  ]]

  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'none' || EnergyRepresentation.getProp('energyType').value == 'using' }} [[
    prop EnergyRepresentation.energyType setTo 'decomposer'
    featProp EnergyRepresentation.Costume.costumeName setTo 'worm_energy.png'
  ]]


]]

when EnergyRepresentation centerFirstTouches Soil [[

  // if the last thing we touched was a worm
  ifExpr {{ EnergyRepresentation.getProp('energyType').value == 'decomposer' }} [[
    prop EnergyRepresentation.energyType setTo 'none'

    // set the energy on the waste, but then it'll get converted to matter
    prop EnergyRepresentation.energyLevel setTo 0
    prop Soil.nutrients add 10

    // we are losing some energy, though we'll keep the energy looking decent on the worm so it doesn't die too fast due to scaling
    prop global.energyReleasedAsHeat add 5

    // glow the soil but then we are off to find new things
    featProp EnergyRepresentation.Costume.costumeName setTo 'worm-to-nutrients.png'


    // show the nutrients appearing
    // featProp Soil.Costume.costumeName setTo 'dirt.json'
    featProp Soil.Costume.currentFrame setTo 1

  ]]

]]

// required directive
# PROGRAM INIT`
    },
    {
      "name": "TextLabel",
      "scriptText": `# BLUEPRINT TextLabel
# PROGRAM DEFINE
addFeature AgentWidgets
addFeature Costume
featProp TextLabel.Costume.costumeName setTo 'onexone.json'`
    },
    {
      "name": "ColorChip",
      "scriptText": `# BLUEPRINT ColorChip
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM DEFINE
addFeature Costume
featProp ColorChip.Costume.costumeName setTo 'square.json'
addFeature Physics

// required directive
# PROGRAM INIT

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Timer",
      "scriptText": `# BLUEPRINT Timer
      # PROGRAM INIT
      addFeature AgentWidgets
      addFeature Costume
      featProp Timer.Costume.costumeName setTo 'onexone.json'
      addProp time number 0
      prop Timer.zIndex setTo 500

      featProp Timer.AgentWidgets.text setTo 'Time: 0'

      # PROGRAM UPDATE
  every 1 runAtStart [[
        prop Timer.time add 1
        exprPush {{ 'Time: ' + agent.getProp('time').value }}
        featPropPop Timer.AgentWidgets.text
      ]]`
    },
    {
      "name": "EnergyInSystem",
      "scriptText": `# BLUEPRINT EnergyInSystem
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM DEFINE
addFeature Costume
featProp EnergyInSystem.Costume.costumeName setTo 'onexone.json'

addFeature AgentWidgets
addFeature Population
featProp EnergyInSystem.AgentWidgets.isLargeGraphic setTo true

// using a generic name so that it is easier to change later
addProp totalEnergy number 500
prop EnergyInSystem.totalEnergy setMax 1000
prop EnergyInSystem.totalEnergy setMin 0

// to store the current values of plant and Bunny separately
// I could just add them up below, but this way we can see them in the inspector
addProp totalPlantEnergy number 0
addProp totalBunnyEnergy number 0


featProp EnergyInSystem.AgentWidgets.graphProp setTo 'totalEnergy'

# PROGRAM INIT
// make sure something displays with some initial text, on bottom right at first
prop EnergyInSystem.x setTo 495
prop EnergyInSystem.y setTo 187
prop EnergyInSystem.zIndex setTo 300

featProp EnergyInSystem.AgentWidgets.text setTo 'Energy in System'

# PROGRAM EVENT

onEvent Tick [[

  // count up the plant
  featProp EnergyInSystem.Population.monitoredAgent setTo 'Plant'
  featProp EnergyInSystem.Population.monitoredAgentProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countAgentProp
  exprPush {{ agent.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totalPlantEnergy

  // count up the Bunny
  featProp EnergyInSystem.Population.monitoredAgent setTo 'Bunny'
  featProp EnergyInSystem.Population.monitoredAgentProp setTo 'energyLevel'
  featCall EnergyInSystem.Population countAgentProp
  exprPush {{ agent.getFeatProp('Population', 'sum').value }}
  propPop EnergyInSystem.totalBunnyEnergy

  // graph the sum
  exprPush {{ agent.getProp('totalPlantEnergy').value + agent.getProp('totalBunnyEnergy').value }}
  propPop EnergyInSystem.totalEnergy


]]

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "GraphLostEnergy",
      "scriptText": `# BLUEPRINT GraphLostEnergy
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature Costume
featProp GraphLostEnergy.Costume.costumeName setTo 'onexone.json'
addFeature AgentWidgets
addFeature Population
featProp GraphLostEnergy.AgentWidgets.isLargeGraphic setTo true



// using a generic name so that it is easier to change later
addProp lostEnergy number 500
prop GraphLostEnergy.lostEnergy setMax 1000
prop GraphLostEnergy.lostEnergy setMin 0

featProp GraphLostEnergy.AgentWidgets.graphProp setTo 'lostEnergy'

// make sure something displays with some initial text, on bottom right at first
prop GraphLostEnergy.x setTo 495
prop GraphLostEnergy.y setTo 350
prop GraphLostEnergy.zIndex setTo 300

featProp GraphLostEnergy.AgentWidgets.text setTo 'Lost Energy'

# PROGRAM UPDATE

onEvent Tick [[

  // exprPush {{ global.getProp('energyReleasedAsHeat').value }}
  propPush global.energyReleasedAsHeat
  propPop GraphLostEnergy.lostEnergy

]]

`
    },
    {
      "name": "SoilBG",
      "scriptText": `# BLUEPRINT SoilBG
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM DEFINE
addFeature Costume
featProp SoilBG.Costume.costumeName setTo 'square.json'
featCall SoilBG.Costume setColorize 0.56 0.52 0.4
addFeature Physics
featProp SoilBG.Costume.width setTo 800
featProp SoilBG.Costume.height setTo 400
prop SoilBG.zIndex setTo -210

// required directive
# PROGRAM INIT

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Soil",
      "scriptText": `# BLUEPRINT Soil
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature Costume
featProp Soil.Costume.costumeName setTo 'dirt.png'

addProp nutrients number 50
prop Soil.nutrients setMax 100
prop Soil.nutrients setMin 0

addProp sparkleCount number 0

addFeature Physics

featProp Soil.Costume.scale setTo 0.85

prop Soil.zIndex setTo -200

addFeature Touches
featCall Soil.Touches monitor 'Worm' b2b

addFeature AgentWidgets
// STUDENTS_MAY_CHANGE - to pick a different thing to display on the meter (note, color won't change below)
featProp Soil.AgentWidgets.meterProp setTo 'nutrients'

featCall Soil.AgentWidgets setMeterPosition 'inside-left'
// violet
featProp Soil.AgentWidgets.meterColor setTo 9055202
featProp Soil.AgentWidgets.text setTo ''

# PROGRAM UPDATE

every 1 runAtStart [[
  ifExpr {{ agent.getProp('sparkleCount').value > 0 }} [[
    prop Soil.sparkleCount sub 1
    featProp Soil.Costume.costumeName setTo 'dirt_sparkly.png'

  ]]
  ifExpr {{ agent.getProp('sparkleCount').value == 0 }} [[
    featProp Soil.Costume.costumeName setTo 'dirt.png'
  ]]
]]`
    }
  ],
  "instances": [
    {
      "id": "0",
      "label": "Sun",
      "bpid": "Sun",
      "initScript": `prop x setTo -207.87
prop y setTo -190.96`
    },
    {
      "id": "2",
      "label": "Plant1",
      "bpid": "Plant",
      "initScript": `prop x setTo -288.71
prop y setTo -47.63`
    },
    {
      "id": "5",
      "label": "Timer",
      "bpid": "Timer",
      "initScript": `prop x setTo 354.35
prop y setTo -394.62`
    },
    {
      "id": "7",
      "label": "Lost Energy Graph",
      "bpid": "GraphLostEnergy",
      "initScript": `prop x setTo 516.26
prop y setTo 360.68`
    },
    {
      "id": "8",
      "label": "Energy In System Graph",
      "bpid": "EnergyInSystem",
      "initScript": `prop x setTo 511.75
prop y setTo 187`
    },
    {
      "id": "1101",
      "label": "Soil01",
      "bpid": "Soil",
      "initScript": `prop x setTo -300
prop y setTo 100
prop nutrients setTo 10`
    },
    {
      "id": "1102",
      "label": "Soil02",
      "bpid": "Soil",
      "initScript": `prop x setTo -100
prop y setTo 100`
    },
    {
      "id": "1103",
      "label": "Soil03",
      "bpid": "Soil",
      "initScript": `prop x setTo 100
prop y setTo 100`
    },
    {
      "id": "1104",
      "label": "Soil04",
      "bpid": "Soil",
      "initScript": `prop x setTo 300
prop y setTo 100`
    },
    {
      "id": "1105",
      "label": "Soil05",
      "bpid": "Soil",
      "initScript": `prop x setTo -300
prop y setTo 300`
    },
    {
      "id": "1106",
      "label": "Soil06",
      "bpid": "Soil",
      "initScript": `prop x setTo -100
prop y setTo 300`
    },
    {
      "id": "1107",
      "label": "Soil07",
      "bpid": "Soil",
      "initScript": `prop x setTo 100
prop y setTo 300`
    },
    {
      "id": "1108",
      "label": "Soil08",
      "bpid": "Soil",
      "initScript": `prop x setTo 300
prop y setTo 300`
    },
    {
      "id": "1110",
      "label": "Worm1",
      "bpid": "Worm",
      "initScript": `prop x setTo -272.54
prop y setTo 288.83`
    },
    {
      "id": "1111",
      "label": "Waste1",
      "bpid": "Waste",
      "initScript": `prop x setTo -92.01
prop y setTo 142.08`
    },
    {
      "id": "1700",
      "label": "LegendLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 455
prop y setTo -400
featProp AgentWidgets text setTo 'Key:'`
    },
    {
      "id": "1701",
      "label": "EnergyLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 455
prop y setTo -373
featProp AgentWidgets text setTo 'Energy'
prop zIndex setTo 100`
    },
    {
      "id": "1702",
      "label": "NutrientsLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 455
prop y setTo -340
featProp AgentWidgets text setTo 'Nutrients'
prop zIndex setTo 100`
    },
    {
      "id": "1703",
      "label": "MatterLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 455
prop y setTo -308
featProp AgentWidgets text setTo 'Matter'
prop zIndex setTo 100`
    },
    {
      "id": "1704",
      "label": "EnergyChip",
      "bpid": "ColorChip",
      "initScript": `prop x setTo 455.00
prop y setTo -353.03
featCall Costume setColorize 0 255 0
prop zIndex setTo 95
featProp agent.Costume.width setTo 100
featProp agent.Costume.height setTo 30`
    },
    {
      "id": "1705",
      "label": "NutrientsChip",
      "bpid": "ColorChip",
      "initScript": `prop x setTo 455.00
prop y setTo -321.93
featCall Costume setColorize 138 43 226
prop zIndex setTo 95
featProp agent.Costume.width setTo 100
featProp agent.Costume.height setTo 30`
    },
    {
      "id": "1706",
      "label": "MatterChip",
      "bpid": "ColorChip",
      "initScript": `prop x setTo 455.00
prop y setTo -292.43
featCall Costume setColorize 0.56 0.52 0.4
prop zIndex setTo 95
featProp agent.Costume.width setTo 100
featProp agent.Costume.height setTo 30`
    },
    {
      "id": "1707",
      "label": "Plant2",
      "bpid": "Plant",
      "initScript": `prop x setTo 132.79
prop y setTo -46.5`
    },
    {
      "id": "1708",
      "label": "Bunny2",
      "bpid": "Bunny",
      "initScript": `prop x setTo 314.5
prop y setTo -34.98`
    },
    {
      "id": "1709",
      "label": "Waste2",
      "bpid": "Waste",
      "initScript": `prop x setTo 339.85
prop y setTo 143.75`
    },
    {
      "id": "1710",
      "label": "Worm2",
      "bpid": "Worm",
      "initScript": `prop x setTo 131.82
prop y setTo 293.27`
    },
    {
      "id": "1711",
      "label": "Soil1711",
      "bpid": "Soil",
      "initScript": `prop x setTo 98.31
prop y setTo -94.06`
    },
    {
      "id": "1712",
      "label": "Soil1712",
      "bpid": "Soil",
      "initScript": `prop x setTo 299.6
prop y setTo -101.12`
    },
    {
      "id": "1713",
      "label": "Soil1713",
      "bpid": "Soil",
      "initScript": `prop x setTo 297.2
prop y setTo -301.56`
    },
    {
      "id": "1714",
      "label": "Soil1714",
      "bpid": "Soil",
      "initScript": `prop x setTo 91.28
prop y setTo -296.63`
    },
    {
      "id": "1715",
      "label": "Soil1715",
      "bpid": "Soil",
      "initScript": `prop x setTo -98.82
prop y setTo -299.62`
    },
    {
      "id": "1716",
      "label": "Soil1716",
      "bpid": "Soil",
      "initScript": `prop x setTo -300.59
prop y setTo -95.51`
    },
    {
      "id": "1717",
      "label": "Soil1717",
      "bpid": "Soil",
      "initScript": `prop x setTo -299.02
prop y setTo -304.25`
    },
    {
      "id": "1718",
      "label": "Soil1718",
      "bpid": "Soil",
      "initScript": `prop x setTo -96.12
prop y setTo -94.75`
    }
  ]
}