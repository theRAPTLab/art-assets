{
  "id": "knowledge_building",
  "label": "Knowledge Building",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 102,
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [],
  "blueprints": [
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body

# PROGRAM INIT

// hide this character since it is just for properties
prop global.visible setTo false

// add properties 
addProp placesVisited number 0
addProp natureVisited number 0

addProp homeVisited boolean false
addProp officeVisited boolean false
addProp conferenceLocVisited boolean false
addProp biologyVisited boolean false
addProp chemistryVisited boolean false
addProp modelingVisited boolean false
addProp embodiedVisited boolean false
addProp gardencenterVisited boolean false
addProp otherVisited boolean false

// track the collective scientiic knowledge of the community
// this will be updated in the KnowledgeMeter
addProp sharedScientificKnowledge number 1

// has anyone visited a conference to share knowledge with the public?
addProp conferenceVisited boolean false

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Scientist",
      "scriptText": `# BLUEPRINT Scientist
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable false

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body

# PROGRAM INIT

// Add features
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Graphing
addFeature Population

// Setup costume
// TODO: When we switch to art, set that in the map setup not here
// THOUGH WE WILL MAYBE DROP THE HAPPY VERSION THEN?
featProp Scientist.Costume.costumeName setTo 'KB_meeple_idle.png'
featProp Scientist.Costume.scale setTo 0.3

// Add properties
addProp knowledge number 0
prop Scientist.knowledge setMax 100
prop Scientist.knowledge setMin 0

prop zIndex setTo 100

// setup meter to show the knowledge
featProp Scientist.Graphing.meterProp setTo 'knowledge'
featProp Scientist.Graphing.meterColor setTo 16737792

// check if the scientist is visiting a place - see specif script below
featCall Scientist.Touches monitor 'Nature' b2b
featCall Scientist.Touches monitor 'Place' b2b

# PROGRAM UPDATE
// ============================================================
// SCIENTISTS, other updates
// ============================================================
// every 1 runAtStart [[

// ]]

// ============================================================
// SCIENTISTS interacting with NATURE
// ============================================================
when Scientist firstTouches Nature [[
  prop Nature.collaborators add 1

  // Show what we are doing, which depends on how much the scientific community knows about this ecosystem
 // ifProp global.sharedScientificKnowledge lessThan 100 [[
  //  ifProp Nature.name equal 'lake' [[

//      featProp Nature.Costume.costumeName setTo 'KB_Nature_LakeVisited.png'
  //  ]]

 //   ifProp Nature.name equal 'garden' [[

 //     featProp Nature.Costume.costumeName setTo 'KB_location_garden_help.png'
  //  ]]
 // ]]

  ifProp global.sharedScientificKnowledge greaterThan 50 [[
    ifProp Nature.name equal 'lake' [[

      featProp Nature.Costume.costumeName setTo 'KB_location_lake_help.png'

    ]]

    ifProp Nature.name equal 'garden' [[

      featProp Nature.Costume.costumeName setTo 'KB_location_garden_help.png'
    ]]
  ]]

  // check if someone has been here before. If not, not they have now
  ifProp Nature.wasVisited equal false [[
    prop Nature.wasVisited setTo true
    // show that another nature place was visited
    prop global.natureVisited add 1
  ]]
]]

when Scientist touches Nature [[
  every 1 runAtStart [[
    // construct knowledge depending on the kind of place and if others are there

    // üîé WHAT do scientists do in NATURE?
    // üîé Develop knowledge by observing, developing hypotheses, and running experiments

    // üîé If there is no one else there, building knowledge might be slow
    ifProp Nature.collaborators equal 0 [[
      prop Scientist.knowledge add 1
      featProp Scientist.Costume.costumeName setTo 'KB_meeple_thinking.png'

    ]]
    // üîé If there are people to collaborate with, knowledge building might go faster
    ifProp Nature.collaborators greaterThan 0 [[
      prop Scientist.knowledge add 2
      featProp Scientist.Costume.costumeName setTo 'KB_meeple_collabing.png'
    ]]

    // ‚úèÔ∏è LETS CHANGE THIS: What else impacts scientist's learning?
    // ‚úèÔ∏è For example, does it matter where else they have visited?
    ifProp global.placesVisited greaterThan 1 [[
      // ‚úèÔ∏è Do something else like maybe add more knowledge because having worked on these ideas helps?
      // dbgOut 'We have visited at least 1 human-made place before visiting a natural place'
    ]]

    ifProp global.natureVisited equal 1 [[
      // ‚úèÔ∏è Do something else like maybe add more knowledge because having observed this ecosystems helps?
      // dbgOut 'visiting the first natural place'
    ]]

    ifProp global.natureVisited greaterThan 1 [[
      // ‚úèÔ∏è Do something else like maybe add more knowledge because having observed different ecosystems helps?
      // dbgOut 'visiting a natural place when at least one other was visited'
    ]]

    // üîé Once they understand this ecosystem, scientists might be able to help them survive
    // üîé Does it always work this well, though?
    ifProp global.sharedScientificKnowledge greaterThan 50 [[
      prop Nature.health add 1
    ]]
  ]]
]]

when Scientist lastTouches Nature [[
  prop Nature.collaborators sub 1

  // collaborators is -1 if no one is there at all
  ifProp Nature.collaborators equal -1 [[
    // Change the art to show we have visited here
    ifProp Nature.name equal 'lake' [[
      featProp Nature.Costume.costumeName setTo 'KB_location_lake.png'
    ]]
    ifProp Nature.name equal 'garden' [[
      featProp Nature.Costume.costumeName setTo 'KB_location_garden.png'
    ]]
  ]]

  featProp Scientist.Costume.costumeName setTo 'KB_meeple_idle.png'
]]

// ============================================================
// SCIENTISTS interacting with a human-made PLACE
// ============================================================
when Scientist firstTouches Place [[
  prop Place.collaborators add 1

  // ‚úèÔ∏è LETS CHANGE what it says when a SCIENTIST visits home
  ifProp Place.name equal 'home' [[
    // also update the home art for this specific home
   // featProp Place.Costume.costumeName setTo 'KB_Place_HomeVisited.png'
   prop global.homeVisited setTo true
  ]]

  // ‚úèÔ∏è LETS CHANGE what it says when a SCIENTIST visits lab
  ifProp Place.name equal 'chemistry' [[
   prop global.chemistryVisited setTo true
  ]]
  
    ifProp Place.name equal 'biology' [[
   prop global.biologyVisited setTo true
  ]]
  
    ifProp Place.name equal 'embodied' [[
   prop global.embodiedVisited setTo true
  ]]
  
    ifProp Place.name equal 'modeling' [[
   prop global.modelingVisited setTo true
  ]]
  
      ifProp Place.name equal 'gardencenter' [[
   prop global.gardencenterVisited setTo true
  ]]
  
    ifProp Place.name equal 'conference' [[
   prop global.conferenceLocVisited setTo true
  ]]
  
     ifProp Place.name equal 'other' [[
   prop global.otherVisited setTo true
  ]]
  
       ifProp Place.name equal 'office' [[
   prop global.officeVisited setTo true
  ]]  
]]

when Scientist touches Place [[
  every 1 runAtStart [[
    // construct knowledge depending on the kind of place and if others are there

    // üîé WHAT do scientists do in NATURE?
    // üîé Develop knowledge by observing, developing hypotheses, and running experiments

    // üîé If there is no one else there, building knowledge might be slow
    ifProp Place.collaborators equal 0 [[
      prop Scientist.knowledge add 1
      featProp Scientist.Costume.costumeName setTo 'KB_meeple_thinking.png'

    ]]
    // üîé If there are people to collaborate with, knowledge building might go faster
    ifProp Place.collaborators greaterThan 0 [[
      prop Scientist.knowledge add 2
      featProp Scientist.Costume.costumeName setTo 'KB_meeple_collabing.png'
    ]]
    ]]
    ]]

when Scientist lastTouches Place [[
  prop Place.collaborators sub 1
  featProp Scientist.Costume.costumeName setTo 'KB_meeple_idle.png'
]]`
    },
    {
      "name": "Nature",
      "scriptText": `# BLUEPRINT Nature
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body

# PROGRAM INIT

// Add features
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Graphing
addFeature Population

// Setup costume
// TODO: When we switch to art, set that in the map setup not here
featProp Nature.Costume.costumeName setTo 'KB_location_garden.png'

// featCall Nature.Costume setColorizeHSV 0.3 0.5 0.8
featProp Nature.Costume.scale setTo 0.7

// Properties
// collaborators - start at -1 so that it requires 2 people at a place to have 1 collaborator
addProp collaborators number -1
addProp name string 'garden'

// Health of the natural ecosystem
addProp health number 20
prop Nature.health setMin 0
prop Nature.health setMax 100

// has a scientist been here before?
addProp wasVisited boolean false

// What kind of place is this?
// You can put anything so long as the scientist touches code uses it
// This is the default. Change it in the map setup.
addProp type string 'ecosystem'

// use subtype for more specifics
addProp subType string 'ecosystem'

// set name to trackerId to make it easier to read the later code
propPush Nature.trackerId
propPop Nature.name

featProp Nature.Graphing.meterProp setTo 'health'
featProp Nature.Graphing.meterColor setTo 65280


# PROGRAM UPDATE
onEvent Start [[
  ifExpr {{ (Nature.getProp('name').value == 'garden') }} [[
    featProp Nature.Costume.costumeName setTo 'KB_location_garden.png'
  ]]
  ifExpr {{ (Nature.getProp('name').value == 'lake') }} [[
    featProp Nature.Costume.costumeName setTo 'KB_location_lake.png'
  ]]

]]
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time
// This is also where you can handle touches between characters such as When Algae touches Fish`
    },
    {
      "name": "Place",
      "scriptText": `# BLUEPRINT Place
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body

# PROGRAM INIT

// Add features
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Graphing
addFeature Population

// Setup costume
// TODO: When we switch to art, set that in the map setup not here
featProp Place.Costume.costumeName setTo 'KB_building_other.png'
featProp Place.Costume.scale setTo 0.5

// Properties
// collaborators - start at -1 so that it requires 2 people at a place to have 1 collaborator
// how do we make sure the person already there gets it?
addProp collaborators number -1
addProp name string 'other'

// has a scientist been here before?
addProp wasVisited boolean false

// What kind of place is this?
// You can put anything so long as the scientist touches code uses it
// This is the default. Change it in the map setup.
addProp type string 'place'

// use the subType to change art
addProp subType string 'place'

// set name to trackerId to make it easier to read the later code
propPush Place.trackerId
propPop Place.name

ifExpr {{ (Place.getProp('name').value == 'home') }} [[
  featProp Place.Costume.costumeName setTo 'KB_building_home.png'
]]
ifExpr {{ (Place.getProp('name').value == 'office') }} [[
  featProp Place.Costume.costumeName setTo 'KB_building_office.png'
]]
ifExpr {{ (Place.getProp('name').value == 'chemistry') }} [[
  featProp Place.Costume.costumeName setTo 'KB_building_chem.png'
]]
ifExpr {{ (Place.getProp('name').value == 'biology') }} [[
  featProp Place.Costume.costumeName setTo 'KB_building_biology.png'
]]
ifExpr {{ (Place.getProp('name').value == 'modeling') }} [[
  featProp Place.Costume.costumeName setTo 'KB_building_modeling.png'
]]
ifExpr {{ (Place.getProp('name').value == 'embodied') }} [[
  featProp Place.Costume.costumeName setTo 'KB_building_embodied.png'
]]
ifExpr {{ (Place.getProp('name').value == 'gardencenter') }} [[
  featProp Place.Costume.costumeName setTo 'KB_building_gardencenter.png'
]]
ifExpr {{ (Place.getProp('name').value == 'conference') }} [[
  featProp Place.Costume.costumeName setTo 'KB_building_conference.png'
]]
ifExpr {{ (Place.getProp('name').value == 'other') }} [[
  featProp Place.Costume.costumeName setTo 'KB_building_other.png'
]]

# PROGRAM UPDATE
onEvent Start [[
  ifExpr {{ (Place.getProp('name').value == 'home') }} [[
    featProp Place.Costume.costumeName setTo 'KB_building_home.png'
  ]]
  ifExpr {{ (Place.getProp('name').value == 'office') }} [[
    featProp Place.Costume.costumeName setTo 'KB_building_office.png'
  ]]
  ifExpr {{ (Place.getProp('name').value == 'chemistry') }} [[
    featProp Place.Costume.costumeName setTo 'KB_building_chem.png'
  ]]
  ifExpr {{ (Place.getProp('name').value == 'biology') }} [[
    featProp Place.Costume.costumeName setTo 'KB_building_biology.png'
  ]]
  ifExpr {{ (Place.getProp('name').value == 'modeling') }} [[
    featProp Place.Costume.costumeName setTo 'KB_building_modeling.png'
  ]]
  ifExpr {{ (Place.getProp('name').value == 'embodied') }} [[
    featProp Place.Costume.costumeName setTo 'KB_building_embodied.png'
  ]]
  ifExpr {{ (Place.getProp('name').value == 'gardencenter') }} [[
    featProp Place.Costume.costumeName setTo 'KB_building_gardencenter.png'
  ]]
  ifExpr {{ (Place.getProp('name').value == 'conference') }} [[
    featProp Place.Costume.costumeName setTo 'KB_building_conference.png'
  ]]
  ifExpr {{ (Place.getProp('name').value == 'other') }} [[
    featProp Place.Costume.costumeName setTo 'KB_building_other.png'
  ]]

]]`
    },
    {
      "name": "PopupMessage",
      "scriptText": `# BLUEPRINT PopupMessage
# TAG isPozyxControllable false
# TAG isCharControllable false
# TAG isPTrackControllable false

# PROGRAM INIT

addFeature Costume
addFeature Physics
addFeature Graphing
addFeature Population

featProp PopupMessage.Costume.costumeName setTo 'GEN_onexone.json'
featProp PopupMessage.Graphing.text setTo ''
prop PopupMessage.zIndex setTo 500

addProp costumeToUse string ''
addProp textToUse string ''
addProp countDown Number 3

# PROGRAM UPDATE

every 0.1 runAtStart [[
  ifProp PopupMessage.costumeToUse notEqual '' [[
    propPush PopupMessage.costumeToUse
    featPropPop PopupMessage.Costume.costumeName
    prop PopupMessage.costumeToUse setTo ''
  ]]

  ifProp PopupMessage.textToUse notEqual '' [[
    propPush PopupMessage.textToUse
    featPropPop PopupMessage.Graphing.text
    prop PopupMessage.textToUse setTo ''
  ]]
]]
every 1 runAtStart [[
  prop PopupMessage.countDown sub 1
  ifExpr {{ PopupMessage.getProp('countDown').value == 0 }} [[
    featCall PopupMessage.Population removeCharacter
  ]]
]]
`
    },
    {
      "name": "KnowledgeMeter",
      "scriptText": `# BLUEPRINT KnowledgeMeter
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT

addFeature Costume
addFeature Population
addFeature Graphing

featProp KnowledgeMeter.Costume.costumeName setTo 'GEN_square.json'
featCall KnowledgeMeter.Costume setColorize 252 173 3
featProp KnowledgeMeter.Costume.width setTo 50
featProp KnowledgeMeter.Costume.height setTo 1

addProp sharedScientificKnowledge number 1

addProp meterY number 0

featProp KnowledgeMeter.Graphing.text setTo 'Science Knowledge'

# PROGRAM UPDATE

every 1 runAtStart [[
  // sum the knowledge of all scientists
  featCall KnowledgeMeter.Population countCharacterProp 'Scientist' 'knowledge'
  featPropPush KnowledgeMeter.Population.sum
  propPop KnowledgeMeter.sharedScientificKnowledge

  // update the shared variable in global
  propPush KnowledgeMeter.sharedScientificKnowledge
  propPop global.sharedScientificKnowledge

  // scale it up to span the screen with a bottom of just high enough to show the text
  // prop KnowledgeMeter.sharedScientificKnowledge mul 7.25

  // use the scaled number to set the meter height - but only if it is greater than 0 otherwise funny things happen
  ifProp KnowledgeMeter.sharedScientificKnowledge greaterThan 0 [[
    propPush KnowledgeMeter.sharedScientificKnowledge
    featPropPop KnowledgeMeter.Costume.height
  ]]

  // now use the height to set the y value since we position based on center of the object (not bottom)
  propPush KnowledgeMeter.sharedScientificKnowledge
  propPop KnowledgeMeter.meterY
  prop KnowledgeMeter.meterY div -2
  prop KnowledgeMeter.meterY add 325

  propPush KnowledgeMeter.meterY
  propPop KnowledgeMeter.y

]]


// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body`
    },
    {
      "name": "KnowledgePresented",
      "scriptText": `# BLUEPRINT KnowledgePresented
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp KnowledgePresented.Costume.costumeName setTo 'KB_ConferenceNotPresented.png'
featProp KnowledgePresented.Costume.scale setTo 0.3

# PROGRAM UPDATE
every 0.5 runAfter [[
  ifProp global.conferenceVisited equal true [[
    featProp KnowledgePresented.Costume.costumeName setTo 'KB_ConferencePresented.png'
  ]]
]]

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body`
    },
    {
      "name": "TextLabel",
      "scriptText": `# BLUEPRINT TextLabel
# PROGRAM INIT
addFeature Graphing
addFeature Costume
featProp TextLabel.Costume.costumeName setTo 'GEN_onexone.json'`
    },
    {
      "name": "ColorChip",
      "scriptText": `# BLUEPRINT ColorChip
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body


# PROGRAM INIT
addFeature Costume
featProp ColorChip.Costume.costumeName setTo 'GEN_square.json'
addFeature Physics

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Timer",
      "scriptText": `# BLUEPRINT Timer
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body


// üîé WHAT DOES THIS CHARACTER DO?
// üîé This is a timer character so that we can see how much time has passed in our model
// üîé We can use that time to think about how long the ecosystem survives if we want

# PROGRAM INIT
addFeature Graphing
addFeature Costume

// this is a hidden image since the timer is just text
featProp Timer.Costume.costumeName setTo 'GEN_onexone.json'

// this is the time we will track
addProp time number 0

// set the timer to the starting text
featProp Timer.Graphing.text setTo 'Time: 0'

# PROGRAM UPDATE
// Every second, add one to the time and then update the text on the timer character to say Time: #
every 1 runAtStart [[
  prop Timer.time add 1
  exprPush {{ 'Time: ' + Timer.getProp('time').value }}
  featPropPop Timer.Graphing.text
]]`
    },
    {
      "name": "Marker",
      "scriptText": `# BLUEPRINT Marker
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp agent.Costume.costumeName setTo 'KB_marker_other.png'

addProp type string 'other'
addProp visited boolean false
prop zIndex setTo 50
featProp Marker.Costume.scale setTo 0.3
# PROGRAM UPDATE
onEvent Start [[
  ifExpr {{ (Marker.getProp('type').value == 'home') }} [[
    featProp Marker.Costume.costumeName setTo 'KB_marker_home_invert.png'
  ]]
  ifExpr {{ (Marker.getProp('type').value == 'office') }} [[
    featProp Marker.Costume.costumeName setTo 'KB_marker_office_invert.png'
  ]]

  ifExpr {{ (Marker.getProp('type').value == 'chemistry') }} [[
    featProp Marker.Costume.costumeName setTo 'KB_marker_chem_invert.png'
  ]]
  ifExpr {{ (Marker.getProp('type').value == 'biology') }} [[
    featProp Marker.Costume.costumeName setTo 'KB_marker_biology_invert.png'
  ]]
  ifExpr {{ (Marker.getProp('type').value == 'modeling') }} [[
    featProp Marker.Costume.costumeName setTo 'KB_marker_modeling_invert.png'
  ]]
  ifExpr {{ (Marker.getProp('type').value == 'embodied') }} [[
    featProp Marker.Costume.costumeName setTo 'KB_marker_embodied_invert.png'
  ]]
  ifExpr {{ (Marker.getProp('type').value == 'gardencenter') }} [[
    featProp Marker.Costume.costumeName setTo 'KB_marker_gardencenter_invert.png'
  ]]
  ifExpr {{ (Marker.getProp('type').value == 'conference') }} [[
    featProp Marker.Costume.costumeName setTo 'KB_marker_conference_invert.png'
  ]]
  ifExpr {{ (Marker.getProp('type').value == 'other') }} [[
    featProp Marker.Costume.costumeName setTo 'KB_marker_other_invert.png'
  ]]
]]

every 1 runAtStart [[

  ifExpr {{ (Marker.getProp('type').value == 'home') }} [[
    ifExpr {{ (global.getProp('homeVisited').value == true) }} [[
      featProp Marker.Costume.costumeName setTo 'KB_marker_home.png'
    ]]
  ]]

  ifExpr {{ (Marker.getProp('type').value == 'office') }} [[
    ifExpr {{ (global.getProp('officeVisited').value == true) }} [[
      featProp Marker.Costume.costumeName setTo 'KB_marker_office.png'
    ]]
  ]]

  ifExpr {{ (Marker.getProp('type').value == 'chemistry') }} [[
    ifExpr {{ (global.getProp('chemistryVisited').value == true) }} [[
      featProp Marker.Costume.costumeName setTo 'KB_marker_chem.png'
    ]]
  ]]

  ifExpr {{ (Marker.getProp('type').value == 'biology') }} [[
    ifExpr {{ (global.getProp('biologyVisited').value == true) }} [[
      featProp Marker.Costume.costumeName setTo 'KB_marker_biology.png'
    ]]
  ]]

  ifExpr {{ (Marker.getProp('type').value == 'modeling') }} [[
    ifExpr {{ (global.getProp('modelingVisited').value == true) }} [[
      featProp Marker.Costume.costumeName setTo 'KB_marker_modeling.png'
    ]]
  ]]

  ifExpr {{ (Marker.getProp('type').value == 'embodied') }} [[
    ifExpr {{ (global.getProp('embodiedVisited').value == true) }} [[
      featProp Marker.Costume.costumeName setTo 'KB_marker_embodied.png'
    ]]
  ]]

  ifExpr {{ (Marker.getProp('type').value == 'gardencenter') }} [[
    ifExpr {{ (global.getProp('gardencenterVisited').value == true) }} [[
      featProp Marker.Costume.costumeName setTo 'KB_marker_gardencenter.png'
    ]]
  ]]

  ifExpr {{ (Marker.getProp('type').value == 'conference') }} [[
    ifExpr {{ (global.getProp('conferenceLocVisited').value == true) }} [[
      featProp Marker.Costume.costumeName setTo 'KB_marker_conference.png'
    ]]
  ]]

  ifExpr {{ (Marker.getProp('type').value == 'other') }} [[
    ifExpr {{ (global.getProp('otherVisited').value == true) }} [[
      featProp Marker.Costume.costumeName setTo 'KB_marker_other.png'
    ]]
  ]]


]]`
    },
    {
      "name": "Background",
      "scriptText": `# BLUEPRINT Background
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp agent.Costume.costumeName setTo 'KB_background.png'

prop zIndex setTo -100
featProp agent.Costume.scale setTo 3.2


# PROGRAM UPDATE
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]

// COMMENT KEY
// üîé WHAT DOES THIS DO? heading
// üîé body
// ‚úèÔ∏è LETS CHANGE THIS: heading
// ‚úèÔ∏è body`
    }
  ],
  "instances": [
    {
      "id": "10",
      "label": "Knowledge Meter",
      "bpid": "KnowledgeMeter",
      "initScript": `prop x setTo 440
prop y setTo 325`
    },
    {
      "id": "14",
      "label": "KeyLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 472.49
prop y setTo -406.54
featProp Graphing text setTo 'Key:'
featCall Costume setColorize 0 0 0

`
    },
    {
      "id": "15",
      "label": "HealthLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 473.75
prop y setTo -370.75
featProp Graphing text setTo 'Ecoysystem Health'
prop zIndex setTo 100`
    },
    {
      "id": "16",
      "label": "KnowledgeLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 473.47
prop y setTo -314.42
featProp Graphing text setTo 'Knowledge'
prop zIndex setTo 100`
    },
    {
      "id": "17",
      "label": "HealthChip",
      "bpid": "ColorChip",
      "initScript": `prop x setTo 473.96
prop y setTo -342.79
featCall Costume setColorize 7 224 119
prop zIndex setTo 95
featProp agent.Costume.width setTo 150
featProp agent.Costume.height setTo 60
`
    },
    {
      "id": "28",
      "label": "KnowledgeChip",
      "bpid": "ColorChip",
      "initScript": `prop x setTo 473.96
prop y setTo -295.29
featCall Costume setColorize 252 173 3
prop zIndex setTo 95
featProp agent.Costume.width setTo 150
featProp agent.Costume.height setTo 30`
    },
    {
      "id": "29",
      "label": "Timer29",
      "bpid": "Timer",
      "initScript": `prop x setTo 472.69
prop y setTo -275.08`
    },
    {
      "id": "33",
      "label": "Garden",
      "bpid": "Nature",
      "initScript": `prop x setTo -273.25
      prop name setTo 'garden'

prop y setTo -276.63`
    },
    {
      "id": "34",
      "label": "Lake",
      "bpid": "Nature",
      "initScript": `prop x setTo -295.52
prop y setTo 173.08
prop name setTo 'lake'
prop zIndex setTo -10`
    },
    {
      "id": "36",
      "label": "Chemistry Lab",
      "bpid": "Place",
      "initScript": `prop x setTo 91.01
prop y setTo 105.02
prop name setTo 'chemistry'`
    },
    {
      "id": "37",
      "label": "Biology Lab",
      "bpid": "Place",
      "initScript": `prop x setTo 253.54
prop y setTo 89.10
prop name setTo 'biology'`
    },
    {
      "id": "38",
      "label": "Conference Center",
      "bpid": "Place",
      "initScript": `prop x setTo -117.49
prop y setTo -23.27
prop name setTo 'conference'`
    },
    {
      "id": "39",
      "label": "House 2",
      "bpid": "Place",
      "initScript": `prop x setTo -87.99
prop y setTo 296.40
prop name setTo 'home'`
    },
    {
      "id": "40",
      "label": "Movement Lab",
      "bpid": "Place",
      "initScript": `prop x setTo 169.03
prop y setTo 273.79
prop name setTo 'embodied'`
    },
    {
      "id": "41",
      "label": "Modeling Lab",
      "bpid": "Place",
      "initScript": `prop x setTo 329.30
prop y setTo 270.22
prop name setTo 'modeling'`
    },
    {
      "id": "43",
      "label": "Garden Center",
      "bpid": "Place",
      "initScript": `prop x setTo 317.72
prop y setTo -294.15
prop name setTo 'gardencenter'`
    },
    {
      "id": "45",
      "label": "conferencemarker",
      "bpid": "Marker",
      "initScript": `prop x setTo -125.66
prop y setTo -84.87
prop type setTo 'conference'`
    },
    {
      "id": "46",
      "label": "homemarker",
      "bpid": "Marker",
      "initScript": `prop x setTo -93.93
prop y setTo 238.55
prop type setTo 'home'`
    },
    {
      "id": "47",
      "label": "gardencentermarker",
      "bpid": "Marker",
      "initScript": `prop x setTo 311.75
prop y setTo -349.79
prop type setTo 'gardencenter'`
    },
    {
      "id": "48",
      "label": "embodiedmarker",
      "bpid": "Marker",
      "initScript": `prop x setTo 167.06
prop y setTo 207.59
prop type setTo 'embodied'`
    },
    {
      "id": "49",
      "label": "modelingmarker",
      "bpid": "Marker",
      "initScript": `prop x setTo 329.75
prop y setTo 211.45
prop type setTo 'modeling'`
    },
    {
      "id": "50",
      "label": "chem marker",
      "bpid": "Marker",
      "initScript": `prop x setTo 86.46
prop y setTo 46.36
prop type setTo 'chemistry'`
    },
    {
      "id": "52",
      "label": "biomarker",
      "bpid": "Marker",
      "initScript": `prop x setTo 251.46
prop y setTo 30.82
prop type setTo 'biology'`
    },
    {
      "id": "53",
      "label": "officemarker",
      "bpid": "Marker",
      "initScript": `prop x setTo 172.82
prop y setTo -161.97
prop type setTo 'office'`
    },
    {
      "id": "54",
      "label": "House 1",
      "bpid": "Place",
      "initScript": `prop x setTo 3.49
prop y setTo -280.60
prop name setTo 'home'
`
    },
    {
      "id": "55",
      "label": "homemarker2",
      "bpid": "Marker",
      "initScript": `prop x setTo -5.47
prop y setTo -336.62
prop type setTo 'home'`
    },
    {
      "id": "58",
      "label": "Background58",
      "bpid": "Background",
      "initScript": `prop x setTo -0.45
prop y setTo -2.44`
    },
    {
      "id": "59",
      "label": "Office",
      "bpid": "Place",
      "initScript": `prop x setTo 171.53
prop y setTo -116.51
prop name setTo 'office'\n`
    }
  ]
}