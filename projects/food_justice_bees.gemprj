{
  "id": "food_justice_bees",
  "label": "Food Justice: Bees",
  "metadata": {
    "top": -400,
    "right": 500,
    "bottom": 400,
    "left": -500,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 102,
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [
    {
      "initScript": `\n       
      // TODO: All new artowk, of course 
      // TODO: can we circumvent the prepare and start on subsequent runs? 
      // TODO: fix reset on time 
      
       prop global.roundType setTo 'init'


        // de-activate bees so they do not do things
        featCall global.Population charactersForEach 'ScoutBee' [[
          prop ScoutBee.isInert setTo true
        ]]

        // remove flowers from prior run now rather than at the end of the run so the kids can
        // discuss what they looked like in discussing the run 
        featCall global.Population charactersForEach 'Flower' [[
          featCall Flower.Population removeCharacter
        ]]

        featCall global.Population tellCharacterByName 'Background' [[
          featProp character.Costume.costumeName setTo 'FJ_background_choose.png'
        ]]

        featCall global.Population charactersForEach 'FieldChoiceButton' [[
          prop FieldChoiceButton.visible setTo true
        ]]

      `,
      "endScript": `
        featCall global.Population charactersForEach 'FieldChoiceButton' [[
          prop FieldChoiceButton.visible setTo false
        ]]

        // stop the current graph from updating 
        featCall global.Population charactersForEach 'PollinationGraph' [[
          featProp PollinationGraph.Graphing.graphFrequency setTo 0
        ]]

        ifProp global.fieldType equal 'garden' [[
          featCall global.Population tellCharacterByName 'Background' [[
            featProp character.Costume.costumeName setTo 'FJ_background_garden.png'
          ]]

          featCall global.Graphing showMessage  'You have chosen the garden! Click prep round, then start to try it out.'
        
        ]]
        ifProp global.fieldType equal 'parking lot' [[
          featCall global.Population tellCharacterByName 'Background' [[
            featProp character.Costume.costumeName setTo 'FJ_background_parking_lot.png'
          ]]

          featCall global.Graphing showMessage  'You have chosen the parking lot! Click prep round, then start to try it out.'
        ]]
      `
    },
    {
      "time": 100,
      "initScript": `
        // TODO: Move this to a feature (Timer?)
        prop global.roundType setTo 'run'

        // Move prior pollination graphs down a bit, and delete if there are too many
        featCall global.Population charactersForEach 'PollinationGraph' [[

          prop PollinationGraph.row add 1
          ifProp PollinationGraph.row equal 4 [[
            // remove the graph since we are out of space
            featCall PollinationGraph.Population removeCharacter
          ]]
          // if we didnt remove it, shift this down a bit 
          ifProp PollinationGraph.row lessThan 4 [[
            prop PollinationGraph.y add 170
          ]]
        ]]

        // create a new pollination graph in the top row / position 
        featCall global.Population createCharacter PollinationGraph [[
          prop PollinationGraph.x setTo 420
          prop PollinationGraph.y setTo -35
          propPush global.fieldType
          propPop PollinationGraph.fieldType
          
          propPush PollinationGraph.fieldType
          propPop global.tempString
          prop global.tempString add ' pollination count round '
          // TODO: make this better 
          exprPush {{ global.getProp('tempString').value + global.getProp('roundNum').value }}
          propPop global.tempString
          propPush global.tempString
          featPropPop PollinationGraph.Graphing.text
        ]]

        // activate bees so they do things
        featCall global.Population charactersForEach 'ScoutBee' [[
          prop ScoutBee.isInert setTo false
          // TODO: Move to a centralized initialize function for easier startup
          prop ScoutBee.energyLevel setTo 100
          prop ScoutBee.nectarCount setTo 0
        ]]

        // Based on the field type (garden or parking lot) do some setup below ... 
        ifProp global.fieldType equal 'garden' [[
          // setup the correct background image 
          featCall global.Population tellCharacterByName 'Background' [[
            featProp character.Costume.costumeName setTo 'FJ_background_garden.png'
          ]]

          // TODO: add a method to set the label and set that up 

          // place a lot of flowers of at least 2-3 types, grouped
          featCall global.Population createCharacter Flower [[
                prop Flower.flowerType setTo 'yellow'
                prop Flower.pollenColor setTo 'yellow'
                featProp Flower.Costume.costumeName setTo 'HB_yellowFlower.png'
                prop Flower.x setTo -400
                prop Flower.y setTo 100
                prop Flower.flowerId setTo 0
          ]]
          featCall global.Population createCharacter Flower [[
                prop Flower.flowerType setTo 'yellow'
                prop Flower.pollenColor setTo 'yellow'
                featProp Flower.Costume.costumeName setTo 'HB_yellowFlower.png'
                prop Flower.x setTo -300
                prop Flower.y setTo 100
                prop Flower.flowerId setTo 1
          ]]

          featCall global.Population createCharacter Flower [[
                prop Flower.flowerType setTo 'red'
                prop Flower.pollenColor setTo 'red'
                featProp Flower.Costume.costumeName setTo 'HB_redFlower.png'
                prop Flower.x setTo 200
                prop Flower.y setTo 100
                prop Flower.flowerId setTo 2
          ]]

          featCall global.Population createCharacter Flower [[
                prop Flower.flowerType setTo 'red'
                prop Flower.pollenColor setTo 'red'
                featProp Flower.Costume.costumeName setTo 'HB_redFlower.png'
                prop Flower.x setTo 100
                prop Flower.y setTo 100
                prop Flower.flowerId setTo 3
          ]]
        ]]

        ifProp global.fieldType equal 'parking lot' [[
          // setup the correct background image 
          featCall global.Population tellCharacterByName 'Background' [[
            featProp character.Costume.costumeName setTo 'FJ_background_parking_lot.png'
          ]]

          // place a lot of flowers of at least 2-3 types, grouped
          featCall global.Population createCharacter Flower [[
                prop Flower.flowerType setTo 'yellow'
                prop Flower.pollenColor setTo 'yellow'
                featProp Flower.Costume.costumeName setTo 'HB_yellowFlower.png'
                prop Flower.x setTo 260
                prop Flower.y setTo -350
                prop Flower.flowerId setTo 0
          ]]
          featCall global.Population createCharacter Flower [[
                prop Flower.flowerType setTo 'yellow'
                prop Flower.pollenColor setTo 'yellow'
                featProp Flower.Costume.costumeName setTo 'HB_yellowFlower.png'
                prop Flower.x setTo -400
                prop Flower.y setTo -350
                prop Flower.flowerId setTo 1
          ]]
        ]]

        prop global.roundNum add 1
      `,
      "endScript": `
        // TODO: update the info about the run if it is not current 
        // TODO: Make copies of / clear out the graph 

        // Update art on flowers to show they were pollinated
        featCall global.Population charactersForEach 'Flower' [[
          ifProp Flower.pollinationCount greaterThan 0 [[
            ifProp Flower.pollenColor equal 'red' [[
              featProp Flower.Costume.costumeName setTo 'HB_redFlowerPollinated.png'
            ]]
            ifProp Flower.pollenColor equal 'yellow' [[
              featProp Flower.Costume.costumeName setTo 'HB_yellowFlowerPollinated.png'
            ]]
          ]]
        ]]

        // Provide suggestions for what should go to the ECA
        featCall global.Graphing showMessage  'Nice work! Remember:'
        featCall global.Graphing showMessage  'You can message ECA1 about what you noticed.'
        featCall global.Graphing showMessage  'Or message ECA2 if you have bee questions.'
        featCall global.Graphing showMessage  'Press the prep round button when you are ready to try a new model.'

        
      `
    }
  ],
  "blueprints": [
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

# PROGRAM INIT

// TODO update default templates for characters and models

addFeature IU
addFeature Population
addFeature Graphing

// NOTE: using population in the round code 

prop global.visible setTo false

// so we know how many rounds we have run through
// TODO: make sure this is incrementing
addProp roundNum number 0

// init and run
addProp roundType string 'init'

// Is this a garden or a parking lot?
addProp fieldType string 'garden'

addProp tempString string ''

// popup messages
addProp xForPopup number 0
addProp yForPopup number 0
addProp textForPopup string ''
featCall global.IU setupFunction 'popupMessage' [[

  featCall global.Population createCharacter PopupEffect [[
    propPush global.textForPopup
    propPop PopupEffect.textToUse
    prop PopupEffect.costumeToUse setTo ''
   
    propPush global.xForPopup
    propPop PopupEffect.x
    propPush global.yForPopup
    propPop PopupEffect.y
  ]]
]]

# PROGRAM UPDATE`
    },
    {
      "name": "ScoutBee",
      "scriptText": `# BLUEPRINT ScoutBee
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT

addFeature Costume
addFeature Physics
addFeature Touches
addFeature Graphing
addFeature IU
addFeature Population
addFeature Movement

featProp ScoutBee.Costume.costumeName setTo 'FJ_bee_empty.png'
featProp ScoutBee.Costume.scale setTo 0.3
prop ScoutBee.zIndex setTo 500

// what flower pollen are we carrying, -1 is none
addProp flowerId number -1

// what color is the pollen - use 0 for empty
addProp pollenColor string 'empty'

// how much nectar are we carrying
addProp nectarCount number 0

// how much energy do we have
addProp energyLevel number 100
prop ScoutBee.energyLevel setMin 0
prop ScoutBee.energyLevel setMax 100

// monitor flower Touches
featCall ScoutBee.Touches monitor 'Flower' c2b
featCall ScoutBee.Touches monitor 'Hive' c2b

featProp ScoutBee.Graphing.meterProp setTo 'energyLevel'
featProp ScoutBee.Graphing.meterColor setTo 11416319


# PROGRAM UPDATE


// Flip the artwork to point left or right depending on the direction the character is moving
ifFeatProp ScoutBee.Movement.compassDirection equal 'E' [[
  featProp ScoutBee.Costume.flipX setTo false
]]
ifFeatProp ScoutBee.Movement.compassDirection equal 'W' [[
  featProp ScoutBee.Costume.flipX setTo true
]]

// use a little energy and maybe update the meter
every 1 runAtStart [[

  ifProp ScoutBee.isInert equal false [[

    prop ScoutBee.energyLevel sub 5
    
    ifProp ScoutBee.energyLevel equal 0 [[
      featCall ScoutBee.IU logString 'A bee died from running out of energy'
      prop ScoutBee.alpha setTo 0.5
      prop ScoutBee.isInert setTo true

      prop global.textForPopup setTo 'Whoops, ran out of energy!' 
      propPush ScoutBee.x
      propPop global.xForPopup
      propPush ScoutBee.y
      propPop global.yForPopup

      featCall global.IU callFunction 'popupMessage'

    ]]
  ]]
  
]]

// when first touch a flower
when ScoutBee centerfirsttouches Flower [[
  featProp ScoutBee.Costume.glow setTo 2

  // drop off pollen if appropriate (e.g., different id)
  ifExpr {{ScoutBee.getProp('flowerId').value != Flower.getProp('flowerId').value }} [[
    // if we are carrying pollen 
    ifExpr {{ScoutBee.getProp('pollenColor').value == Flower.getProp('pollenColor').value }} [[
      // the flower has been pollinated because it is the same species
      prop Flower.pollinationCount add 1
    ]]

    // either way the bee picks up the pollen type 
    propPush Flower.flowerId   
    propPop ScoutBee.flowerId

    propPush Flower.pollenColor   
    propPop ScoutBee.pollenColor
   
    ifProp ScoutBee.pollenColor equal 'red' [[
      featProp ScoutBee.Costume.costumeName setTo 'FJ_bee_red.png'
    ]]

    ifProp ScoutBee.pollenColor equal 'yellow' [[
      featProp ScoutBee.Costume.costumeName setTo 'FJ_bee_yellow.png'
    ]]

    //TODO: indicate the pollen color being carried 

  ]]
]]

when ScoutBee centertouches Flower [[
  // take some nectar from the flower every second
  every 1 [[
    featProp ScoutBee.Costume.glow setTo 2

    ifProp Flower.nectarCount greaterThan 0 [[
      prop ScoutBee.nectarCount add 1
      prop Flower.nectarCount sub 1
    ]]
  ]]
]]

when ScoutBee centerlasttouches Flower [[
  featProp ScoutBee.Costume.glow setTo 0
]]

when ScoutBee centerfirsttouches Hive [[
  featProp ScoutBee.Costume.glow setTo 2

  // reset energy
  prop ScoutBee.energyLevel setTo 100

  // transfer nectar to hive
  propPush ScoutBee.nectarCount
  propPush Hive.nectarCount
  stackAdd
  propPop Hive.nectarCount
  prop ScoutBee.nectarCount setTo 0

  // reset pollen
  prop ScoutBee.flowerId setTo -1
  prop ScoutBee.pollenColor setTo 'empty'
  featProp ScoutBee.Costume.costumeName setTo 'FJ_bee_empty.png'

]]

when ScoutBee centertouches Hive [[
    every 1 [[
    featProp ScoutBee.Costume.glow setTo 2
  ]]
]]

when ScoutBee centerlasttouches Hive [[
  featProp ScoutBee.Costume.glow setTo 0
]]


`
    },
    {
      "name": "Flower",
      "scriptText": `# BLUEPRINT Flower
# TAG isPozyxControllable false
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT

addFeature Costume
addFeature Physics
addFeature Graphing
addFeature Population

// setup the costume
featProp Flower.Costume.costumeName setTo 'HB_yellowFlower.png'
featProp Flower.Costume.scale setTo 0.3

// TODO update this to be sequential on creation
// unique flower ID to avoid self-pollination
addProp flowerId number 0
// what flower type is this?
addProp flowerType string ''
// what color is the flower / pollen for tracking on the bee
addProp pollenColor string 'empty'

// in case we want this to go down later, track nectar and pollen amount
addProp nectarCount number 100
addProp pollenCount number 20

// how many times has this flower been pollinated?
addProp pollinationCount number 0
prop Flower.pollinationCount setMin 0
prop Flower.pollinationCount setMax 10

featProp Flower.Graphing.meterProp setTo 'pollinationCount' 
featProp Flower.Graphing.meterColor setTo 65280


# PROGRAM UPDATE`
    },
    {
      "name": "Hive",
      "scriptText": `# BLUEPRINT Hive
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Graphing

featProp Hive.Costume.costumeName setTo 'HB_hiveCommercial.png'
featProp Hive.Costume.scale setTo 0.3

addProp nectarCount number 20
prop Hive.nectarCount setMin 0
prop Hive.nectarCount setMax 500

featProp Hive.Graphing.meterProp setTo  'nectarCount'


# PROGRAM UPDATE
`
    },
    {
      "name": "Background",
      "scriptText": `# BLUEPRINT Background
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume

featProp Background.Costume.costumeName setTo 'FJ_background_choose.png'
prop Background.zIndex setTo -500

# PROGRAM UPDATE
`
    },
    {
      "name": "FieldChoiceButton",
      "scriptText": `# BLUEPRINT FieldChoiceButton
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature IU
addFeature Graphing
addFeature Timer

featProp FieldChoiceButton.Costume.costumeName setTo 'GEN_square.json'
featProp FieldChoiceButton.Costume.scale setTo 0.5

addProp fieldType string 'garden'


# PROGRAM UPDATE

featCall FieldChoiceButton.IU handleClick [[
  featCall FieldChoiceButton.Timer stopRound
  propPush FieldChoiceButton.fieldType
  propPop global.fieldType
]]
`
    },
    {
      "name": "PopupEffect",
      "scriptText": `# BLUEPRINT PopupEffect
      # TAG isPozyxControllable false
      # TAG isCharControllable false
      # TAG isPTrackControllable false

      # PROGRAM INIT

      // TODO: move this all to a feature 
      addFeature Costume
      addFeature Physics
      addFeature Graphing
      addFeature Population

      featProp PopupEffect.Costume.costumeName setTo 'GEN_onexone.json'
      prop PopupEffect.zIndex setTo 600

      featProp PopupEffect.Graphing.wordWrapWidth setTo 300
      featProp PopupEffect.Graphing.fontSize setTo 28
      featProp PopupEffect.Graphing.text setTo ''

      addProp costumeToUse string ''
      addProp textToUse string 'TEST'
      addProp countDown Number 2

      # PROGRAM UPDATE

      every 0.1 runAtStart [[
        ifProp PopupEffect.costumeToUse notEqual '' [[
          propPush PopupEffect.costumeToUse
          featPropPop PopupEffect.Costume.costumeName
          prop PopupEffect.costumeToUse setTo ''
        ]]

        ifProp PopupEffect.textToUse notEqual '' [[
          propPush PopupEffect.textToUse
          featPropPop PopupEffect.Graphing.text
          prop PopupEffect.textToUse setTo ''
        ]]
      ]]
      every 1 runAtStart [[

        prop PopupEffect.countDown sub 1
        ifExpr {{ PopupEffect.getProp('countDown').value == 0 }} [[
          featCall PopupEffect.Population removeCharacter
        ]]
      ]]
      `
    },
    {
      "name": "PollinationGraph",
      "scriptText": `# BLUEPRINT PollinationGraph
      # TAG isCharControllable false
      # TAG isPozyxControllable false
      # TAG isPTrackControllable false

      # PROGRAM INIT
      addFeature Costume
      addFeature Graphing
      addFeature Population

      addProp totalPollinationCount number 0

      featProp PollinationGraph.Costume.costumeName setTo 'GEN_onexone.json'
      featProp PollinationGraph.Graphing.isLargeGraphic setTo true
      featProp PollinationGraph.Graphing.graphProp setTo 'totalPollinationCount'
      featProp PollinationGraph.Graphing.graphMinY setTo 0
      featProp PollinationGraph.Graphing.graphMaxY setTo 50
      featProp PollinationGraph.Graphing.graphMinX setTo 0
      featProp PollinationGraph.Graphing.graphMaxX setTo 100
      featProp PollinationGraph.Graphing.text setTo 'pollination count'
      featProp PollinationGraph.Graphing.meterColor setTo 65280
      featProp PollinationGraph.Graphing.wordWrapWidth setTo 150


      // what row are we in on the screen (4 total, incremented at end of round)
      addProp row number 1

      addProp fieldType string ''

      # PROGRAM UPDATE
      every 1 runAtStart [[
        // only update if this is the main graph, otherwise leave it as a record
        ifProp PollinationGraph.row equal 1 [[
          featCall PollinationGraph.Population countCharacterProp 'Flower' 'pollinationCount'
          featPropPush PollinationGraph.Population.avg
          propPop PollinationGraph.totalPollinationCount
        ]]
      ]]

      `
    },
    {
      "name": "Key",
      "scriptText": `# BLUEPRINT Key
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp Key.Costume.costumeName setTo 'FJ_key.png'
featProp Key.Costume.scale setTo 0.5

# PROGRAM UPDATE`
    }
  ],
  "instances": [
    {
      "id": "1",
      "label": "Hive",
      "bpid": "Hive",
      "initScript": `prop Hive.x setTo -421.00
prop Hive.y setTo 292.23`
    },
    {
      "id": "2",
      "label": "Background",
      "bpid": "Background",
      "initScript": `prop Background.x setTo 0
prop Background.y setTo 90`
    },
    {
      "id": "3",
      "label": "Garden",
      "bpid": "FieldChoiceButton",
      "initScript": `prop FieldChoiceButton.x setTo -186.68
prop FieldChoiceButton.y setTo 44.82
prop FieldChoiceButton.fieldType setTo 'garden'
`
    },
    {
      "id": "4",
      "label": "Parking Lot",
      "bpid": "FieldChoiceButton",
      "initScript": `prop FieldChoiceButton.x setTo 172.69
prop FieldChoiceButton.y setTo 39.72
prop FieldChoiceButton.fieldType setTo 'parking lot'
`
    },
    {
      "id": "6",
      "label": "Key6",
      "bpid": "Key",
      "initScript": `prop Key.x setTo 413.81
prop Key.y setTo -265.94`
    }
  ]
}