{
  "id": "aquatic_Sarah-food-web",
  "label": "Aquatic Ecosystems",
  "description": "Tweaks for later runs",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 102,
    "roundsCanLoop": true
  },
  "rounds": [],
  "blueprints": [
    {
      "name": "Sunbeam",
      "scriptText": `# BLUEPRINT Sunbeam
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature Costume
featProp Sunbeam.Costume.costumeName setTo 'circle.json'
featCall Sunbeam.Costume setColorize 1 1 0
prop Sunbeam.alpha setTo 0.3
prop Sunbeam.zIndex setTo 100

addProp speed Number 20
// STUDENTS_MAY_CHANGE - to set the speed of the sunbeam
prop Sunbeam.speed setTo 20

addProp energyRate Number 5
// STUDENTS_MAY_CHANGE - to set the amount of energy the sunbeam gives to algae
prop Sunbeam.energyRate setTo 5

addProp direction Number 1
// STUDENTS_MAY_CHANGE - to set which direction the sunbeam moves (right: 1, left: -1)
prop Sunbeam.direction setTo 1

addFeature Physics
// STUDENTS_MAY_CHANGE - how wide the sunbeam is
featProp Sunbeam.Costume.scale setTo 0.4
// STUDENTS_MAY_CHANGE - how tall the sunbeam is
featProp Sunbeam.Costume.scaleY setTo 2.5

addFeature Touches

// default position for moving across the top
prop Sunbeam.x setTo -400
prop Sunbeam.y setTo -180

# PROGRAM UPDATE
onEvent Tick [[
  exprPush {{ Sunbeam.x + Sunbeam.getProp('direction').value * (Sunbeam.getProp('speed').value); }}
  propPop Sunbeam.x

  ifExpr {{ ((Sunbeam.getProp('direction').value == 1) && (Sunbeam.x > 400)) || ((Sunbeam.getProp('direction').value == -1) && (agent.x < -400)) }} [[
    exprPush {{ 400 * Sunbeam.getProp('direction').value * -1 }}
    propPop Sunbeam.x
  ]]
]]`
    },
    {
      "name": "Timer",
      "scriptText": `# BLUEPRINT Timer
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature AgentWidgets
addFeature Costume
featProp Timer.Costume.costumeName setTo 'onexone.json'

addProp time Number 0

featProp Timer.AgentWidgets.text setTo 'Time: 0'

# PROGRAM UPDATE
every 1 runAtStart [[
  prop Timer.time add 1
  exprPush {{ 'Time: ' + Timer.getProp('time').value }}
  featPropPop Timer.AgentWidgets.text 
]]
 `
    },
    {
      "name": "Turtle",
      "scriptText": `# BLUEPRINT Turtle
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false
# PROGRAM INIT
addFeature Costume
addFeature AgentWidgets
addFeature Movement

// temp until we get new art
featProp Turtle.Costume.costumeName setTo 'turtle_sprites.json'

addProp energyLevel Number 50
prop Turtle.energyLevel setMax 100
prop Turtle.energyLevel setMin 0

addProp energyUse Number 1

addProp health String 'healthy'

// STUDENTS_MAY_CHANGE - to change how quickly turtle use up energy and get hungry
prop Turtle.energyUse setTo 1

addFeature Physics

featProp Turtle.Costume.scale setTo 0.15

// set Touches
addFeature Touches
featCall Turtle.Touches monitor 'Fish' b2b
featCall Turtle.Touches monitor 'Trash' b2b

// show meter immediately
featProp Turtle.AgentWidgets.meterProp setTo 'energyLevel'

featProp Turtle.AgentWidgets.text setTo ''

# PROGRAM UPDATE

ifExpr {{ Turtle.prop.Movement.compassDirection.value === 'E' }} [[
  featProp Turtle.Costume.flipX setTo false
]]
ifExpr {{ Turtle.prop.Movement.compassDirection.value === 'W' }} [[
  featProp Turtle.Costume.flipX setTo true
]]

every 1 runAtStart [[
  // foodLevel goes down every n seconds
  exprPush {{ Turtle.getProp('energyLevel').value - Turtle.getProp('energyUse').value }}
  propPop Turtle.energyLevel

  ifExpr {{ Turtle.getProp('energyLevel').value == 0 }} [[
    prop Turtle.isInert setTo true
    prop Turtle.alpha setTo 0.3
  ]]
]]

when Turtle touches Fish [[
  every 1 runAtStart [[

    // only eat the fish if you are under 50% full or healthy
    ifExpr {{ (Turtle.getProp('energyLevel').value < 50) || (Turtle.getProp('health').value == 'healthy') }} [[

      // only glow when we are healthy and can eat
      featProp Turtle.Costume.glow setTo 1

      // Turtle gains some energy
      prop Turtle.energyLevel add 20

      // Fish is dead
      prop Fish.isInert setTo true
      prop Fish.alpha setTo 0.3
      featProp Fish.Costume setPose 2
      prop Fish.energyLevel setTo 0
    ]]

  ]]
]]

when Turtle lastTouches Fish [[
  featProp Turtle.Costume.glow setTo 0
]]

when Turtle touches Trash [[
  every 1 runAtStart [[
    // always glow to show the interaction
    featProp Turtle.Costume.glow setTo 0.5

    prop Turtle.health setTo 'hurt'
    featProp Turtle.Costume setColorizeHSV 0.5 1 0.5
    featCall Trash.Population removeAgent

    // change art
  ]]
]]

when Turtle lastTouches Trash [[
  featProp Turtle.Costume.glow setTo 0

]]`
    },
    {
      "name": "Trash",
      "scriptText": `# BLUEPRINT Trash
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Population
featProp Trash.Costume.costumeName setTo 'trash.json'

addFeature Physics

featProp Trash.Costume.scale setTo 0.05

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "TextLabel",
      "scriptText": `# BLUEPRINT TextLabel
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature AgentWidgets
addFeature Costume
featProp TextLabel.Costume.costumeName setTo 'onexone.json'

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "ColorChip",
      "scriptText": `# BLUEPRINT ColorChip
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature Costume
featProp ColorChip.Costume.costumeName setTo 'square.json'

addFeature Physics

// required directive
# PROGRAM UPDATE

// required directive
 

// required directive
# PROGRAM EVENT`
    },
    {
      "name": "MeterAlgaeEnergy",
      "scriptText": `# BLUEPRINT MeterAlgaeEnergy
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addProp reportSubject String 'Algae'
addProp energyLevel Number 100

addFeature Population
addFeature AgentWidgets

// setup the meter title
exprPush {{ 'Algae avg energy' }}
featPropPop MeterAlgaeEnergy.AgentWidgets.text

// Make costume an invisible dot
addFeature Costume
featProp MeterAlgaeEnergy.Costume.costumeName setTo 'onexone.json'

// Show meter on start.
featProp MeterAlgaeEnergy.AgentWidgets.isLargeGraphic setTo true
featProp MeterAlgaeEnergy.AgentWidgets.meterColor setTo 65280
// set to 1 so we can see something at start
// I tried binding and it wasn't working so sticking with this hack for now
featProp MeterAlgaeEnergy.AgentWidgets.meterProp setTo 1

// default placement for the algae meter
prop MeterAlgaeEnergy.x setTo 505
prop MeterAlgaeEnergy.y setTo 320
prop MeterAlgaeEnergy.alpha setTo 0.3

# PROGRAM UPDATE

onEvent Tick [[

  // Algae meter display
  featCall MeterAlgaeEnergy.Population countAgentProp 'Algae' 'energyLevel'
  exprPush {{ MeterAlgaeEnergy.getFeatProp('Population', 'avg').value }}
  propPop MeterAlgaeEnergy.energyLevel

  exprPush {{ MeterAlgaeEnergy.getFeatProp('Population', 'avg').value / 100 }}
  featPropPop MeterAlgaeEnergy.AgentWidgets.meter

  exprPush {{ MeterAlgaeEnergy.getProp('reportSubject').value + ' avg: ' + MeterAlgaeEnergy.getProp('energyLevel').value }}
  featPropPop MeterAlgaeEnergy.AgentWidgets.text

  // set meter color for average energy
  ifExpr {{ MeterAlgaeEnergy.getProp('energyLevel').value > 50 }} [[
    featProp MeterAlgaeEnergy.AgentWidgets.meterColor setTo 62580
  ]]
  ifExpr {{ MeterAlgaeEnergy.getProp('energyLevel').value < 50 }} [[
    featProp MeterAlgaeEnergy.AgentWidgets.meterColor setTo 16737792
  ]]
  ifExpr {{ MeterAlgaeEnergy.getProp('energyLevel').value < 20 }} [[
    featProp MeterAlgaeEnergy.AgentWidgets.meterColor setTo 16711680
  ]]

]]`
    },
    {
      "name": "MeterFishEnergy",
      "scriptText": `# BLUEPRINT MeterFishEnergy
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addProp reportSubject String 'Fish'
addProp energyLevel Number 100

addFeature Population
addFeature AgentWidgets

// setup the meter title
exprPush {{ 'Fish avg energy' }}
featPropPop MeterFishEnergy.AgentWidgets.text

// Make costume an invisible dot
addFeature Costume
featProp MeterFishEnergy.Costume.costumeName setTo 'onexone.json'

// Show meter on start.
featProp MeterFishEnergy.AgentWidgets.isLargeGraphic setTo true
featProp MeterFishEnergy.AgentWidgets.meterColor setTo 65280
// set to 1 so we can see something at start
// I tried binding and it wasn't working so sticking with this hack for now
featProp MeterFishEnergy.AgentWidgets.meterProp setTo 1


// default placement for the fish meter
prop MeterFishEnergy.x setTo 505
prop MeterFishEnergy.y setTo 320
prop MeterFishEnergy.alpha setTo 0.3

# PROGRAM UPDATE

onEvent Tick [[

  // Fish meter display
  featCall MeterFishEnergy.Population countAgentProp 'Fish' 'energyLevel'
  exprPush {{ MeterFishEnergy.getFeatProp('Population', 'avg').value }}
  propPop MeterFishEnergy.energyLevel

  exprPush {{ MeterFishEnergy.getFeatProp('Population', 'avg').value / 100 }}
  featPropPop MeterFishEnergy.AgentWidgets.meter

  exprPush {{ MeterFishEnergy.getProp('reportSubject').value + ' avg: ' + MeterFishEnergy.getProp('energyLevel').value }}
  featPropPop MeterFishEnergy.AgentWidgets.text

  // set meter color for average energy
  ifExpr {{ MeterFishEnergy.getProp('energyLevel').value > 50 }} [[
    featProp MeterFishEnergy.AgentWidgets.meterColor setTo 65280
  ]]
  ifExpr {{ MeterFishEnergy.getProp('energyLevel').value < 50 }} [[
    featProp MeterFishEnergy.AgentWidgets.meterColor setTo 16737792
  ]]
  ifExpr {{ MeterFishEnergy.getProp('energyLevel').value < 20 }} [[
    featProp MeterFishEnergy.AgentWidgets.meterColor setTo 16711680
  ]]

]]`
    },
    {
      "name": "GraphAlgaeEnergy",
      "scriptText": `# BLUEPRINT GraphAlgaeEnergy
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature Costume
featProp GraphAlgaeEnergy.Costume.costumeName setTo 'onexone.json'

addProp characterType String 'Algae'
addProp countType String 'avg'
addProp variableToGraph String 'energyLevel'
addProp labelText String 'Algae energyLevel'

// STUDENTS_MAY_CHANGE - change the character, variable, and possible countTypeto a different name as needed
// -- Character options: Fish, Algae
// -- Variable options: energyLevel
// -- Population options: sum, avg, min, max
prop GraphAlgaeEnergy.characterType setTo 'Algae'
prop GraphAlgaeEnergy.countType setTo 'avg'
prop GraphAlgaeEnergy.variableToGraph setTo 'energyLevel'
prop GraphAlgaeEnergy.labelText setTo 'Algae energyLevel'

addFeature AgentWidgets
addFeature Population
featProp GraphAlgaeEnergy.AgentWidgets.isLargeGraphic setTo true

// using a generic name so that it is easier to change later
addProp graphValue Number 0
prop GraphAlgaeEnergy.graphValue setMax 1000
prop GraphAlgaeEnergy.graphValue setMin 0

featCall GraphAlgaeEnergy.AgentWidgets bindGraphTo graphValue 30

// make sure something displays with some initial text, on bottom right at first
prop GraphAlgaeEnergy.x setTo 505
prop GraphAlgaeEnergy.y setTo 230
prop GraphAlgaeEnergy.zIndex setTo 300

exprPush {{ GraphAlgaeEnergy.getProp('characterType').value + ' ' + GraphAlgaeEnergy.getProp('countType').value + ' ' + GraphAlgaeEnergy.getProp('variableToGraph').value }}
propPop GraphAlgaeEnergy.labelText

exprPush {{ GraphAlgaeEnergy.getProp('labelText').value }}
featPropPop GraphAlgaeEnergy.AgentWidgets.text text

# PROGRAM UPDATE

onEvent Tick [[

  exprPush {{ GraphAlgaeEnergy.getProp('characterType').value }}
  featPropPop GraphAlgaeEnergy.Population.monitoredAgent

  exprPush {{ GraphAlgaeEnergy.getProp('variableToGraph').value }}
  featPropPop GraphAlgaeEnergy.Population.monitoredAgentProp

  featCall GraphAlgaeEnergy.Population countAgentProp

  exprPush {{ GraphAlgaeEnergy.getFeatProp('Population', GraphAlgaeEnergy.prop.countType.value).value }}
  propPop GraphAlgaeEnergy.graphValue
]]`
    },
    {
      "name": "GraphFishEnergy",
      "scriptText": `# BLUEPRINT GraphFishEnergy
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT
addFeature Costume
featProp GraphFishEnergy.Costume.costumeName setTo 'onexone.json'

addProp characterType String 'Fish'
addProp countType String 'avg'
addProp variableToGraph String 'energyLevel'
addProp labelText String 'Fish energyLevel'

// STUDENTS_MAY_CHANGE - change the character, variable, and possible countTypeto a different name as needed
// -- Character options: Fish, Algae
// -- Variable options: energyLevel
// -- Population options: sum, avg, min, max
prop GraphFishEnergy.characterType setTo 'Fish'
prop GraphFishEnergy.countType setTo 'avg'
prop GraphFishEnergy.variableToGraph setTo 'energyLevel'
prop GraphFishEnergy.labelText setTo 'Fish energyLevel'

addFeature AgentWidgets
addFeature Population
featProp GraphFishEnergy.AgentWidgets.isLargeGraphic setTo true

// using a generic name so that it is easier to change later
addProp graphValue Number 0
prop GraphFishEnergy.graphValue setMax 1000
prop GraphFishEnergy.graphValue setMin 0

featCall GraphFishEnergy.AgentWidgets bindGraphTo graphValue 30

// make sure something displays with some initial text, on bottom right at first
prop GraphFishEnergy.x setTo 505
prop GraphFishEnergy.y setTo 370
prop GraphFishEnergy.zIndex setTo 300

exprPush {{ GraphFishEnergy.getProp('characterType').value + ' ' + GraphFishEnergy.getProp('countType').value + ' ' + GraphFishEnergy.getProp('variableToGraph').value }}
propPop GraphFishEnergy.labelText
exprPush {{ GraphFishEnergy.getProp('labelText').value }}

featPropPop GraphFishEnergy.AgentWidgets.text

# PROGRAM UPDATE

every 1 runAtStart [[


  exprPush {{ GraphFishEnergy.getProp('characterType').value }}
  featPropPop Population monitoredAgent

  exprPush {{ GraphFishEnergy.getProp('variableToGraph').value }}
  featPropPop Population monitoredAgentProp

  featCall Population countAgentProp

  exprPush {{ GraphFishEnergy.getFeatProp('Population', GraphFishEnergy.prop.countType.value).value }}
  propPop graphValue
  
]]


// required directive
 `
    },
    {
      "name": "VeggieGarden",
      "scriptText": `# BLUEPRINT VeggieGarden
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false

# PROGRAM INIT
addFeature Costume

featProp VeggieGarden.Costume.costumeName setTo 'veggiegarden.png'
featProp VeggieGarden.Costume.scale setTo 0.5

addFeature Physics

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Gopher",
      "scriptText": `# BLUEPRINT Gopher
# TAG isCharControllable true
# TAG isPozyxControllable true
# TAG isPTrackControllable false
# PROGRAM INIT
addFeature Costume
addFeature Movement
addFeature AgentWidgets
// addFeature Cursor

featProp Gopher.Costume.costumeName setTo 'gopher.png'

addProp energyLevel Number 30
prop Gopher.energyLevel setMax 100
prop Gopher.energyLevel setMin 0

addProp type String 'change'
addProp movementType String 'wander'

// STUDENTS_MAY_CHANGE - set to edgeToEdge or wander - note other options below for speed and direction
prop Gopher.movementType setTo 'wander'

// STUDENTS_MAY_CHANGE - set as consumer or producer
prop Gopher.type setTo 'change'

addProp energyUse Number 0

// STUDENTS_MAY_CHANGE - to change how quickly Gopher use up energy and get hungry
prop Gopher.energyUse setTo 3

addProp grows Boolean false

// STUDENTS_MAY_CHANGE - change to 1 (true) turns on the feature that allows the Gopher to grow if this is 1
prop Gopher.grows setTo false

addProp startDirection Number 0

addFeature Physics
featProp Gopher.Costume.scale setTo 0.4


// set Touches
addFeature Touches
featCall Gopher.Touches monitor 'VeggieGarden' b2b

// show meter immediately
featProp Gopher.AgentWidgets.meterProp setTo 'energyLevel'

// set name
exprPush {{ Gopher.name }}
featPropPop Gopher.AgentWidgets.text


# PROGRAM UPDATE
onEvent Start [[

  // start at normal size unless you eat
  featProp Gopher.Costume.scale setTo 1

  // **** OPTIONS TO CHANGE BEHAVIOR ****

  dbgOut 'about to push'
  exprPush {{ agent.getProp('movementType').value == 'wander' }}
  dbgStack

  // if the movementType is wander
  ifExpr {{ Gopher.getProp('movementType').value == 'wander' }} [[
    featCall Gopher.Movement setMovementType 'wander' 0.5
    dbgOut 'inside wander'
  ]]

  // if it is edgetoedge
  ifExpr {{ Gopher.getProp('movementType').value == 'edgeToEdge' }} [[
    featCall Gopher.Movement setMovementType 'edgeToEdge' 1 0 180
    dbgOut 'inside edgeetoedge'
    exprPush {{ Gopher.getProp('startDirection').value }}
    featPropPop Gopher.Movement.direction
  ]]


  // STUDENTS_MAY_CHANGE to make gopher move faster when they are automatic
  featProp Gopher.Movement.distance setTo 2

  // set name + energyLevel
  exprPush {{ Gopher.name }}
  featPropPop Gopher.AgentWidgets.text

]]

ifExpr {{ Gopher.prop.Movement.compassDirection.value === 'E' }} [[
  featProp Gopher.Costume.flipX setTo false
]]
ifExpr {{ Gopher.prop.Movement.compassDirection.value === 'W' }} [[
  featProp Gopher.Costume.flipX setTo true
]]

when Gopher touches VeggieGarden [[
  every 1 runAtStart [[
    // always glow to show the interaction
    ifExpr {{ Gopher.getProp('isInert').value != true }} [[
      featProp Gopher.Costume.glow setTo 4
    ]]

    // only eat if the algae is above 0
    ifExpr {{ VeggieGarden.getProp('energyLevel').value > 0 }} [[
      prop Gopher.energyLevel add 10
      prop VeggieGarden.energyLevel sub 10
    ]]

    // grow if above 90% energy
    ifExpr {{ (Gopher.getProp('grows').value) && (Gopher.getProp('energyLevel').value > 90) }} [[

      // STUDENTS_MAY_CHANGE - this is the logic that makes large gopher use more energy, so changing the energyUse in here is something we might want to do
      featProp Gopher.Costume.scale setTo 2
      prop Gopher.energyUse setTo 2
    ]]

    ifExpr {{ VeggieGarden.getProp('energyLevel').value <= 0 }} [[
      prop VeggieGarden.alpha setTo 0.3
      prop VeggieGarden.isInert setTo true
    ]]

  ]]
]]

when Gopher lastTouches VeggieGarden [[
  featProp Gopher.Costume.glow setTo 0
]]


every 1 runAtStart [[
  // foodLevel goes down every n seconds
  exprPush {{ Gopher.getProp('energyLevel').value - Gopher.getProp('energyUse').value }}
  propPop Gopher.energyLevel

  // sated
  ifExpr {{ Gopher.getProp('energyLevel').value > 50 }} [[
    featProp Gopher.Costume.currentFrame setTo 0
    // Green
    featProp Gopher.AgentWidgets.meterColor setTo 65280
  ]]
  // could eat
  ifExpr {{ Gopher.getProp('energyLevel').value < 50 }} [[
    featProp Gopher.Costume.currentFrame setTo 1
    // Orange
    featProp Gopher.AgentWidgets.meterColor setTo 16737792
  ]]
  // hungry
  ifExpr {{ Gopher.getProp('energyLevel').value < 20 }} [[
    featProp Gopher.Costume.currentFrame setTo 1
    // Red
    featProp Gopher.AgentWidgets.meterColor setTo 16711680
  ]]
  // dead
  ifExpr {{ Gopher.getProp('energyLevel').value < 1 }} [[
    featProp Gopher.Costume.currentFrame setTo 2
    featCall Gopher.Movement setMovementType 'float'
    prop Gopher.alpha setTo 0.3
    prop Gopher.isInert setTo true
  ]]

  // set meter to mirror energyLevel
  featProp Gopher.AgentWidgets.meterProp setTo 'energyLevel'

]]

// required directive
# PROGRAM INIT

// required directive`
    }
  ],
  "instances": [
    {
      "id": "1700",
      "label": "LegendLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 455
prop agent.y setTo -400
featProp AgentWidgets text setTo 'Energy Key:'`
    },
    {
      "id": "1701",
      "label": "HighLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 455
prop y setTo -370
featProp AgentWidgets text setTo 'High'
prop agent.zIndex setTo 100`
    },
    {
      "id": "1702",
      "label": "MediumLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 455
prop y setTo -339.64
featProp AgentWidgets text setTo 'Medium'
prop agent.zIndex setTo 100`
    },
    {
      "id": "1703",
      "label": "LowLabel",
      "bpid": "TextLabel",
      "initScript": `prop x setTo 455
prop y setTo -308
featProp AgentWidgets text setTo 'Low'
prop agent.zIndex setTo 100`
    },
    {
      "id": "1704",
      "label": "HighChip",
      "bpid": "ColorChip",
      "initScript": `prop x setTo 455
prop y setTo -337.79
featCall agent.Costume setColorize 0 255 0
prop agent.zIndex setTo 95
featProp agent.Costume.height setTo 30
featProp agent.Costume.width setTo 100
`
    },
    {
      "id": "1705",
      "label": "MediumChip",
      "bpid": "ColorChip",
      "initScript": `prop x setTo 455
prop y setTo -307.35
featCall Costume setColorize 210 140 0
prop agent.zIndex setTo 95
featProp agent.Costume.height setTo 30
featProp agent.Costume.width setTo 100`
    },
    {
      "id": "1706",
      "label": "LowChip",
      "bpid": "ColorChip",
      "initScript": `prop x setTo 455
prop y setTo -275.80
featCall Costume setColorize 255 0 0
prop agent.zIndex setTo 95
featProp agent.Costume.height setTo 30
featProp agent.Costume.width setTo 100`
    },
    {
      "id": "1707",
      "label": "Sunbeam",
      "bpid": "Sunbeam",
      "initScript": `prop x setTo -404.2
prop y setTo -196.34
prop energyRate setTo 50
prop direction setTo 1
prop speed setTo 20
prop agent.zIndex setTo 0`
    },
    {
      "id": "1708",
      "label": "VeggieGarden1708",
      "bpid": "VeggieGarden",
      "initScript": `prop x setTo -286.67
prop y setTo 286.62`
    },
    {
      "id": "1709",
      "label": "Gopher1709",
      "bpid": "Gopher",
      "initScript": `prop x setTo 56.91
prop y setTo -185.26`
    },
    {
      "id": "1710",
      "label": "VeggieGarden1710",
      "bpid": "VeggieGarden",
      "initScript": `prop x setTo -114.07
prop y setTo 344.10`
    },
    {
      "id": "1711",
      "label": "VeggieGarden1711",
      "bpid": "VeggieGarden",
      "initScript": `prop x setTo 141.15
prop y setTo 342.01`
    },
    {
      "id": "1712",
      "label": "VeggieGarden1712",
      "bpid": "VeggieGarden",
      "initScript": `prop x setTo 309.04
prop y setTo 287.03`
    }
  ]
}