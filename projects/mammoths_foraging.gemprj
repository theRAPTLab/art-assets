{
  "id": "mammoths_foraging",
  "label": "Mammoths Foraging",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": "0x8A9A5B",
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false,
    "enableLogs": true,
    "logFrequency": 1
  },
  "rounds": [],
  "blueprints": [
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false


# PROGRAM INIT

// TODO: 
  // Allow hunters and other factors to impact plants
  // Consider a more analogous / embodiment based representation
  // add graphs of progress



prop global.visible setTo false

// required directive
# PROGRAM UPDATE`
    },
    {
      "name": "Tree",
      "scriptText": `# BLUEPRINT Tree
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Graphing

addProp energy number 100
prop Tree.energy setMax 100
prop Tree.energy setMin 0
featProp Tree.Graphing.meterProp setTo 'energy'

featProp Tree.Costume.costumeName setTo 'WL_tree.png'
featProp Tree.Costume.scale setTo 0.25
prop Tree.zIndex setTo 100


# PROGRAM UPDATE

onEvent START [[
  // setup the tree energy and adapt the artwork
  // we could assume it wil always be over 10, but I want the option
  // to set it randomly later
  prop Tree.energy setTo 100
]]


every 2 runAfter [[
  ifProp Tree.isInert equal false [[
    // ‚úèÔ∏è CHANGE the Tree loses energy if we increase this number
    prop Tree.energy sub 0
  ]]
]]

ifProp Tree.energy greaterThan 0 [[
  featProp Tree.Costume.costumeName setTo 'WL_tree.png'
  prop Tree.isInert setTo false
]]

// Set the color of the energy meter depending on the amount of energy that the character has
// These are green orange, and red in order
ifProp Tree.energy greaterThanOrEqual 60 [[
  featProp Tree.Graphing.meterColor setTo 65280
]]
ifProp Tree.energy lessThan 60 [[
  featProp Tree.Graphing.meterColor setTo 16737792
]]
ifProp Tree.energy lessThan 30 [[
  featProp Tree.Graphing.meterColor setTo 16711680
  featProp Tree.Costume.costumeName setTo 'WL_tree_bare.png'
]]

ifProp Tree.energy equal 0 [[
  prop Tree.isInert setTo true
]]`
    },
    {
      "name": "Mammoth",
      "scriptText": `# BLUEPRINT Mammoth
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable false

// üîé HOW This is the script that sets up how the mammoths in our model work.
// üîé HOW How do you think being a Mammoth changes the way you understand their environment?

# PROGRAM INIT

addFeature Costume
addFeature Physics
addFeature Touches
addFeature Graphing
addFeature Movement
addFeature IU

featProp Mammoth.Costume.costumeName setTo 'MM_mammoth.png'
featProp Mammoth.Costume.scale setTo 0.3
prop Mammoth.zIndex setTo 300

addProp energy number 100
prop Mammoth.energy setMax 100
prop Mammoth.energy setMin 0
featProp Mammoth.Graphing.meterProp setTo 'energy'

featCall Mammoth.Touches monitor 'Tree' c2b


# PROGRAM UPDATE

// ‚úèÔ∏è CHANGE Mammoth slowly loses energy just from existing (you can change how fast)
every 2 runAfter [[
  ifProp Mammoth.isInert equal false [[
    // the mammoth loses energy, which means it needs to eat
    prop Mammoth.energy sub 3
  ]]
]]

// üîé HOW Set the color of the energy meter depending on the amount of energy that the character has
// These are green orange, and red in order
ifProp Mammoth.energy greaterThanOrEqual 60 [[
  featProp Mammoth.Graphing.meterColor setTo 65280
]]
ifProp Mammoth.energy lessThan 60 [[
  featProp Mammoth.Graphing.meterColor setTo 16737792
]]
ifProp Mammoth.energy lessThan 30 [[
  featProp Mammoth.Graphing.meterColor setTo 16711680
]]


// üîé HOW When a mammoth sits over a tree for a while eat it
when Mammoth centertouches Tree [[
  every 1 runAtStart [[
    ifProp Mammoth.energy lessThanOrEqual 100 [[
      prop Mammoth.energy add 5
      prop Tree.energy sub 5
      featProp Mammoth.Costume.glow setTo 2
    ]]
  ]]
]]

// ‚úèÔ∏è If the mammoth has died from lack of energy, change how it looks
ifProp Mammoth.isInert equal false [[
  ifProp Mammoth.energy equal 0 [[
    featCall Mammoth.IU logString 'Mammoth died from starvation'
    prop Mammoth.alpha setTo 0.5
    prop Mammoth.isInert setTo true
  ]]
]]

// Make the mammoth glow if it touches a tree, but stop if it moves off.
when Mammoth centerfirsttouches Tree [[
  featProp Mammoth.Costume.glow setTo 1
]]
when Mammoth centerlasttouches Tree [[
  featProp Mammoth.Costume.glow setTo 0
]]

// Flip the artwork to point left or right depending on the direction the character is moving
ifFeatProp Mammoth.Movement.compassDirection equal 'E' [[
  featProp Mammoth.Costume.flipX setTo false
]]
ifFeatProp Mammoth.Movement.compassDirection equal 'W' [[
  featProp Mammoth.Costume.flipX setTo true
]]`
    },
    {
      "name": "Predator",
      "scriptText": `# BLUEPRINT Predator
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Movement

featProp Predator.Costume.costumeName setTo 'MM_coyote.png'
featProp Predator.Costume.glowColor setToColor 16189448
featProp Predator.Costume.scale setTo 0.2
prop Predator.zIndex setTo 400

featCall Predator.Touches monitor 'Mammoth' b2b

# PROGRAM UPDATE

when Predator firstTouches Mammoth [[
  featProp Predator.Costume.glow setTo 1
]]

when Predator lastTouches Mammoth [[
  featProp Predator.Costume.glow setTo 0
]]

when Predator touches Mammoth [[
  every 1 runAtStart [[
    featProp Predator.Costume.glow setTo 2
    prop Mammoth.energy sub 3
  ]]
]]

// Flip the artwork to point left or right depending on the direction the character is moving
ifFeatProp Predator.Movement.compassDirection equal 'E' [[
  featProp Predator.Costume.flipX setTo false
]]
ifFeatProp Predator.Movement.compassDirection equal 'W' [[
  featProp Predator.Costume.flipX setTo true
]]`
    },
    {
      "name": "Herbivore",
      "scriptText": `# BLUEPRINT Herbivore
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Movement

featProp Herbivore.Costume.costumeName setTo 'WL_beaver.png'
featProp Herbivore.Costume.glowColor setToColor 3208968
featProp Herbivore.Costume.scale setTo 0.2
prop Herbivore.zIndex setTo 400

featCall Herbivore.Touches monitor 'Tree' b2b

# PROGRAM UPDATE

when Herbivore firstTouches Tree [[
  featProp Herbivore.Costume.glow setTo 1
]]

when Herbivore lastTouches Tree [[
  featProp Herbivore.Costume.glow setTo 0
]]

when Herbivore touches Tree [[
  every 1 runAtStart [[
    featProp Herbivore.Costume.glow setTo 2
    prop Tree.energy sub 10
  ]]
]]

// Flip the artwork to point left or right depending on the direction the character is moving
ifFeatProp Herbivore.Movement.compassDirection equal 'E' [[
  featProp Herbivore.Costume.flipX setTo false
]]
ifFeatProp Herbivore.Movement.compassDirection equal 'W' [[
  featProp Herbivore.Costume.flipX setTo true
]]`
    },
    {
      "name": "Hunter",
      "scriptText": `# BLUEPRINT Hunter
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Movement

featProp Hunter.Costume.costumeName setTo 'MM_meeple.png'
featProp Hunter.Costume.color setToColor 11866642
featProp Hunter.Costume.glowColor setToColor 16189448
featProp Hunter.Costume.scale setTo 0.1
prop Hunter.zIndex setTo 410

featCall Hunter.Touches monitor 'Mammoth' b2b

# PROGRAM UPDATE

when Hunter firstTouches Mammoth [[
  featProp Hunter.Costume.glow setTo 1
]]

when Hunter lastTouches Mammoth [[
  featProp Hunter.Costume.glow setTo 0
]]

when Hunter touches Mammoth [[
  every 1 runAtStart [[
    featProp Hunter.Costume.glow setTo 2
    prop Mammoth.energy sub 2
  ]]
]]

// Flip the artwork to point left or right depending on the direction the character is moving
ifFeatProp Hunter.Movement.compassDirection equal 'E' [[
  featProp Hunter.Costume.flipX setTo false
]]
ifFeatProp Hunter.Movement.compassDirection equal 'W' [[
  featProp Hunter.Costume.flipX setTo true
]]`
    },
    {
      "name": "Gatherer",
      "scriptText": `# BLUEPRINT Gatherer
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Movement

featProp Gatherer.Costume.costumeName setTo 'MM_meeple.png'
featProp Gatherer.Costume.color setToColor 4686359
featProp Gatherer.Costume.glowColor setToColor 1636104
featProp Gatherer.Costume.scale setTo 0.1
prop Gatherer.zIndex setTo 410

featCall Gatherer.Touches monitor 'Tree' b2b

# PROGRAM UPDATE

when Gatherer firstTouches Tree [[
  featProp Gatherer.Costume.glow setTo 1
]]

when Gatherer lastTouches Tree [[
  featProp Gatherer.Costume.glow setTo 0
]]

when Gatherer touches Tree [[
  every 1 runAtStart [[
    featProp Gatherer.Costume.glow setTo 2
    prop Tree.energy sub 10
  ]]
]]

// Flip the artwork to point left or right depending on the direction the character is moving
ifFeatProp Gatherer.Movement.compassDirection equal 'E' [[
  featProp Gatherer.Costume.flipX setTo false
]]
ifFeatProp Gatherer.Movement.compassDirection equal 'W' [[
  featProp Gatherer.Costume.flipX setTo true
]]`
    },
    {
      "name": "HunterGatherer",
      "scriptText": `# BLUEPRINT HunterGatherer
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Touches
addFeature Movement

featProp HunterGatherer.Costume.costumeName setTo 'MM_meeple.png'
featProp HunterGatherer.Costume.color setToColor 4084985
featProp HunterGatherer.Costume.scale setTo 0.1
prop HunterGatherer.zIndex setTo 410

featCall HunterGatherer.Touches monitor 'Tree' b2b
featCall HunterGatherer.Touches monitor 'Mammoth' b2b


# PROGRAM UPDATE

when HunterGatherer firstTouches Tree [[
  featProp HunterGatherer.Costume.glow setTo 1
]]

when HunterGatherer lastTouches Tree [[
  featProp HunterGatherer.Costume.glowColor setToColor 1636104
  featProp HunterGatherer.Costume.glow setTo 0
]]

when HunterGatherer touches Tree [[
  every 1 runAtStart [[
    featProp HunterGatherer.Costume.glowColor setToColor 1636104
    featProp HunterGatherer.Costume.glow setTo 2
    prop Tree.energy sub 10
  ]]
]]

when HunterGatherer firstTouches Mammoth [[
  featProp HunterGatherer.Costume.glow setTo 1
]]

when HunterGatherer lastTouches Mammoth [[
  featProp HunterGatherer.Costume.glowColor setToColor 16189448
  featProp HunterGatherer.Costume.glow setTo 0
]]

when HunterGatherer touches Mammoth [[
  every 1 runAtStart [[
    featProp HunterGatherer.Costume.glowColor setToColor 16189448
    featProp HunterGatherer.Costume.glow setTo 2
    prop Mammoth.energy sub 2
  ]]
]]

// Flip the artwork to point left or right depending on the direction the character is moving
ifFeatProp HunterGatherer.Movement.compassDirection equal 'E' [[
  featProp HunterGatherer.Costume.flipX setTo false
]]
ifFeatProp HunterGatherer.Movement.compassDirection equal 'W' [[
  featProp HunterGatherer.Costume.flipX setTo true
]]`
    },
    {
      "name": "EnergyGraph",
      "scriptText": `# BLUEPRINT EnergyGraph
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Graphing
addFeature Population

// ‚úèÔ∏è Set this up to graph a property called energySum (calculate in update)
featProp EnergyGraph.Costume.costumeName setTo 'GEN_onexone.json'
featProp EnergyGraph.Graphing.isLargeGraphic setTo true

addProp energySum number 0
featProp EnergyGraph.Graphing.graphProp setTo 'energySum'

# PROGRAM UPDATE
// ‚úèÔ∏è Tell the Mammoths to count their energy, then put that value into energySum
featCall EnergyGraph.Population countCharacterProp 'Mammoth' 'energy'
featPropPush EnergyGraph.Population.sum
propPop EnergyGraph.energySum`
    },
    {
      "name": "River",
      "scriptText": `# BLUEPRINT River
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp River.Costume.costumeName setTo 'GEN_square.json'
featProp River.Costume.width setTo 100
featProp River.Costume.height setTo 800
featProp River.Costume.color setToColor 3386111
prop River.zIndex setTo -200

# PROGRAM UPDATE`
    },
    {
      "name": "OtherCharacters",
      "scriptText": `# BLUEPRINT OtherCharacters
# TAG isCharControllable true
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
// ‚úèÔ∏è This is just a circle to stand in for other things we think of

addFeature Costume
featProp OtherCharacters.Costume.costumeName setTo 'GEN_circle.json'
featProp OtherCharacters.Costume.scale setTo 0.3
# PROGRAM UPDATE`
    }
  ],
  "instances": [
    {
      "id": "1",
      "label": "Tree 1",
      "bpid": "Tree",
      "initScript": `prop Tree.x setTo -322.87
prop Tree.y setTo -322.41`
    },
    {
      "id": "2",
      "label": "Tree 2",
      "bpid": "Tree",
      "initScript": `prop Tree.x setTo -183.31
prop Tree.y setTo -327.08`
    },
    {
      "id": "3",
      "label": "Tree 3",
      "bpid": "Tree",
      "initScript": `prop Tree.x setTo -276.56
prop Tree.y setTo 261.64`
    }
  ]
}