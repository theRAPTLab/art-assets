{
  "id": "sorting_Finches",
  "label": "SSMV CT Model",
  "metadata": {
    "top": -400,
    "right": 400,
    "bottom": 400,
    "left": -400,
    "wrap": [
      false,
      false
    ],
    "bounce": true,
    "bgcolor": 11393254,
    "roundsCanLoop": true,
    "showWebCam": false,
    "scaleX": 1,
    "scaleY": 1,
    "translateX": 0,
    "translateY": 0,
    "rotate": 0,
    "mirrorX": false,
    "mirrorY": false
  },
  "rounds": [],
  "blueprints": [
    {
      "name": "global",
      "scriptText": `# BLUEPRINT global
# TAG IsCharControllable false
# TAG IsPozyxControllable false
# TAG IsPtrackControllable false
# PROGRAM INIT

// Explanation:
// This starter model assumes you have at least 2 charaacters, one that is controllable by IsPozyxControllable
// and one that is not though you can use character controller with the second
// Change this description once you are ready to share the model so others know how it is supposed to work.

addFeature Population

prop global.visible setTo false
addProp numfinchSmall number 0
addProp numfinchMed number 0
addProp numfinchLar number 0
addProp prediction boolean false
addProp numPlayers number 0
addProp numOccupiedNests number 0

addProp countReady number 0
// required directive
# PROGRAM UPDATE


ifExpr {{ global.getProp('countReady').value == global.getProp('numPlayers').value }} [[
  ifProp global.numOccupiedNests greaterThan 0 [[
    prop global.prediction setTo true
  ]]
]]`
    },
    {
      "name": "scientist",
      "scriptText": `# BLUEPRINT scientist
# TAG isPozyxControllable true
# TAG isCharControllable true
# TAG isPTrackControllable false

# PROGRAM INIT
// This is the most basic setup of properties that happens as soon as this character is saved

addFeature Costume
addFeature Physics
addFeature Touches
addFeature Movement

addProp beakLength number 0
addProp tempBeakLength number 0
addProp beakType number 0
addProp carrying boolean false
addProp player boolean false
addProp readyToPredict boolean false
addProp hasPartner number 0
addProp tempOtherScientist number 0
addProp isThatMe number 0

// set the scientist costume
featProp scientist.Costume.costumeName setTo 'SF_scientist.png'
featProp scientist.Costume.scale setTo 0.4

// monitor interactions beetween scientists and other agents in the model
featCall scientist.Touches monitor 'finches' c2b
featCall scientist.Touches monitor 'nest' c2c
featCall scientist.Touches monitor 'scientist' b2b
featCall scientist.Touches monitor 'clipboard' b2b

# PROGRAM UPDATE
// This is stuff that happens constantly and you can also check certain conditions
// For example every 1 runAtStart will run every time this is called, including the first, whereas every 5 will happen less offten and not the first time
// This is also where you can handle touches between characters such as When Algae touches Fish

onEvent ROUNDINIT [[
  ifProp scientist.player equal false [[
    prop global.numPlayers add 1
    prop scientist.player setTo true
  ]]
]]


// flips the scientist costume to show what direction they are moving
every 0.1 runAtStart [[
  ifFeatProp scientist.Movement.compassDirection equal 'E' [[
    featProp scientist.Costume.flipX setTo true
  ]]
  ifFeatProp scientist.Movement.compassDirection equal 'W' [[
    featProp scientist.Costume.flipX setTo false
  ]]
]]

// scientists who are not carrying finch beak properties can interact with a finch
when scientist centerfirsttouches finches [[
  ifProp scientist.carrying equal false [[
    ifProp finches.carried equal false [[
      featProp finches.Costume.glow setTo 1
      // push the finch beaktype and beaklength properties to the scientist beaktype and beaklength properties
      propPush finches.beakLength
      propPop scientist.beakLength
      propPush finches.beakType
      propPop scientist.beakType
      // hide finches and set them as inert so we cannot interact with them again
      prop finches.visible setTo false
      prop finches.carried setTo true
      prop finches.isInert setTo true
      // change the costume of the scientist to show they are carrying beak properties
      featProp scientist.Costume.costumeName setTo 'SF_scientistcarrying.png'
      featProp scientist.Costume.scale setTo 0.4
      prop scientist.carrying setTo true

    ]]
  ]]
]]
// scientists carrying finch beak properties can interact with empty nests to transfer beak properties to the nest
when scientist centerfirsttouchescenter nest [[
  ifProp scientist.carrying equal true [[
    ifProp nest.occupied equal false [[

      // change costumes to show scientist placing finch in nest
      featProp scientist.Costume.costumeName setTo 'SF_scientist.png'
      featProp scientist.Costume.scale setTo 0.4
      featProp nest.Costume.costumeName setTo 'SF_nestoccupied.png'
      featProp nest.Costume.scale setTo 0.2
      featProp nest.Costume.glow setTo 1

      // transfer the finch beaklength and beaktype properties from the scientist to the nest
      propPush scientist.beakLength
      propPop nest.beakLength
      propPush scientist.beakType
      propPop nest.beakType

      // set the nest as occupied
      prop nest.occupied setTo true
      prop global.numOccupiedNests add 1
    ]]
  ]]

  // scientists who are not carrying finches can interact with a nest to pick up the beak properties housed in the nest
  ifProp scientist.carrying equal false [[
    ifProp nest.occupied equal true [[
      featProp scientist.Costume.glow setTo 1
      featProp scientist.Costume.costumeName setTo 'SF_scientistcarrying.png'
      featProp scientist.Costume.scale setTo 0.3
      featProp nest.Costume.costumeName setTo 'SF_nest.png'
      featProp nest.Costume.scale setTo 0.1
      // transfer the beaklength and beaktype properties from the nest to the scientist
      propPush nest.beakLength
      propPop scientist.beakLength
      propPush nest.beakType
      propPop scientist.beakType
      // set the new nest and scientist carrying properties
      prop scientist.carrying setTo true
      prop nest.occupied setTo false
      prop global.numOccupiedNests sub 1
      // reset the nest beak properties to 0
      prop nest.beakLength setTo 0
      prop nest.beakType setTo 0
    ]]
  ]]
]]
// when scientists leave a nest after dropping off a finch, set their carrying property to false and reset beak properties of the scientist
when scientist centerlasttouchescenter nest [[
  ifProp scientist.carrying equal true [[
    ifProp nest.occupied equal true [[
      prop scientist.carrying setTo false
      prop scientist.beakLength setTo 0
      prop scientist.beakType setTo 0
    ]]
  ]]
]]

// scientists holding a finch can interact with another scientist holding a finch

when scientist touches scientist [[
  ifProp scientist.carrying equal true [[
    ifProp scientist.hasPartner equal 0 [[
      propPush agent.beakLength
      propPop scientist.isThatMe
      propPush scientist.beakLength
      propPop agent.isThatMe
      ifExpr {{ scientist.getProp('beakLength').value != scientist.getProp('isThatMe').value }} [[
        ifProp agent.hasPartner equal 0 [[
          ifProp agent.carrying equal true [[
            prop scientist.hasPartner setTo 1
            prop agent.hasPartner setTo 1
            propPush agent.beakLength
            propPop scientist.tempBeakLength
            propPush scientist.beakLength
            propPop agent.tempBeakLength

            ifExpr {{ scientist.getProp('beakLength').value > scientist.getProp('tempBeakLength').value }} [[
              featProp scientist.Costume.costumeName setTo 'SF_scientistcarryinglarger.png'
              featProp agent.Costume.costumeName setTo 'SF_scientistcarryingsmaller.png'
              featProp scientist.Costume.scale setTo 0.1
              featProp agent.Costume.scale setTo 0.1
              featProp scientist.Costume.glow setTo 1
              featProp agent.Costume.glow setTo 1
            ]]

            ifExpr {{ scientist.getProp('beakLength').value < scientist.getProp('tempBeakLength').value }} [[
              featProp agent.Costume.costumeName setTo 'SF_scientistcarryinglarger.png'
              featProp scientist.Costume.costumeName setTo 'SF_scientistcarryingsmaller.png'
              featProp scientist.Costume.scale setTo 0.1
              featProp agent.Costume.scale setTo 0.1
              featProp scientist.Costume.glow setTo 1
              featProp agent.Costume.glow setTo 1
            ]]
          ]]
        ]]
      ]]
    ]]
  ]]
]]


// change the costume of scientist after interacting with another scientist to compare beaklength properties
when scientist lasttouches scientist [[
  prop scientist.hasPartner setTo 0
  prop agent.hasPartner setTo 0

  ifProp scientist.carrying equal true [[
    ifProp agent.carrying equal true [[
      featProp scientist.Costume.costumeName setTo 'SF_scientistcarrying.png'
      featProp scientist.Costume.scale setTo 0.15
    ]]
  ]]
]]

when scientist touches clipboard [[
  ifProp scientist.readyToPredict equal false [[
    featProp scientist.Costume.glow setTo 1
    prop scientist.readyToPredict setTo true
    prop global.countReady add 1
  ]]
]]


when scientist lasttouches clipboard [[
  prop global.countReady sub 1
  prop scientist.readyToPredict setTo false
]]`
    },
    {
      "name": "background",
      "scriptText": `# BLUEPRINT background
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp background.Costume.costumeName setTo 'SF_background.png'
featProp background.Costume.scale setTo 1.09
// featProp background.Costume.height setTo 1800

# PROGRAM UPDATE
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body`
    },
    {
      "name": "island1",
      "scriptText": `# BLUEPRINT island1
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp island1.Costume.costumeName setTo 'SF_cactus.png'
featProp island1.Costume.scale setTo 0.2
prop island1.alpha setTo 0.8

# PROGRAM UPDATE
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body`
    },
    {
      "name": "island2",
      "scriptText": `# BLUEPRINT island2
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp island2.Costume.costumeName setTo 'SF_island2.png'
featProp island2.Costume.scale setTo 0.6
prop island2.alpha setTo 0.8

# PROGRAM UPDATE
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body`
    },
    {
      "name": "finches",
      "scriptText": `# BLUEPRINT finches
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Population
addFeature Physics
addFeature Movement
addFeature Touches

addProp beakType number 0
addProp beakLength number 0
addProp carried boolean false

featProp finches.Costume.costumeName setTo 'SF_finch.png'
featProp finches.Costume.scale setTo 0.3

featCall finches.Touches monitor 'scientist' c2b


# PROGRAM UPDATE
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body`
    },
    {
      "name": "nest",
      "scriptText": `# BLUEPRINT nest
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Touches

addProp occupied boolean false
addProp nestSize number 0
addProp beakLength number 0
addProp beakType number 0
addProp match number 0

featProp nest.Costume.costumeName setTo 'SF_nest.png'
featProp nest.Costume.scale setTo 0.1

featCall nest.Touches monitor 'scientist' c2b


# PROGRAM UPDATE
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]

  ifProp global.prediction equal true [[
    ifProp nest.occupied equal true [[
      exprPush {{ nest.getProp('nestSize').value - nest.getProp('beakType').value }}
      propPop nest.match
      ifProp nest.match equal 0 [[
        featProp nest.Costume.glow setTo 1
      ]]
      ifProp nest.match notEqual 0 [[
        prop nest.alpha setTo 0.3
      ]]
    ]]
  ]]


// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body`
    },
    {
      "name": "clipboard",
      "scriptText": `# BLUEPRINT clipboard
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
addFeature Physics
addFeature Touches

featProp clipboard.Costume.costumeName setTo 'SF_clipboard.png'
featProp clipboard.Costume.scale setTo 0.1

featCall clipboard.Touches monitor 'scientist' b2b

# PROGRAM UPDATE
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]




// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body`
    },
    {
      "name": "foodSeeds",
      "scriptText": `# BLUEPRINT foodSeeds
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp foodSeeds.Costume.costumeName setTo 'SF_seeds.png'
featProp foodSeeds.Costume.scale setTo 0.2

# PROGRAM UPDATE
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body`
    },
    {
      "name": "foodInsects",
      "scriptText": `# BLUEPRINT foodInsects
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp foodInsects.Costume.costumeName setTo 'SF_insects.png'
featProp foodInsects.Costume.scale setTo 0.15
featProp foodInsects.Costume.flipX setTo true

# PROGRAM UPDATE
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body`
    },
    {
      "name": "foodFruit",
      "scriptText": `# BLUEPRINT foodFruit
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp foodFruit.Costume.costumeName setTo 'SF_cactusfruit.png'
featProp foodFruit.Costume.scale setTo 0.15

# PROGRAM UPDATE
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body`
    },
    {
      "name": "island3",
      "scriptText": `# BLUEPRINT island3
# TAG isCharControllable false
# TAG isPozyxControllable false
# TAG isPTrackControllable false

# PROGRAM INIT
addFeature Costume
featProp island3.Costume.costumeName setTo 'SF_island4.png'
featProp island3.Costume.scale setTo 0.15
prop island3.alpha setTo 0.8

# PROGRAM UPDATE
// code to run every frame
// when xxx touches yyy [[ ]]
// every 5 runAfter [[ ]]
// onEvent Tick [[ ]]

// COMMENT KEY
// 🔎 WHAT DOES THIS DO? heading
// 🔎 body
// ✏️ LETS CHANGE THIS: heading
// ✏️ body`
    }
  ],
  "instances": [
    {
      "id": "1",
      "label": "background1",
      "bpid": "background",
      "initScript": `prop x setTo 0.6
prop y setTo -3.72`
    },
    {
      "id": "2",
      "label": "island12",
      "bpid": "island1",
      "initScript": `prop x setTo -29.07
prop y setTo 324.18`
    },
    {
      "id": "7",
      "label": "island27",
      "bpid": "island2",
      "initScript": `prop x setTo 278.39
prop y setTo 331.37`
    },
    {
      "id": "25",
      "label": "finches4",
      "bpid": "finches",
      "initScript": `prop x setToRnd -350 350 false
prop y setToRnd -241 12 false
prop beakType setTo 1
prop beakLength setTo 4`
    },
    {
      "id": "26",
      "label": "finches2",
      "bpid": "finches",
      "initScript": `prop x setToRnd -350 350 false
prop y setToRnd -241 12 falsep
prop beakType setTo 0
prop beakLength setTo 2`
    },
    {
      "id": "27",
      "label": "finches1",
      "bpid": "finches",
      "initScript": `prop x setToRnd -350 350 false
prop y setToRnd -241 12 false
prop beakType setTo 0
prop beakLength setTo 1`
    },
    {
      "id": "28",
      "label": "finches3",
      "bpid": "finches",
      "initScript": `prop x setToRnd -350 350 false
prop y setToRnd -241 12 false
prop beakType setTo 1
prop beakLength setTo 3`
    },
    {
      "id": "29",
      "label": "finches5",
      "bpid": "finches",
      "initScript": `prop x setToRnd -350 350 false
prop y setToRnd -241 12 false
prop beakType setTo 2
prop beakLength setTo 5`
    },
    {
      "id": "30",
      "label": "finches6",
      "bpid": "finches",
      "initScript": `prop x setToRnd -350 350 false
prop y setToRnd -241 12 false
prop beakType setTo 2
prop beakLength setTo 6`
    },
    {
      "id": "31",
      "label": "nest1",
      "bpid": "nest",
      "initScript": `prop x setTo -372.16
prop y setTo 123.03
prop nestSize setTo 0`
    },
    {
      "id": "32",
      "label": "nest2",
      "bpid": "nest",
      "initScript": `prop x setTo -289.61
prop y setTo 180.44
prop nestSize setTo 0`
    },
    {
      "id": "33",
      "label": "nest3",
      "bpid": "nest",
      "initScript": `prop x setTo -72.64
prop y setTo 174.49
prop nestSize setTo 1`
    },
    {
      "id": "34",
      "label": "nest4",
      "bpid": "nest",
      "initScript": `prop x setTo 42.76
prop y setTo 170.58
prop nestSize setTo 1`
    },
    {
      "id": "35",
      "label": "nest5",
      "bpid": "nest",
      "initScript": `prop x setTo 269.6
prop y setTo 171.38
prop nestSize setTo 2`
    },
    {
      "id": "36",
      "label": "nest6",
      "bpid": "nest",
      "initScript": `prop x setTo 376.8
prop y setTo 114.5
prop nestSize setTo 2`
    },
    {
      "id": "37",
      "label": "clipboard37",
      "bpid": "clipboard",
      "initScript": `prop x setTo 1.75
prop y setTo -343.26`
    },
    {
      "id": "39",
      "label": "foodInsects39",
      "bpid": "foodInsects",
      "initScript": `prop x setTo 336.50
prop y setTo 266.23`
    },
    {
      "id": "40",
      "label": "foodFruit40",
      "bpid": "foodFruit",
      "initScript": `prop x setTo 1.19
prop y setTo 256.61`
    },
    {
      "id": "41",
      "label": "island341",
      "bpid": "island3",
      "initScript": `prop x setTo -294.21
prop y setTo 300.60`
    },
    {
      "id": "42",
      "label": "foodSeeds42",
      "bpid": "foodSeeds",
      "initScript": `prop x setTo -366.78
prop y setTo 251.37`
    }
  ]
}